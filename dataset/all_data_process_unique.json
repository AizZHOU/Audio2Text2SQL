[
    {
        "db_id": "wta_1",
        "question": "每个排名日期总共有多少次巡回比赛？",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "mask_query": "SELECT sum(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "bakery_1",
        "question": "价格超过10美元的蛋糕有哪些口味？",
        "query": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
        "mask_query": "SELECT flavor FROM <mask> WHERE food  =  \"Cake\" AND price  >  10"
    },
    {
        "db_id": "epinions_1",
        "question": "查找每个目标用户的姓名和平均信任分数。",
        "query": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id",
        "mask_query": "SELECT T1.<unk> ,  avg(<mask>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "match_season",
        "question": "每个国家有多少球员？",
        "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "找出执行次数最多的服务类型的描述和代码。",
        "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> , T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "返回不属于拥有两个或更少房产的用户的房产的邮政编码。",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> NOT IN ( SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  <=  2 );"
    },
    {
        "db_id": "car_1",
        "question": "欧洲哪些国家至少有3家汽车制造商？",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  '欧洲' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "mask_query": "SELECT T1.<unk> FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.<unk>  =  T2.<unk> JOIN CAR_MAKERS AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  '欧洲' GROUP BY T1.<unk> HAVING count(*)  >=  3;"
    },
    {
        "db_id": "college_2",
        "question": "按字母顺序列出所有不同讲师的姓名。",
        "query": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "mask_query": "SELECT DISTINCT <unk> FROM  <mask> ORDER BY <unk>"
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示单元状态可用性均为0和1的公寓数。",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  0 INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  1"
    },
    {
        "db_id": "pilot_record",
        "question": "显示由34岁以下飞行员驾驶的飞机系列号",
        "query": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  <  34"
    },
    {
        "db_id": "restaurants",
        "question": "在“西湖”地区一家好的“淮南”餐厅？",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"西湖\" AND t1.food_type  =  \"淮南\" AND t1.rating  >  2.5;",
        "mask_query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN <mask> AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"西湖\" AND t1.food_type  =  \"淮南\" AND t1.rating  >  2.5;"
    },
    {
        "db_id": "boat_1",
        "question": "返回所有被预定的船只的唯一船只ID（BID）。",
        "query": "SELECT DISTINCT bid FROM Reserves",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "insurance_fnol",
        "question": "找到总结算金额最大的索赔。返回索赔的生效日期。",
        "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1"
    },
    {
        "db_id": "gas_company",
        "question": "显示所有公司的最小、最大和平均市场价值。",
        "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "mask_query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM <mask>"
    },
    {
        "db_id": "soccer_2",
        "question": "学生参加选拔赛的不同的省是什么？",
        "query": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "mask_query": "SELECT DISTINCT <unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "government_shift",
        "question": "哪些客户从未使用过任何服务？告诉我顾客的名字。",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2",
        "mask_query": "SELECT customer_details FROM customers EXCEPT SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2"
    },
    {
        "db_id": "film_rank",
        "question": "请展示电影的名称和市场估计的类型。",
        "query": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "voter_1",
        "question": "那些名字不是“李红”的参赛者的名字是什么？",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != \"李红\"",
        "mask_query": "SELECT <unk> FROM contestants WHERE <unk> != \"李红\""
    },
    {
        "db_id": "sports_competition",
        "question": "哪些国家从未参加过“友谊型”？",
        "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  '友谊型'",
        "mask_query": "SELECT country FROM <mask> EXCEPT SELECT country FROM <mask> WHERE competition_type  =  '友谊型'"
    },
    {
        "db_id": "address_1",
        "question": "住得离琳达史密斯最远的学生的名字和姓氏是什么？",
        "query": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
        "mask_query": "SELECT T3.<unk> ,  T3.Lname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "成绩单的平均日期是什么？",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "allergy_1",
        "question": "过敏原是\"猫”的过敏类型是什么？",
        "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"猫\"",
        "mask_query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"猫\""
    },
    {
        "db_id": "gas_company",
        "question": "所有公司的主要行业有是什么？",
        "query": "SELECT DISTINCT main_industry FROM company",
        "mask_query": "SELECT DISTINCT main_industry FROM <mask>"
    },
    {
        "db_id": "ship_mission",
        "question": "船的数量是多少？",
        "query": "SELECT count(*) FROM ship",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "e_learning",
        "question": "列出个人姓名为“小天”的学生入学和毕业日期。",
        "query": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"小天\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"小天\""
    },
    {
        "db_id": "warehouse_1",
        "question": "有多少个不同的仓库的箱子里存储了石头？",
        "query": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
        "mask_query": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'"
    },
    {
        "db_id": "vehicle_driver",
        "question": "给出总产量超过100辆或最高时速超过150辆的车型。",
        "query": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
        "mask_query": "SELECT model FROM <mask> WHERE total_production  >  100 OR top_speed  >  150"
    },
    {
        "db_id": "student_assessment",
        "question": "人们居住的不同城市有哪些？",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.<unk> = T2.<unk>"
    },
    {
        "db_id": "flight_1",
        "question": "按起飞城市的字母顺序排列的所有航班的航班号、起点和目的地是什么？",
        "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM Flight ORDER BY <unk>"
    },
    {
        "db_id": "roller_coaster",
        "question": "显示过山车的名字和他们所在的国家的名字。",
        "query": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "yelp",
        "question": "“四川”“成都”有多少“星巴克”？",
        "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"成都\" AND name  =  \"星巴克\" AND state  =  \"四川\";",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE <unk>  =  \"成都\" AND <unk>  =  \"星巴克\" AND <unk>  =  \"四川\";"
    },
    {
        "db_id": "book_press",
        "question": "所有出版社每年的平均利润和最高利润分别是多少？",
        "query": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
        "mask_query": "SELECT avg(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "什么是对“研究院”角色的完整描述。",
        "query": "SELECT role_description FROM Staff_Roles WHERE role_code  =  '研究院'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '研究院'"
    },
    {
        "db_id": "game_1",
        "question": "所有不是电子游戏玩家的学生的ID是什么？",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM Plays_games"
    },
    {
        "db_id": "scholar",
        "question": "列表PLDI 2015的论文",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "mask_query": "SELECT DISTINCT t1.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.venueid  =  t1.venueid WHERE t1.<unk>  =  2015 AND t2.venuename  =  \"pldi\";"
    },
    {
        "db_id": "document_management",
        "question": "访问次数最少的文档的结构是什么？",
        "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.<unk> FROM documents AS t1 JOIN document_structures AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "pilot_record",
        "question": "不同国籍的飞行员是什么？显示不同国籍和每个国籍的飞行员人数。",
        "query": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "vehicle_driver",
        "question": "返回1996年制造的车辆的最高速度和功率。",
        "query": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
        "mask_query": "SELECT top_speed ,  power FROM <mask> WHERE build_year  =  1996"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "列出所有流程结果的代码和说明。",
        "query": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes",
        "mask_query": "SELECT <unk> ,  <unk> FROM Process_outcomes"
    },
    {
        "db_id": "hr_1",
        "question": "“财务”部门所有员工的名字和职位ID是什么？",
        "query": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  '财务'",
        "mask_query": "SELECT T1.first_name ,  T1.job_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  '财务'"
    },
    {
        "db_id": "city_record",
        "question": "找出在2010后曾经是主办城市的城市。",
        "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
        "mask_query": "SELECT T1.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"
    },
    {
        "db_id": "soccer_2",
        "question": "不同位置上培训时间超过1000小时的学生的最长训练时间是多少？",
        "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "mask_query": "SELECT max(T1.<unk>) ,  <unk> FROM player AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  1000 GROUP BY T2.<unk>"
    },
    {
        "db_id": "college_1",
        "question": "找到每个系的课程数量。",
        "query": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
        "mask_query": "SELECT count(*) ,  dept_code FROM <mask> AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code"
    },
    {
        "db_id": "scholar",
        "question": "什么是最好的“NLP”会议？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
    },
    {
        "db_id": "sakila_1",
        "question": "库存中副本最多的电影的名称和ID是什么？",
        "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "twitter_1",
        "question": "找到有最少追随者的用户的名字和电子邮件。",
        "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "election",
        "question": "有代表参加“拨款”委员会和“经济问题”委员会的政党名字是什么？",
        "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"拨款\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"经济问题\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"拨款\" INTERSECT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"经济问题\""
    },
    {
        "db_id": "wrestler",
        "question": "返回最低保持天数的摔跤手的名字。",
        "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "question": "所有参加过至少一门课程的学生的ID是什么？",
        "query": "SELECT student_id FROM student_course_attendance",
        "mask_query": "SELECT <unk> FROM student_course_attendance"
    },
    {
        "db_id": "university_basketball",
        "question": "返回1850年以前成立的大学的平均招生人数。",
        "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
        "mask_query": "SELECT avg(enrollment) FROM <mask> WHERE founded  <  1850"
    },
    {
        "db_id": "boat_1",
        "question": "返回30岁以上船员的所有详细信息。",
        "query": "SELECT * FROM Sailors WHERE age  >  30",
        "mask_query": "SELECT * FROM <mask> WHERE <unk>  >  30"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示所有产品名称和每个产品名称所订购的总数量。",
        "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "mask_query": "SELECT T2.<unk> ,  sum(T1.<unk>) FROM Order_items AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "wine_1",
        "question": "返回2010之前生产的葡萄酒的价格。",
        "query": "SELECT Price FROM WINE WHERE YEAR  <  2010",
        "mask_query": "SELECT <unk> FROM WINE WHERE YEAR  <  2010"
    },
    {
        "db_id": "geo",
        "question": "有多少人生活在与“山东”接壤的最小的省？",
        "query": "SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"山东\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"山东\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"山东\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"山东\" );"
    },
    {
        "db_id": "movie_2",
        "question": "查找至少播放一部电影的电影院的名称。",
        "query": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
        "mask_query": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1"
    },
    {
        "db_id": "university_basketball",
        "question": "所有学校的招生总数是多少？",
        "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
        "mask_query": "SELECT sum(enrollment) ,  min(enrollment) FROM <mask>"
    },
    {
        "db_id": "conference",
        "question": "查找2004年没有任何工作人员参加任何会议的大学的名称和地点。",
        "query": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
        "mask_query": "SELECT T1.<unk> ,  T1.location FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)"
    },
    {
        "db_id": "race_track",
        "question": "显示所有没有比赛的赛道名称。",
        "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
        "mask_query": "SELECT name FROM <mask> WHERE track_id NOT IN (SELECT track_id FROM <mask>)"
    },
    {
        "db_id": "flight_2",
        "question": "返回代号为“AKO”的机场名称。",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "mask_query": "SELECT <unk> FROM AIRPORTS WHERE <unk>  =  \"AKO\""
    },
    {
        "db_id": "movie_1",
        "question": "平均评级最高的电影片名是什么及它们的评级是多少？",
        "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY avg(T1.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "decoration_competition",
        "question": "成员的名字和国家是什么？",
        "query": "SELECT Name ,  Country FROM member",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "geo",
        "question": "哪条河流贯穿最多数省",
        "query": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY ( <unk> ) ORDER BY COUNT ( DISTINCT <unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "voter_2",
        "question": "总共有多少学生？",
        "query": "SELECT count(*) FROM STUDENT",
        "mask_query": "SELECT count(*) FROM STUDENT"
    },
    {
        "db_id": "college_2",
        "question": "那些没有上过“生物”系课程的学生的名字是什么？",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  '生物学')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE id NOT IN (SELECT T1.id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '生物学')"
    },
    {
        "db_id": "college_2",
        "question": "按学生学分总数排序，“数学”系学生的所有指导老师的姓名是什么？",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  '数学' ORDER BY T3.tot_cred",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.i_id  =  T2.id JOIN <mask> AS T3 ON T1.s_id  =  T3.id WHERE T3.<unk>  =  '数学' ORDER BY T3.<unk>"
    },
    {
        "db_id": "club_1",
        "question": "找出所有俱乐部中至少有一个成员来自城市代码是“武汉”的城市的俱乐部名字。",
        "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"武汉\"",
        "mask_query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.<unk>  =  \"武汉\""
    },
    {
        "db_id": "car_racing",
        "question": "显示所有司机的总分和平均分。",
        "query": "SELECT sum(Points) ,  avg(Points) FROM driver",
        "mask_query": "SELECT sum(<unk>) ,  avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "geo",
        "question": "面积最大的省中人口最多的城市是什么？",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "customers_and_orders",
        "question": "按产品名称排序，显示所有产品的ID和产品类型。",
        "query": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "art_1",
        "question": "在1884年创作了一幅油画的艺术家的出生年份是什么？",
        "query": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
        "mask_query": "SELECT T1.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  1884 AND <unk>  =  \"canvas\""
    },
    {
        "db_id": "college_2",
        "question": "查找2009“秋季”和2010“春季”课程。",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  '秋季' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  '春季' AND YEAR  =  2010",
        "mask_query": "SELECT <unk> FROM SECTION WHERE <unk>  =  '秋季' AND YEAR  =  2009 INTERSECT SELECT <unk> FROM SECTION WHERE <unk>  =  '春季' AND YEAR  =  2010"
    },
    {
        "db_id": "institution_sports",
        "question": "返回在温哥华市或卡尔加里市注册的机构。",
        "query": "SELECT Enrollment FROM institution WHERE City  =  \"Vancouver\" OR City  =  \"Calgary\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Vancouver\" OR <unk>  =  \"Calgary\""
    },
    {
        "db_id": "loan_1",
        "question": "对于不同州的信用评分超过100的客户，帐户总余额是多少？",
        "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "mask_query": "SELECT sum(<unk>) ,  <unk> FROM <mask> WHERE <unk>  >  100 GROUP BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "找出2014年度“探鱼”的所有评论",
        "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"探鱼\" AND t2.year  =  2014;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"探鱼\" AND t2.<unk>  =  2014;"
    },
    {
        "db_id": "imdb",
        "question": "“李安”在2002前和2010后导演了多少部电影？",
        "query": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"李安\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk>  ) FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t5.<unk> WHERE t3.<unk>  =  \"李安\" AND t4.<unk>  <  2010 AND t4.<unk>  >  2002;"
    },
    {
        "db_id": "voter_2",
        "question": "对于每个选举周期，报告投票记录的数量。",
        "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "mask_query": "SELECT <unk> ,  count(*) FROM VOTING_RECORD GROUP BY <unk>"
    },
    {
        "db_id": "wrestler",
        "question": "显示不同的淘汰赛队伍和每个队伍淘汰赛的数量。",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM elimination GROUP BY <unk>"
    },
    {
        "db_id": "aircraft",
        "question": "每架获奖的飞机叫什么名字？获奖多少次？",
        "query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
        "mask_query": "SELECT T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN MATCH AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "geo",
        "question": "中国最小的河流中最长的河流是什么？",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "concert_singer",
        "question": "容量在5000到10000之间的所有体育场的位置和名称是什么？",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "mask_query": "SELECT LOCATION ,  name FROM <mask> WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "race_track",
        "question": "给出轨道的不同位置。",
        "query": "SELECT DISTINCT LOCATION FROM track",
        "mask_query": "SELECT DISTINCT LOCATION FROM <mask>"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "一个课程的注册结果最多能在不同的成绩单显示多少次？同时显示课程注册ID。",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "game_injury",
        "question": "容量百分比高于100%的体育场馆的平均出勤率是多少？",
        "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100",
        "mask_query": "SELECT average_attendance FROM <mask> WHERE capacity_percentage  >  100"
    },
    {
        "db_id": "manufacturer",
        "question": "查找有超过10个组件的所有家具的组件数量和名称。",
        "query": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",
        "mask_query": "SELECT <unk> ,  name FROM <mask> WHERE <unk>  >  10"
    },
    {
        "db_id": "scholar",
        "question": "列出2011年所有的期刊",
        "query": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;",
        "mask_query": "SELECT DISTINCT journalid FROM <mask> WHERE YEAR  =  2011 GROUP BY journalid;"
    },
    {
        "db_id": "book_1",
        "question": "列出购买价格最高的所有书的书名。",
        "query": "SELECT title FROM book WHERE purchaseprice  =  (SELECT max(purchaseprice) FROM book)",
        "mask_query": "SELECT title FROM book WHERE purchaseprice  =  (SELECT max(purchaseprice) FROM book)"
    },
    {
        "db_id": "soccer_2",
        "question": "学生在不同的位置上花费的最短时间是多少？",
        "query": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos",
        "mask_query": "SELECT min(T2.<unk>) ,   T1.<unk> FROM tryout AS T1 JOIN player AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "wedding",
        "question": "显示所有没有婚礼的男性的姓名和年龄。",
        "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "mask_query": "SELECT name ,  age FROM <mask> WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM <mask>)"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "请给我花费超过100的服务类型的描述。",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  100"
    },
    {
        "db_id": "geo",
        "question": "哪些省有一个名叫“长沙”的大城市",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"长沙\" AND population  >  150000;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"长沙\" AND <unk>  >  150000;"
    },
    {
        "db_id": "shop_membership",
        "question": "那些有会员的家乡在“苏州，江苏”和“泉州，福建”的分支机构叫什么名字？",
        "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  '苏州，江苏' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  '泉州，福建'",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id JOIN <mask> AS T3 ON T1.member_id  =  T3.member_id WHERE T3.<unk>  =  '苏州，江苏' INTERSECT SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id JOIN <mask> AS T3 ON T1.member_id  =  T3.member_id WHERE T3.<unk>  =  '泉州，福建'"
    },
    {
        "db_id": "game_1",
        "question": "“使命召唤”是什么类型的游戏？",
        "query": "SELECT gtype FROM Video_games WHERE gname  =  \"使命召唤\"",
        "mask_query": "SELECT gtype FROM Video_games WHERE gname  =  \"使命召唤\""
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "有哪些不同的参与者参加了活动？",
        "query": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "mask_query": "SELECT count(DISTINCT participant_id) FROM participants_in_Events"
    },
    {
        "db_id": "boat_1",
        "question": "没有订船的水手的id是什么？",
        "query": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "可以与至少3种酶相互作用的药物ID和商标名称是什么？",
        "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "mask_query": "SELECT T1.<unk> ,  T1.trade_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "orchestra",
        "question": "每家唱片公司管理多少支管弦乐队？",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "car_1",
        "question": "1980年生产了多少辆车？",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "mask_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "db_id": "music_1",
        "question": "所有“英文”歌曲的名字是什么？",
        "query": "SELECT song_name FROM song WHERE languages  =  \"英文\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"英文\""
    },
    {
        "db_id": "theme_gallery",
        "question": "返回展览次数最多的艺术家相对应的姓名和国家。",
        "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.name , T2.country FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "protein_institute",
        "question": "那里有多少栋建筑？",
        "query": "SELECT count(*) FROM building",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "farm",
        "question": "什么主持人所主持比赛的主题不是“外星人”？",
        "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  '外星人'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> !=  '外星人'"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "谁是第一个注册的学生？列出名字、中间名和姓氏。",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "用代码“香料”的产品类别描述是什么？",
        "query": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"香料\"",
        "mask_query": "SELECT <unk> FROM ref_product_categories WHERE <unk>  =  \"香料\""
    },
    {
        "db_id": "scholar",
        "question": "“兰吉特·贾拉”的发表的关于“LH”的论文叫什么名字？",
        "query": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"%兰吉特·贾拉%\" AND t5.keyphrasename  =  \"LH\";",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM paperkeyphrase AS t2 JOIN <mask> AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t2.paperid JOIN <mask> AS t3 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"%兰吉特·贾拉%\" AND t5.keyphrasename  =  \"LH\";"
    },
    {
        "db_id": "movie_2",
        "question": "有多少电影的分级不为空？",
        "query": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
        "mask_query": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating"
    },
    {
        "db_id": "storm_record",
        "question": "返回除“丹麦”以外的所有地区的名称。",
        "query": "SELECT region_name FROM region WHERE region_name != '丹麦'",
        "mask_query": "SELECT region_name FROM <mask> WHERE region_name != '丹麦'"
    },
    {
        "db_id": "browser_web",
        "question": "以市场份额降序的顺序列出浏览器的名称。",
        "query": "SELECT name FROM browser ORDER BY market_share DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "返回用两个或多个发票的订单ID和订单的详细信息。",
        "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >  2"
    },
    {
        "db_id": "college_1",
        "question": "按姓氏字母顺序排列，所有教授的姓名和办公地点是什么？",
        "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",
        "mask_query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"
    },
    {
        "db_id": "chinook_1",
        "question": "查找“广东”州所有客户信息。",
        "query": "SELECT * FROM CUSTOMER WHERE State  =  \"广东\"",
        "mask_query": "SELECT * FROM CUSTOMER WHERE <unk>  =  \"广东\""
    },
    {
        "db_id": "city_record",
        "question": "找出最近几年举办过一些活动的城市。这个城市的ID是什么？",
        "query": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "mask_query": "SELECT host_city FROM <mask> ORDER BY YEAR DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "question": "显示所有不住在美国的学生id。",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"USA\""
    },
    {
        "db_id": "club_leader",
        "question": "有多少会员？",
        "query": "SELECT count(*) FROM member",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "2012年ACL的“句法分析”论文",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"句法分析\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"句法分析\" AND t3.<unk>  =  2012 AND t4.venuename  =  \"acl\";"
    },
    {
        "db_id": "address_1",
        "question": "显示居住在宾夕法尼亚州的所有女性（性别为F）学生的id。",
        "query": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"PA\"  AND T2.sex  =  'F'"
    },
    {
        "db_id": "hr_1",
        "question": "显示在“北京”工作的员工的全名（名字和姓氏）和薪水。",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  '北京'",
        "mask_query": "SELECT first_name ,  last_name ,  salary FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id JOIN  <mask> AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  '北京'"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出旅游景点的名字，既可以通过“步行”，或者地址在 “石象路7号”。",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"石象路7号\" OR T2.How_to_Get_There  =  \"步行\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"石象路7号\" OR T2.<unk>  =  \"步行\""
    },
    {
        "db_id": "csu_1",
        "question": "找到在1958开办的所有的校园。",
        "query": "SELECT campus FROM campuses WHERE YEAR  =  1958",
        "mask_query": "SELECT campus FROM campuses WHERE YEAR  =  1958"
    },
    {
        "db_id": "voter_2",
        "question": "找出那些有班干部选票的学生的名字。",
        "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  T2.CLASS_Senator_VOTE"
    },
    {
        "db_id": "restaurants",
        "question": "“厦门”最好的“四川”餐厅是哪一个？",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"厦门\" AND t1.food_type  =  \"四川\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"厦门\" AND t1.food_type  =  \"四川\" );",
        "mask_query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN <mask> AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"厦门\" AND t1.food_type  =  \"四川\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"厦门\" AND t1.food_type  =  \"四川\" );"
    },
    {
        "db_id": "soccer_2",
        "question": "有多少大学有超过15000名学生？",
        "query": "SELECT count(*) FROM College WHERE enr  >  15000",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  15000"
    },
    {
        "db_id": "party_host",
        "question": "统计聚会的数目。",
        "query": "SELECT count(*) FROM party",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "e_learning",
        "question": "找到所提供课程的总数。",
        "query": "SELECT count(*) FROM COURSES",
        "mask_query": "SELECT count(*) FROM COURSES"
    },
    {
        "db_id": "riding_club",
        "question": "显示住在“池”或“皓”的球员的赞助商的名字。",
        "query": "SELECT Sponsor_name FROM player WHERE Residence  =  \"池\" OR Residence  =  \"皓\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"池\" OR <unk>  =  \"皓\""
    },
    {
        "db_id": "geo",
        "question": "哪些省的高点高于“贵州”？",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"贵州\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"贵州\" );"
    },
    {
        "db_id": "race_track",
        "question": "座位数高于平均水平的轨道的名称、位置和开放年份是什么？",
        "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
        "mask_query": "SELECT name ,  LOCATION ,  year_opened FROM <mask> WHERE seating  >  (SELECT avg(seating) FROM <mask>)"
    },
    {
        "db_id": "tracking_orders",
        "question": "请给我一张属于“兰兰”客户的ID和订单状态。",
        "query": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"兰兰\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"兰兰\""
    },
    {
        "db_id": "dorm_1",
        "question": "住在“男”宿舍里的学生总数是多少？",
        "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  '男'",
        "mask_query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  '男'"
    },
    {
        "db_id": "performance_attendance",
        "question": "显示具有至少两个演出的地点。",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT LOCATION FROM <mask> GROUP BY LOCATION HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "assets_maintenance",
        "question": "一个单独的故障日志最多需要多少工程师参与？列出数字和日志条目ID。",
        "query": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customer_complaints",
        "question": "统计客户的数量。",
        "query": "SELECT count(*) FROM customers",
        "mask_query": "SELECT count(*) FROM customers"
    },
    {
        "db_id": "musical",
        "question": "显示音乐剧的名称和在音乐剧中出现的演员的数目。",
        "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "machine_repair",
        "question": "显示技术人员的姓名和他们被分配修理的机器的数量。",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.<unk>"
    },
    {
        "db_id": "voter_2",
        "question": "找到22岁以上学生的名字。",
        "query": "SELECT Fname FROM STUDENT WHERE Age  >  22",
        "mask_query": "SELECT <unk> FROM STUDENT WHERE <unk>  >  22"
    },
    {
        "db_id": "scholar",
        "question": "使用了WebKB相关的论文",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";"
    },
    {
        "db_id": "car_road_race",
        "question": "参加两次或两次以上比赛的车手的姓名和年龄是多少？",
        "query": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "scholar",
        "question": "使用ImageNet的2014年的论文",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.<unk>  =  2014;"
    },
    {
        "db_id": "warehouse_1",
        "question": "选择位于芝加哥的所有箱子的代码。",
        "query": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
        "mask_query": "SELECT T1.code FROM boxes AS T1 JOIN <mask> AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'"
    },
    {
        "db_id": "tvshow",
        "question": "找到没有播放“黄伟明”导演的任何卡通片的电视频道的套餐选项。",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  '黄伟明')",
        "mask_query": "SELECT package_option FROM <mask> WHERE <unk> NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  '黄伟明')"
    },
    {
        "db_id": "device",
        "question": "最近一年开张的商店的店名是什么？",
        "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "baseball_1",
        "question": "“广州恒大队”在2000年球员的数量有多少？",
        "query": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = '广州恒大队' AND T1.year  =  2000",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  = '广州恒大队' AND T1.<unk>  =  2000"
    },
    {
        "db_id": "academic",
        "question": "返回文章“使数据库可用”的发行年份",
        "query": "SELECT YEAR FROM publication WHERE title  =  \"使数据库可用\";",
        "mask_query": "SELECT YEAR FROM <mask> WHERE <unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "imdb",
        "question": "列出“葛优”出演的“冯小刚”导演的所有电影",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"葛优\" AND t3.name  =  \"冯小刚\";",
        "mask_query": "SELECT t4.<unk> FROM CAST AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"葛优\" AND t3.<unk>  =  \"冯小刚\";"
    },
    {
        "db_id": "university_basketball",
        "question": "根据建校年排序，不同的学校和它们的昵称是什么？",
        "query": "SELECT school ,  nickname FROM university ORDER BY founded",
        "mask_query": "SELECT school ,  nickname FROM <mask> ORDER BY founded"
    },
    {
        "db_id": "store_1",
        "question": "前10名任职时间最长的员工的名字和姓氏是什么？",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
        "mask_query": "SELECT <unk> , <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 10;"
    },
    {
        "db_id": "twitter_1",
        "question": "列出拥有追随者的最多的前5个用户的名字。",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 5"
    },
    {
        "db_id": "college_1",
        "question": "这个班有多少学生上过由会计系的一位教授教的课程？",
        "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  '会计学'",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  '会计学'"
    },
    {
        "db_id": "voter_2",
        "question": "有财务员的选票的学生正在学习那些不同的主修课程？",
        "query": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "match_season",
        "question": "所有球队的名字是什么？",
        "query": "SELECT Name FROM Team",
        "mask_query": "SELECT <unk> FROM <unk>"
    },
    {
        "db_id": "formula_1",
        "question": "2017年以后在西班牙举行的比赛的名字是什么？",
        "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"西班牙\" AND T1.year > 2017",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.circuitid = T2.circuitid WHERE T2.<unk> = \"西班牙\" AND T1.<unk> > 2017"
    },
    {
        "db_id": "scholar",
        "question": "“句法分析”论文通常引用的论文",
        "query": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"句法分析\";",
        "mask_query": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"句法分析\";"
    },
    {
        "db_id": "candidate_poll",
        "question": "每个性别的平均体重和最小体重是多少？",
        "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",
        "mask_query": "SELECT avg(weight) ,  min(weight) ,  sex FROM <mask> GROUP BY sex"
    },
    {
        "db_id": "book_1",
        "question": "那些订购傲慢和偏见的客户叫什么名字？",
        "query": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
        "mask_query": "SELECT T3.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idOrder  =  T2.idOrder JOIN <mask> AS T3 ON T1.idClient  =  T3.idClient JOIN <mask> AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "car_1",
        "question": "汽车在1980年之前的平均马力是多少？",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "mask_query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"
    },
    {
        "db_id": "geo",
        "question": "哪个省的城市人口平均是最小的",
        "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY AVG ( <unk> ) LIMIT 1;"
    },
    {
        "db_id": "baseball_1",
        "question": "哪些省有超过2个公园？",
        "query": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  2;"
    },
    {
        "db_id": "tvshow",
        "question": "每个导演创作了多少动画片？",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "mask_query": "SELECT count(*) ,  <unk> FROM cartoon GROUP BY <unk>"
    },
    {
        "db_id": "college_1",
        "question": "不同学校的教授人数是多少？",
        "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
        "mask_query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code"
    },
    {
        "db_id": "department_store",
        "question": "算一下“大洋”连锁店的数量。",
        "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"大洋\"",
        "mask_query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"大洋\""
    },
    {
        "db_id": "scholar",
        "question": "“自然通讯”在2015年发表了多少数量论文？",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"自然通讯\";",
        "mask_query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.venueid  =  t1.venueid WHERE t1.<unk>  =  2015 AND t2.venuename  =  \"自然通讯\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "ID为2的文件的运输代理的名称是什么？",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
        "mask_query": "SELECT <mask>.<unk> FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = 2;"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "返回所有不同的拘留类型代码。",
        "query": "SELECT DISTINCT detention_type_code FROM Detention",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "gas_company",
        "question": "显示埃克森美孚公司的加油站的经理的名字。",
        "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  '石化'",
        "mask_query": "SELECT T3.manager_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.company_id  =  T2.company_id JOIN <mask> AS T3 ON T1.station_id  =  T3.station_id WHERE T2.<mask>  =  '石化'"
    },
    {
        "db_id": "online_exams",
        "question": "请显示学生最不常见的评估。",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "game_1",
        "question": "显示所有导师是1121号的学生的ID 。",
        "query": "SELECT StuID FROM Student WHERE Advisor  =  1121",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  1121"
    },
    {
        "db_id": "shop_membership",
        "question": "6级成员的总购买量是多少？",
        "query": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"
    },
    {
        "db_id": "pets_1",
        "question": "对于有宠物的学生，每个学生有多少宠物？",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "mask_query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
    },
    {
        "db_id": "network_2",
        "question": "每个性别有多少人不足40岁？",
        "query": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> WHERE <unk>  <  40 GROUP BY <unk>"
    },
    {
        "db_id": "geo",
        "question": "有河的省中最大的中国城市是什么？",
        "query": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse  =  t1.state_name );",
        "mask_query": "SELECT DISTINCT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  ( SELECT MAX ( t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> );"
    },
    {
        "db_id": "restaurants",
        "question": "在“深圳”“福田”的一家吃“东北”菜的不错的餐馆",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t2.street_name  =  \"福田\" AND t1.food_type  =  \"东北\" AND t1.rating  >  2.5;",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t2.street_name  =  \"福田\" AND t1.food_type  =  \"东北\" AND t1.rating  >  2.5;"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "ID为0的文档和ID为9的流程有多少员工？",
        "query": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9",
        "mask_query": "SELECT count(*) FROM Staff_in_processes WHERE <unk>  =  0 AND <unk>  =  9"
    },
    {
        "db_id": "department_store",
        "question": "员工人数最少的部门的id是什么？",
        "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> FROM staff_department_assignments GROUP BY <unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "question": "找到在支票账户上的总储蓄余额。",
        "query": "SELECT sum(balance) FROM checking",
        "mask_query": "SELECT sum(<unk>) FROM checking"
    },
    {
        "db_id": "decoration_competition",
        "question": "显示成员间最常见的国家。",
        "query": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "inn_1",
        "question": "返回房间名为“北欧风格”的装饰。",
        "query": "SELECT decor FROM Rooms WHERE roomName  =  \"北欧风格\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"北欧风格\";"
    },
    {
        "db_id": "customer_complaints",
        "question": "那些从未提出投诉的顾客的电子邮件和电话号码是什么？",
        "query": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers WHERE <unk> NOT IN (SELECT <unk> FROM complaints)"
    },
    {
        "db_id": "manufactory_1",
        "question": "已列出的不同的城市有哪些？",
        "query": "SELECT DISTINCT headquarter FROM manufacturers",
        "mask_query": "SELECT DISTINCT headquarter FROM manufacturers"
    },
    {
        "db_id": "dorm_1",
        "question": "找出宿舍的数量和每个性别的总容量。",
        "query": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "mask_query": "SELECT count(*) ,  sum(<unk>) ,  <unk> FROM dorm GROUP BY <unk>"
    },
    {
        "db_id": "e_learning",
        "question": "返回姓氏为“睿”的学生的登录名。",
        "query": "SELECT login_name FROM Students WHERE family_name  =  \"睿\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"睿\""
    },
    {
        "db_id": "bbc_channels",
        "question": "哪个导演负责最多的节目？",
        "query": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_press",
        "question": "记录中哪些作者没有出版过任何书籍？给出他们的名字。",
        "query": "SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)",
        "mask_query": "SELECT name ,  age FROM <mask> WHERE author_id NOT IN (SELECT author_id FROM <mask>)"
    },
    {
        "db_id": "small_bank_1",
        "question": "不属于“小智”这个名字的人的储蓄账户的总储蓄余额是多少？",
        "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != '小智'",
        "mask_query": "SELECT sum(T2.<unk>) FROM accounts AS T1 JOIN savings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> != '小智'"
    },
    {
        "db_id": "tv_shows",
        "question": "列出三个以上城市频道共享的所属单位。",
        "query": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  3"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "每个访问者的详细情况是什么？",
        "query": "SELECT Tourist_Details FROM VISITORS",
        "mask_query": "SELECT <unk> FROM VISITORS"
    },
    {
        "db_id": "store_product",
        "question": "查找每个城市的商店数量。",
        "query": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
        "mask_query": "SELECT t3.headquartered_city ,  count(*) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id JOIN <mask> AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city"
    },
    {
        "db_id": "planet_1",
        "question": "列出火星号的所有装运标识。",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> WHERE T2.<unk>  =  \"Mars\";"
    },
    {
        "db_id": "boat_1",
        "question": "有多少水手？",
        "query": "SELECT COUNT(*) FROM Sailors",
        "mask_query": "SELECT COUNT(*) FROM <mask>"
    },
    {
        "db_id": "school_finance",
        "question": "列出所有捐赠金额小于或等于10的学校的名称。",
        "query": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "mask_query": "SELECT T2.school_name FROM <mask> AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.<unk>)  <=  10"
    },
    {
        "db_id": "hr_1",
        "question": "所有工资金额高于“工程师”职称的员工工资的雇员的员工ID、全名和工作ID是什么？",
        "query": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  '工程师' )",
        "mask_query": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM <mask> WHERE salary  >  ( SELECT max(salary) FROM <mask> WHERE job_id  =  '工程师' )"
    },
    {
        "db_id": "pilot_1",
        "question": "32岁的飞行员且名字是琼斯的飞行员驾驶什么飞机？",
        "query": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
        "mask_query": "SELECT <unk> FROM pilotskills WHERE <unk>  =  'Jones'  AND <unk>  =  32"
    },
    {
        "db_id": "department_store",
        "question": "在“2016”年被指派的工作人员的姓名和性别是什么？",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE \"2016\""
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "有2个或多个相应文档的项目ID是什么？",
        "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
        "mask_query": "SELECT project_id FROM <mask> GROUP BY project_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "wta_1",
        "question": "找出巡回比赛次数最多的球员的名字和国家代码。",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "driving_school",
        "question": "员工最多住在哪个城市，有多少人住在那里？",
        "query": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "warehouse_1",
        "question": "按照存储物排序的所有不同类型的存储物。",
        "query": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
        "mask_query": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "有多少种酶？",
        "query": "SELECT count(*) FROM enzyme",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "sakila_1",
        "question": "有多少商店？",
        "query": "SELECT count(*) FROM store",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "geo",
        "question": "哪些省不与“四川”接壤？",
        "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"四川\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" );"
    },
    {
        "db_id": "network_1",
        "question": "哪一个年级有4个或更多的高中生？",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  4"
    },
    {
        "db_id": "orchestra",
        "question": "请显示指挥过2008年后成立的管弦乐队的指挥家姓名。",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  >  2008"
    },
    {
        "db_id": "loan_1",
        "question": "计算不同帐户类型的数量。",
        "query": "SELECT count(DISTINCT acc_type) FROM customer",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "restaurants",
        "question": "我们在哪里可以找到在“鼓浪屿”“龙头路”上的餐厅？",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"鼓浪屿\" AND t2.street_name  =  \"龙头路\";",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"鼓浪屿\" AND t2.street_name  =  \"龙头路\";"
    },
    {
        "db_id": "storm_record",
        "question": "显示至少有两个风暴的区域名称。",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.region_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "dorm_1",
        "question": "找出宿舍的不同性别的数量。",
        "query": "SELECT count(DISTINCT gender) FROM dorm",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM dorm"
    },
    {
        "db_id": "bike_1",
        "question": "有超过十辆自行车，而且不在'“长沙”‘的所有车站都叫什么名字？",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"长沙\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING avg(<unk>)  >  10 EXCEPT SELECT <unk> FROM <mask> WHERE <unk>  =  \"长沙\""
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "对所有曾经发生的拘留有什么不同的描述？",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "mask_query": "SELECT distinct(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "world_1",
        "question": "在“亚洲”预期寿命最短的国家是什么？",
        "query": "SELECT Name FROM country WHERE Continent  =  \"亚洲\" ORDER BY LifeExpectancy LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"亚洲\" ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "tracking_orders",
        "question": "订单数量最多的客户叫什么名字？",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scientist_1",
        "question": "列出比所有项目的平均工作时间更长的所有项目的名称。",
        "query": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)",
        "mask_query": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)"
    },
    {
        "db_id": "book_press",
        "question": "找出年利润超过150亿或月利润超过10亿的出版社名称。",
        "query": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
        "mask_query": "SELECT name FROM <mask> WHERE <unk>  >  15 OR <unk>  >  1"
    },
    {
        "db_id": "academic",
        "question": "返回那些与“李政道”和“杨振宁”合作的作者。",
        "query": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"李政道\" AND t3.name  =  \"杨振宁\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t7 ON t4.<unk>  =  t7.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t7.<unk> JOIN <mask> AS t6 ON t6.<unk>  =  t7.<unk> JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t6.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\" AND t3.<unk>  =  \"杨振宁\";"
    },
    {
        "db_id": "ship_mission",
        "question": "显示“美国”国籍的船只执行任务的不同命运",
        "query": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"美国\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"美国\""
    },
    {
        "db_id": "bakery_1",
        "question": "面包店总共销售了超过100美元商品的日期是什么？",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "mask_query": "SELECT T3.date FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.item JOIN <mask> AS T3 ON T2.receipt  =  T3.<unk> GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "flight_1",
        "question": "从“上海”起飞的所有航班的平均距离和价格是多少？",
        "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"上海\"",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) FROM Flight WHERE <unk>  =  \"上海\""
    },
    {
        "db_id": "gymnast",
        "question": "每个家乡有多少体操运动员？",
        "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "activity_1",
        "question": "哪一栋楼的教员最多？",
        "query": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT building FROM <mask> GROUP BY building ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "question": "女宾(性别代码为“女”)预订公寓的开始日期和结束日期是什么？",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"女\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"女\""
    },
    {
        "db_id": "e_commerce",
        "question": "对于每个订单，其ID、日期和支付总额是多少？",
        "query": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  sum(T3.<unk>) FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "small_bank_1",
        "question": "查找支票余额低于最大支票余额的帐户的名称和id。",
        "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  (SELECT max(<unk>) FROM checking)"
    },
    {
        "db_id": "college_2",
        "question": "给出按名称和学分顺序排列的所有课程的名称。",
        "query": "SELECT title FROM course ORDER BY title ,  credits",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ,  <unk>"
    },
    {
        "db_id": "election",
        "question": "显示参选第1区的代表。",
        "query": "SELECT Delegate FROM election WHERE District  =  1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  1"
    },
    {
        "db_id": "entrepreneur",
        "question": "企业家的名字是什么？",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "soccer_2",
        "question": "有多少学生进入大学？",
        "query": "SELECT sum(enr) FROM College",
        "mask_query": "SELECT sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回有200个以上引用的论文。",
        "query": "SELECT title FROM publication WHERE citation_num  >  200;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  200;"
    },
    {
        "db_id": "loan_1",
        "question": "查找信用评分低于所有客户平均信用评分的客户的名字。",
        "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  (SELECT avg(<unk>) FROM <mask>)"
    },
    {
        "db_id": "flight_2",
        "question": "哪些航空公司有目的机场是“浦东”的航班？",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"浦东\"",
        "mask_query": "SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"浦东\""
    },
    {
        "db_id": "party_host",
        "question": "按照主持人年龄的升序显示聚会的位置和聚会主持人的名称。",
        "query": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN HOST AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T2.<unk>"
    },
    {
        "db_id": "scholar",
        "question": "“佩德罗·多明格斯”在那一年发表了一篇论文？",
        "query": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"佩德罗·多明格斯\" GROUP BY t3.year;",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"佩德罗·多明格斯\" GROUP BY t3.<unk>;"
    },
    {
        "db_id": "city_record",
        "question": "哪些城市2月份的温度比6月份高，或者曾经是主办城市？",
        "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "mask_query": "SELECT T1.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id  =  T2.city_id WHERE T2.<unk>  >  T2.<unk> UNION SELECT T3.<mask> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.city_id  =  T4.host_city"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "列出所有卖家值为1的卖家用户的名字、中间名姓氏和登录名。",
        "query": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  1;"
    },
    {
        "db_id": "tracking_orders",
        "question": "对于每个产品，显示它的名称和它被订购的次数。",
        "query": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "mask_query": "SELECT T3.<unk> ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.<unk> = T2.<unk> AND T2.<unk> = T3.<unk> GROUP BY T3.<unk>"
    },
    {
        "db_id": "student_1",
        "question": "教5年级的老师的姓氏是什么？",
        "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "mask_query": "SELECT DISTINCT T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"
    },
    {
        "db_id": "activity_1",
        "question": "我们每个教员等级有多少教员？",
        "query": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank",
        "mask_query": "SELECT rank ,  count(*) FROM <mask> GROUP BY rank"
    },
    {
        "db_id": "e_learning",
        "question": "最多驻车两门课的学生的id和中间名是什么？",
        "query": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  <=  2"
    },
    {
        "db_id": "tv_shows",
        "question": "显示与任何城市频道都无关的不同无线电发射机。",
        "query": "SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "planet_1",
        "question": "哪些员工在火星号上没有许可证？列出员工姓名。",
        "query": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T1.<mask> = T3.<unk> WHERE T3.<unk> = \"Mars\";"
    },
    {
        "db_id": "product_catalog",
        "question": "查找长度小于3或高度大于5的产品的名称。",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "mask_query": "SELECT <unk> FROM catalog_contents WHERE LENGTH  <  3 OR <unk>  >  5"
    },
    {
        "db_id": "debate",
        "question": "显示出在赞成一面的对方的姓名、辩论的日期和地点。",
        "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "tvshow",
        "question": "按照收视率排序的所有剧集是什么？",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY rating"
    },
    {
        "db_id": "video_game",
        "question": "请列出在亚洲或美国有区域市场有平台的游戏的名称。",
        "query": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Asia\" OR T2.<unk>  =  \"USA\""
    },
    {
        "db_id": "baseball_1",
        "question": "列出2005年和2007年从球队“北京人和”得到薪水球员的名字和姓氏。",
        "query": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = '北京人和' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = '北京人和'",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T3.<unk> = T1.<unk> WHERE T1.<unk> = 2005 AND T3.<unk> = '北京人和' INTERSECT SELECT T2.<unk> , T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T3.<unk> = T1.<unk> WHERE T1.<unk> = 2007 AND T3.<unk> = '北京人和'"
    },
    {
        "db_id": "conference",
        "question": "显示在某个会议中同时担任过发言人和赞助商的所有员工的姓名。",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.<unk>  =  'Speaker' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.<unk>  =  'Sponsor'"
    },
    {
        "db_id": "music_1",
        "question": "制作歌曲最多的三位艺术家的名字是什么？他们制作了多少作品？",
        "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "car_1",
        "question": "对于不同数量的气缸的车，最大加速度是多少？",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "mask_query": "SELECT max(<unk>) ,  <unk> FROM CARS_DATA GROUP BY <unk>;"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "计算所有日历条目的数量。",
        "query": "SELECT count(*) FROM Ref_calendar",
        "mask_query": "SELECT count(*) FROM Ref_calendar"
    },
    {
        "db_id": "activity_1",
        "question": "显示男女“助理教授”的数量。",
        "query": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"助理教授\" GROUP BY sex",
        "mask_query": "SELECT sex ,  count(*) FROM <mask> WHERE rank  =  \"助理教授\" GROUP BY sex"
    },
    {
        "db_id": "geo",
        "question": "哪个城市的人口最少？",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "movie_1",
        "question": "对于所有导演不止一部电影的导演，他们导演的不同电影名称以及他们的名字都是什么？",
        "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> != T2.<unk> ORDER BY T1.<unk> ,  T1.<unk>"
    },
    {
        "db_id": "warehouse_1",
        "question": "箱子平均价值大于150的仓库的仓库代码和箱子的平均仓储价值是多少？",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
        "mask_query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150"
    },
    {
        "db_id": "scholar",
        "question": "“克里斯托弗·曼宁”的论文发表数？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"克里斯托弗·曼宁\";",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"克里斯托弗·曼宁\";"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "有房产照片的业主的用户ID是多少，每个人有多少照片？",
        "query": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>;"
    },
    {
        "db_id": "customer_complaints",
        "question": "哪种投诉状态在文件上有超过3条记录？",
        "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3",
        "mask_query": "SELECT <unk> FROM complaints GROUP BY <unk> HAVING count(*)  >  3"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "最长时间处于活动状态的客户联系渠道的信道代码和联系号码是什么？",
        "query": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "mask_query": "SELECT <unk> ,  <unk> FROM customer_contact_channels WHERE <unk> - <unk>  =  (SELECT <unk> - <unk> FROM customer_contact_channels ORDER BY (<unk> - <unk>) DESC LIMIT 1)"
    },
    {
        "db_id": "country_language",
        "question": "最常用的三种官方语言的名称是什么？",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "游客“维华”和“慧兰”参观哪些景点？告诉我景点的名字。",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"维华\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"慧兰\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.<unk>  =  T3.<unk> AND T2.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"维华\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.<unk>  =  T3.<unk> AND T2.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"慧兰\""
    },
    {
        "db_id": "movie_1",
        "question": "给一部电影打过3星以上的评论人叫什么名字？",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  3"
    },
    {
        "db_id": "workshop_paper",
        "question": "哪些提交的作者来自“浙江”大学或“南京”大学？",
        "query": "SELECT Author FROM submission WHERE College  =  \"浙江\" OR College  =  \"南京\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"浙江\" OR <unk>  =  \"南京\""
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示使用“信用卡”付款方式并有2个以上订单的客户的姓名。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  '信用卡' GROUP BY T1.customer_id HAVING count(*)  >  2",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '信用卡' GROUP BY T1.<unk> HAVING count(*)  >  2"
    },
    {
        "db_id": "restaurants",
        "question": "那些餐馆“淮南”菜好吃？",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"淮南\" AND t1.rating  >  2.5;",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"淮南\" AND t1.rating  >  2.5;"
    },
    {
        "db_id": "scientist_1",
        "question": "列出所有按字母顺序排序的科学家的名字。",
        "query": "SELECT name FROM scientists ORDER BY name",
        "mask_query": "SELECT name FROM scientists ORDER BY name"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "文档类型代码是“BK”的所有文档的名称和ID是什么？",
        "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"",
        "mask_query": "SELECT document_name ,  document_id FROM <mask> WHERE document_type_code  =  \"BK\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "有多少不同的学生被拘留？",
        "query": "SELECT count(DISTINCT student_id) FROM Students_in_Detention",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "restaurant_bills",
        "question": "找到会员级别最高的客户并返回其信用。",
        "query": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "shop_membership",
        "question": "列出没有任何注册会员的分支机构名称和城市。",
        "query": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "mask_query": "SELECT name ,  city FROM <mask> WHERE branch_id NOT IN (SELECT branch_id FROM <mask>)"
    },
    {
        "db_id": "body_builder",
        "question": "总分最高的健美运动员的挺举成绩是多少？",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "第一“深度学习”相关论文",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"深度学习\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"深度学习\" GROUP BY t3.<unk> ORDER BY t3.<unk> ASC;"
    },
    {
        "db_id": "culture_company",
        "question": "显示所有在1989年后没有出版书籍的出版商。",
        "query": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989",
        "mask_query": "SELECT publisher FROM <mask> EXCEPT SELECT publisher FROM <mask> WHERE YEAR  =  1989"
    },
    {
        "db_id": "geo",
        "question": "“黄河”经过哪些省？",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"黄河\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"黄河\";"
    },
    {
        "db_id": "e_commerce",
        "question": "列出至少有两种付款方式的客户下订单的订单日期。",
        "query": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2 )"
    },
    {
        "db_id": "wine_1",
        "question": "每个葡萄有多少葡萄酒？",
        "query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape",
        "mask_query": "SELECT count(*) ,  <unk> FROM WINE GROUP BY <unk>"
    },
    {
        "db_id": "scholar",
        "question": "与“诺亚·史密斯”撰写论文的作者",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"诺亚·史密斯\";",
        "mask_query": "SELECT DISTINCT t1.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.authorid  =  t2.authorid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"诺亚·史密斯\";"
    },
    {
        "db_id": "music_2",
        "question": "有多少首歌用过乐器“鼓”？",
        "query": "SELECT count(*) FROM instruments WHERE instrument  =  \"鼓\"",
        "mask_query": "SELECT count(*) FROM instruments WHERE instrument  =  \"鼓\""
    },
    {
        "db_id": "match_season",
        "question": "为“重庆力帆”队效力的球员有哪些？每人效力多少年？",
        "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"重庆力帆\"",
        "mask_query": "SELECT T1.<unk> , T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"重庆力帆\""
    },
    {
        "db_id": "restaurants",
        "question": "“南山”中的哪家餐馆能吃到可口的“东北”菜？",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"南山\" AND t1.food_type  =  \"东北\" AND t1.rating  >  2.5;",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"南山\" AND t1.food_type  =  \"东北\" AND t1.rating  >  2.5;"
    },
    {
        "db_id": "college_3",
        "question": "按年龄递减顺序查找学生的名字。",
        "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
        "mask_query": "SELECT <unk> FROM STUDENT ORDER BY <unk> DESC"
    },
    {
        "db_id": "scholar",
        "question": "列出关于“机器网络一次学习”方面的所有学术论文",
        "query": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"机器网络一次学习\";",
        "mask_query": "SELECT DISTINCT paperid FROM <mask> WHERE <unk>  =  \"机器网络一次学习\";"
    },
    {
        "db_id": "music_1",
        "question": "找出体裁是“现代”的或语言是“英文”的歌曲的名字。",
        "query": "SELECT song_name FROM song WHERE genre_is  =  \"现代\" OR languages  =  \"英文\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"现代\" OR <unk>  =  \"英文\""
    },
    {
        "db_id": "scholar",
        "question": "在2016中“卷积神经网络”方面写了多少篇论文？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"卷积神经网络\" AND t3.year  =  2016;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"卷积神经网络\" AND t3.<unk>  =  2016;"
    },
    {
        "db_id": "region_building",
        "question": "将建筑物按层数降序排列，并返回其竣工年份。",
        "query": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "academic",
        "question": "返回2000年以前由“李政道”和“杨振宁”撰写的论文。",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"李政道\" AND t1.name  =  \"杨振宁\" AND t5.year  <  2000;",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<unk>  =  \"杨振宁\" AND t5.<unk>  <  2000;"
    },
    {
        "db_id": "election",
        "question": "对于每个政党，返回政党的名字和对应政党的代表人数。",
        "query": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "按照姓氏的字母顺序查找老师的姓和名。",
        "query": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "pilot_1",
        "question": "驾驶过单翼飞机而不是B-52轰炸机的飞行员叫什么名字？",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "mask_query": "SELECT <unk> FROM pilotskills WHERE <unk>  =  'Piper Cub' EXCEPT SELECT <unk> FROM pilotskills WHERE <unk>  =  'B-52 Bomber'"
    },
    {
        "db_id": "farm",
        "question": "没有“乡村”状态的城市的人口普查排名是多少？",
        "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"乡村\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> !=  \"乡村\""
    },
    {
        "db_id": "icfp_1",
        "question": "找到作者中有“曹子建”的论文。",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"曹\" AND t1.lname  =  \"子建\"",
        "mask_query": "SELECT t3.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.<unk>  =  \"曹\" AND t1.<unk>  =  \"子建\""
    },
    {
        "db_id": "scholar",
        "question": "“桑杰夫·阿罗拉”新近发表的论文",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"桑杰夫·阿罗拉\" ORDER BY t3.year DESC;",
        "mask_query": "SELECT DISTINCT t1.keyphrasename  ,  t3.<unk> FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"桑杰夫·阿罗拉\" ORDER BY t3.<unk> DESC;"
    },
    {
        "db_id": "voter_2",
        "question": "找出“秋季”选举周期中有秘书投票的学生的不同年龄。",
        "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"秋季\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"秋季\""
    },
    {
        "db_id": "machine_repair",
        "question": "列出不属于“上海上港”的技术人员的姓名。",
        "query": "SELECT Name FROM technician WHERE Team != \"上海上港\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"上海上港\""
    },
    {
        "db_id": "chinook_1",
        "question": "显示包含单价大于1的曲目的专辑的名称和ID。",
        "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "mask_query": "SELECT T1.<unk> ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  1 GROUP BY T2.AlbumID"
    },
    {
        "db_id": "college_1",
        "question": "会计系所属的学校代码是什么？",
        "query": "SELECT school_code FROM department WHERE dept_name  =  \"会计学\"",
        "mask_query": "SELECT school_code FROM department WHERE dept_name  =  \"会计学\""
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”发表论文中的关键词个数。",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"北京理工大学\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<mask> ) FROM <mask> AS t6 JOIN <mask> AS t2 ON t6.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t3 ON t5.<unk>  =  t3.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t6.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "soccer_3",
        "question": "按球员的平均收入降序显示所属俱乐部名称。",
        "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY avg(T2.<unk>) DESC"
    },
    {
        "db_id": "warehouse_1",
        "question": "有多少不同的存储物存储在盒子里？",
        "query": "SELECT count(DISTINCT CONTENTS) FROM boxes",
        "mask_query": "SELECT count(DISTINCT CONTENTS) FROM boxes"
    },
    {
        "db_id": "flight_1",
        "question": "显示所有飞机的名称和距离。",
        "query": "SELECT name ,  distance FROM Aircraft",
        "mask_query": "SELECT <unk> ,  <unk> FROM Aircraft"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "不同产品的名称是什么，以及订购了每种产品的客户数量。",
        "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM Order_items AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示份额数大于100且数量大于1000的交易日期。",
        "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000",
        "mask_query": "SELECT <unk> FROM TRANSACTIONS WHERE <unk>  >  100 OR <unk>  >  1000"
    },
    {
        "db_id": "icfp_1",
        "question": "按字母顺序检索所有作者的姓氏。",
        "query": "SELECT lname FROM authors ORDER BY lname",
        "mask_query": "SELECT <unk> FROM authors ORDER BY <unk>"
    },
    {
        "db_id": "network_1",
        "question": "找出所有有朋友的学生的平均年级。",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE id IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id)"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示国家“加拿大”的位置代码。",
        "query": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"加拿大\"",
        "mask_query": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"加拿大\""
    },
    {
        "db_id": "university_rank",
        "question": "奥古斯塔纳学院所有专业的级别和名称是什么？",
        "query": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "mask_query": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'"
    },
    {
        "db_id": "driving_school",
        "question": "对于每一个客户状态代码，有多少客户被这样分类？",
        "query": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",
        "mask_query": "SELECT <unk> , count(*) FROM <mask> GROUP BY <unk>;"
    },
    {
        "db_id": "aircraft",
        "question": "列出被评为获奖飞机次数最多的飞机的名称。",
        "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN MATCH AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "question": "级别为“8”的目录条目名称是什么？",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"8\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "按数目按降序排序，显示每个性别代码和对应的客人的数目。",
        "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示文件“罗超的简历”的位置名称。",
        "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"罗超的简历\"",
        "mask_query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"罗超的简历\""
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "每种颜色的描述是什么？",
        "query": "SELECT color_description FROM ref_colors",
        "mask_query": "SELECT <unk> FROM ref_colors"
    },
    {
        "db_id": "student_1",
        "question": "找出在103教师学习的年纪。",
        "query": "SELECT DISTINCT grade FROM list WHERE classroom  =  103",
        "mask_query": "SELECT DISTINCT grade FROM <mask> WHERE classroom  =  103"
    },
    {
        "db_id": "geo",
        "question": "“四川”有多少城市",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"四川\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  \"四川\";"
    },
    {
        "db_id": "yelp",
        "question": "找出“东莞”的所有“啤酒厂”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"东莞\" AND t2.category_name  =  \"啤酒厂\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"东莞\" AND t2.<unk>  =  \"啤酒厂\";"
    },
    {
        "db_id": "university_basketball",
        "question": "列出篮球比赛中所有球队的名字，按主场得分的顺序递减排列。",
        "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "mask_query": "SELECT team_name FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "我们有多少份文件？",
        "query": "SELECT count(*) FROM Documents",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "candidate_poll",
        "question": "统计每一个体重超过85的人的数量。",
        "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",
        "mask_query": "SELECT count(*) ,  sex FROM <mask> WHERE weight  >  85 GROUP BY sex"
    },
    {
        "db_id": "architecture",
        "question": "按其姓名的字典顺序列出所有“男”性架构师的姓名、国籍和ID。",
        "query": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  \"男\" ORDER BY name",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"男\" ORDER BY <unk>"
    },
    {
        "db_id": "region_building",
        "question": "哪个地区的建筑数量最多？给我看看这个地区的首府。",
        "query": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.capital FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "question": "列出不是企业家的人的名字。",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "pilot_1",
        "question": "那个名叫史密斯的飞行员有多少架飞机？",
        "query": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
        "mask_query": "SELECT count(<unk>) FROM pilotskills WHERE <unk>  =  'Smith'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "名为“2000最佳”的文档子集的详细信息是什么？",
        "query": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"Best for 2000\";"
    },
    {
        "db_id": "vehicle_driver",
        "question": "返回所有车辆的平均最高速度。",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "mask_query": "SELECT avg(top_speed) FROM <mask>"
    },
    {
        "db_id": "orchestra",
        "question": "按工作年限降序排列的指挥家的名字是什么？",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "news_report",
        "question": "显示报道不止一个事件的记者的名字。",
        "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> GROUP BY T3.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "列出具有文件描述为“常规”和“初始申请”的补助金的开始日期。",
        "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  '常规' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  '初始申请'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '常规' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '初始申请'"
    },
    {
        "db_id": "sports_competition",
        "question": "列出最常见的比赛类型。",
        "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“艾伦·埃齐奥尼”写了什么话题？",
        "query": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"艾伦·埃齐奥尼\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM <mask> AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"艾伦·埃齐奥尼\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;"
    },
    {
        "db_id": "bakery_1",
        "question": "给我那些价格至少和蛋挞平均价格一样的蛋糕的ID。",
        "query": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
        "mask_query": "SELECT id FROM <mask> WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM <mask> WHERE food  =  \"Tart\")"
    },
    {
        "db_id": "scholar",
        "question": "“彼得·梅尔滕斯”和“迪娜·巴比安”在一起写什么论文？",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"彼得·梅尔滕斯\" AND t1.authorname  =  \"迪娜·巴比安\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.authorid  =  t2.authorid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"彼得·梅尔滕斯\" AND t1.authorname  =  \"迪娜·巴比安\";"
    },
    {
        "db_id": "planet_1",
        "question": "哪个星球的货物最多？列出行星名称。",
        "query": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> GROUP BY T1.<mask> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "bakery_1",
        "question": "找出收据最多的三个日期。",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT date FROM <mask> GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "music_2",
        "question": "\"冰雨\"这首歌使用了什么乐器？",
        "query": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"冰雨\"",
        "mask_query": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"冰雨\""
    },
    {
        "db_id": "singer",
        "question": "显示歌手的名字和他们的歌曲的总销售。",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "mask_query": "SELECT T1.<unk> ,  sum(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "car_1",
        "question": "所有的制造商和汽车型号是什么？",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "mask_query": "SELECT <unk> ,  <unk> FROM MODEL_LIST;"
    },
    {
        "db_id": "flight_2",
        "question": "“南方航空”航空公司的航班号是多少？",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"南方航空\"",
        "mask_query": "SELECT T1.<unk> FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.<unk>  =  T1.<unk> WHERE T2.<unk>  =  \"南方航空\""
    },
    {
        "db_id": "dorm_1",
        "question": "仅为“女性”使用的宿舍的名字是什么？",
        "query": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
        "mask_query": "SELECT <unk> FROM dorm WHERE <unk>  =  'F'"
    },
    {
        "db_id": "network_2",
        "question": "谁是最年轻的“男”？",
        "query": "SELECT name FROM Person WHERE gender  =  '男' AND age  =  (SELECT min(age) FROM person WHERE gender  =  '男' )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '男' AND <unk>  =  (SELECT min(<unk>) FROM person WHERE <unk>  =  '男' )"
    },
    {
        "db_id": "car_road_race",
        "question": "按驾驶者年龄升序排序的驾驶者的制造商是谁？",
        "query": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
        "mask_query": "SELECT DISTINCT CONSTRUCTOR FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "entertainment_awards",
        "question": "观众人数最多的艺术节地点是什么？",
        "query": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
        "mask_query": "SELECT LOCATION FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "news_report",
        "question": "显示既拥有工作超过10年的新闻工作者，又拥有工作不到3年的新闻工作者的国家。",
        "query": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  10 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  3"
    },
    {
        "db_id": "e_commerce",
        "question": "有多少种产品没有被卖出？",
        "query": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM Order_items )"
    },
    {
        "db_id": "formula_1",
        "question": "2009到2011年间所有比赛的名字是什么？",
        "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR BETWEEN 2009 AND 2011"
    },
    {
        "db_id": "program_share",
        "question": "按启动时间排序列出所有的节目名称。",
        "query": "SELECT name FROM program ORDER BY launch",
        "mask_query": "SELECT name FROM <mask> ORDER BY launch"
    },
    {
        "db_id": "student_1",
        "question": "找出由“孙“”克”教授的所有学生的名字和姓氏。",
        "query": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"孙\" AND T2.lastname  =  \"克\"",
        "mask_query": "SELECT T1.firstname ,  T1.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"孙\" AND T2.lastname  =  \"克\""
    },
    {
        "db_id": "scholar",
        "question": "ACL中的论文使用最多的数据集是什么？",
        "query": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
        "mask_query": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";"
    },
    {
        "db_id": "inn_1",
        "question": "有传统类型装饰的所有房间的床的类型和名称是什么？",
        "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"传统\";",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> = \"传统\";"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "显示所有发票的最小、平均、最大订单数量。",
        "query": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "mask_query": "SELECT min(<unk>) ,  avg(<unk>) ,  max(<unk>) FROM INVOICES"
    },
    {
        "db_id": "geo",
        "question": "流经省内最主要城市的最长的河是那条",
        "query": "SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  >  150000 GROUP BY <unk> ORDER BY COUNT ( <unk> ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;"
    },
    {
        "db_id": "restaurants",
        "question": "“苏州”有多少家吃“淮南”菜的餐厅？",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"苏州\" AND t1.food_type  =  \"淮南\";",
        "mask_query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"苏州\" AND t1.food_type  =  \"淮南\";"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "最后一份成绩单是什么时候发布的？",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "产品特性的不同名称是什么？",
        "query": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
        "mask_query": "SELECT DISTINCT <unk> FROM CHARACTERISTICS"
    },
    {
        "db_id": "city_record",
        "question": "在二月，哪个城市的气温最高？",
        "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "mask_query": "SELECT T1.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "question": "显示尚未下过订单的客户的客户名称。",
        "query": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT T1.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "aan_1",
        "question": "每年每个地点发表多少篇论文？",
        "query": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
        "mask_query": "SELECT count(*) ,  <unk> ,  YEAR FROM <mask> GROUP BY <unk> ,  YEAR"
    },
    {
        "db_id": "imdb",
        "question": "找出被分类为最多数量的流派的电影",
        "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> GROUP BY t3.<unk> ORDER BY COUNT ( DISTINCT t2.<mask>  ) DESC LIMIT 1;"
    },
    {
        "db_id": "e_government",
        "question": "电子邮件“enrico09@example.com”的支付方式码和组织电话是什么？",
        "query": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM parties WHERE <unk>  =  \"enrico09@example.com\""
    },
    {
        "db_id": "academic",
        "question": "把包含关键字“关系型数据库”的论文数量最多的会议返回。",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"关系型数据库\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"关系型数据库\" GROUP BY t2.<unk> ORDER BY COUNT ( DISTINCT t3.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "college_1",
        "question": "找出学生人数最多的系的名称和地址。",
        "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "baseball_1",
        "question": "在1885年的季后赛中，有多少场比赛是打成平局的（也就是说，“平局”的值是“1”）？",
        "query": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;",
        "mask_query": "SELECT count(*) FROM <mask> WHERE YEAR  =  1885 AND <unk>  =  1;"
    },
    {
        "db_id": "e_government",
        "question": "统计“河北”省的城市数量。",
        "query": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"河北\"",
        "mask_query": "SELECT count(*) FROM addresses WHERE <unk>  =  \"河北\""
    },
    {
        "db_id": "soccer_2",
        "question": "平均入学人数是多少？",
        "query": "SELECT avg(enr) FROM College",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "manufactory_1",
        "question": "计算价格大于或等于180美元的产品数量。",
        "query": "SELECT count(*) FROM products WHERE price >= 180",
        "mask_query": "SELECT count(*) FROM products WHERE price >= 180"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "返回平均交易金额以及所有交易的总金额。",
        "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "mask_query": "SELECT avg(<unk>) ,  sum(<unk>) FROM Financial_transactions"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示员工角色的数量。",
        "query": "SELECT count(*) FROM Ref_staff_roles",
        "mask_query": "SELECT count(*) FROM Ref_staff_roles"
    },
    {
        "db_id": "swimming",
        "question": "哪些国家没有在2006后开放的体育场？",
        "query": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006",
        "mask_query": "SELECT country FROM <mask> EXCEPT SELECT country FROM <mask> WHERE opening_year  >  2006"
    },
    {
        "db_id": "e_government",
        "question": "返回联系人数最多的组织的名称。",
        "query": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "question": "查找引用次数超过50次的论文标题。",
        "query": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  50"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "查找描述中包括“强”的产品对应的类别描述。",
        "query": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '强'",
        "mask_query": "SELECT T1.<unk> FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE '强'"
    },
    {
        "db_id": "car_1",
        "question": "哪些国家至少拥有一家汽车制造商？列出名称和ID。",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  1;"
    },
    {
        "db_id": "headphone_store",
        "question": "在耳机使用的数量方面，前两名的耳塞是什么？",
        "query": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
        "mask_query": "SELECT earpads FROM <mask> GROUP BY earpads ORDER BY count(*) DESC LIMIT 2"
    },
    {
        "db_id": "coffee_shop",
        "question": "哪一张会员卡有超过5名会员？",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  5"
    },
    {
        "db_id": "movie_2",
        "question": "查找正在播放“G”级或“PG”级电影的电影院的名称。",
        "query": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
        "mask_query": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'"
    },
    {
        "db_id": "government_shift",
        "question": "哪项服务从未被任何客户使用过？",
        "query": "SELECT service_details FROM services EXCEPT SELECT t2.service_details FROM customers_and_services AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id",
        "mask_query": "SELECT service_details FROM services EXCEPT SELECT t2.service_details FROM customers_and_services AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id"
    },
    {
        "db_id": "flight_4",
        "question": "“俄罗斯”有多少家航空公司？",
        "query": "SELECT count(*) FROM airlines WHERE country  =  \"俄罗斯\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"俄罗斯\""
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出最多顾客居住的城市。",
        "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t3.<unk> FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.<unk>  =  t2.<unk> JOIN addresses AS t3 ON t2.<unk>  =  t3.<unk> GROUP BY t3.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "department_store",
        "question": "对于已经“取消”状态的订单，按订单日期排序的订单id和客户id是什么？",
        "query": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"取消\" ORDER BY order_date",
        "mask_query": "SELECT <unk> ,  <unk> FROM customer_orders WHERE <unk>  =   \"取消\" ORDER BY <unk>"
    },
    {
        "db_id": "geo",
        "question": "与“陕西”接壤的省",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"陕西\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"陕西\";"
    },
    {
        "db_id": "advertising_agencies",
        "question": "返回至少参加过一次会议且员工详细信息中包含S的员工的ID和详细信息。",
        "query": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
        "mask_query": "SELECT <unk> ,  <unk> FROM staff WHERE <unk> LIKE \"%s%\" GROUP BY <unk> HAVING count(*)  >=  1"
    },
    {
        "db_id": "climbing",
        "question": "按降序列出登山者名字。",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "perpetrator",
        "question": "所有犯罪者伤害的平均人数是多少？",
        "query": "SELECT avg(Injured) FROM perpetrator",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "gymnast",
        "question": "按字母顺序排列的人的名字是什么？",
        "query": "SELECT Name FROM People ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM People ORDER BY <unk> ASC"
    },
    {
        "db_id": "activity_1",
        "question": "那些同时玩“独木舟”和“皮划艇”的教职员叫什么名字？",
        "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  \"独木舟\" INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  \"皮划艇\"",
        "mask_query": "SELECT T1.lname FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"独木舟\" INTERSECT SELECT T1.lname FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"皮划艇\""
    },
    {
        "db_id": "college_1",
        "question": "“会计学”或“生物学”系的教授人数是多少？",
        "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  '会计学' OR T2.dept_name  =  '生物学'",
        "mask_query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  '会计学' OR T2.dept_name  =  '生物学'"
    },
    {
        "db_id": "workshop_paper",
        "question": "显示最高分数的提交结果。",
        "query": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM acceptance AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "列出“成都”所有拥有评级低于2.5的“意大利”“餐厅”的街区",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"意大利\" AND t4.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"Madison\" AND t2.<unk>  <  2.5 AND t3.<unk>  =  \"意大利\" AND t4.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "yelp",
        "question": "“星巴克”在“星期五”的访问数数是多少？",
        "query": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"星巴克\" AND t2.day  =  \"星期五\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"星巴克\" AND t2.<unk>  =  \"星期五\";"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "代码为“粤”的位置名称和描述是什么？",
        "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"粤\"",
        "mask_query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"粤\""
    },
    {
        "db_id": "flight_1",
        "question": "所有能覆盖平均距离的飞机的名称是什么？",
        "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "mask_query": "SELECT <unk> FROM Aircraft WHERE <unk>  >  (SELECT avg(<unk>) FROM Aircraft)"
    },
    {
        "db_id": "music_2",
        "question": "演奏最多数量歌曲的音乐家的姓是什么？",
        "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "film_rank",
        "question": "展示没有导演“李安”导演的电影制片厂。",
        "query": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"李安\"",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask> WHERE <unk>  =  \"李安\""
    },
    {
        "db_id": "yelp",
        "question": "找出“赵毅”评论的所有的“酒吧”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"酒吧\" AND t4.name  =  \"赵毅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t2.<unk>  =  \"酒吧\" AND t4.<unk>  =  \"赵毅\";"
    },
    {
        "db_id": "scholar",
        "question": "“传感器融合”论文的作者",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"%传感器融合%\";",
        "mask_query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN <mask> AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"%传感器融合%\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "每个集合的子集ID、名称和子集中的集合数是多少？",
        "query": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> =  T2.<unk> GROUP BY T2.<unk>;"
    },
    {
        "db_id": "geo",
        "question": "“珠穆朗玛峰”的最大海拔是多少？",
        "query": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"珠穆朗玛峰\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"珠穆朗玛峰\";"
    },
    {
        "db_id": "scholar",
        "question": "“语义分析”论文中使用的数据集",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"语义分析\";",
        "mask_query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN <mask> AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN <mask> AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"语义分析\";"
    },
    {
        "db_id": "online_exams",
        "question": "问题的类型及其数量是什么？",
        "query": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "poker_player",
        "question": "身高最高的扑克玩家的财富等级是多少？",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "government_shift",
        "question": "有多少种服务？",
        "query": "SELECT count(*) FROM services",
        "mask_query": "SELECT count(*) FROM services"
    },
    {
        "db_id": "apartment_rentals",
        "question": "简称为“如家”的这栋楼里共有多少个房间？",
        "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"如家\"",
        "mask_query": "SELECT sum(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"如家\""
    },
    {
        "db_id": "allergy_1",
        "question": "哪种过敏类型有最少的过敏反应？",
        "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "question": "所有参赛者所属的不同国家数量是多少？",
        "query": "SELECT COUNT (DISTINCT Country) FROM player",
        "mask_query": "SELECT COUNT (DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "book_review",
        "question": "按读者数量降序列出所有书籍的标题和音频长度。",
        "query": "SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC",
        "mask_query": "SELECT T1.<unk> ,  T1.audio FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "yelp",
        "question": "列出5星级“意大利”“餐厅”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"意大利\" AND t3.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  5 AND t2.<unk>  =  \"意大利\" AND t3.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "scholar",
        "question": "在“吉特德拉·马利克”的论文中被用到的数据集",
        "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"吉特德拉·马利克\";",
        "mask_query": "SELECT DISTINCT t2.datasetid FROM <mask> AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"吉特德拉·马利克\";"
    },
    {
        "db_id": "formula_1",
        "question": "在1号位置获胜并获得20分以上的车手的名字是什么？",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.<unk> = 1 AND T2.<unk> = 1 AND T2.<unk> > 20"
    },
    {
        "db_id": "bbc_channels",
        "question": "找出负责节目最多的导演的姓名和年龄？",
        "query": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.name ,  t2.age FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "question": "有多少狗没有经过任何治疗？",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "entrepreneur",
        "question": "按照要求的资金顺序列出企业家的公司。",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "geo",
        "question": "哪些河流流经最大的城市",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "restaurants",
        "question": "“深圳”最好的“淮南”餐馆是哪一家？",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t1.food_type  =  \"淮南\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t1.food_type  =  \"淮南\" );",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t1.food_type  =  \"淮南\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t1.food_type  =  \"淮南\" );"
    },
    {
        "db_id": "concert_singer",
        "question": "在2014年或之后举办的音乐会最多的体育场的名称和容量。",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.name ,  T2.capacity FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "question": "从来没有被租过的车叫什么名字？",
        "query": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
        "mask_query": "SELECT <unk> FROM vehicles WHERE <unk> NOT IN (SELECT <unk> FROM renting_history)"
    },
    {
        "db_id": "movie_2",
        "question": "查找名字中包含“公民”的电影的电影评级。",
        "query": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
        "mask_query": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "帐户最多的客户的客户ID是什么，这个人有多少个帐户？",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "question": "哪个队没有车手？",
        "query": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "bakery_1",
        "question": "每种食物的平均价格、最高价格和最低价格是多少？",
        "query": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
        "mask_query": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM <mask> GROUP BY food"
    },
    {
        "db_id": "theme_gallery",
        "question": "最新加入的艺术家的名字是什么？",
        "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "mask_query": "SELECT name FROM <mask> ORDER BY year_join DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "“黑龙江”最低海拔是多少？",
        "query": "SELECT lowest_elevation FROM highlow WHERE state_name  =  \"黑龙江\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"黑龙江\";"
    },
    {
        "db_id": "store_product",
        "question": "哪些产品具有最大页面大小为“A4”，并且每分钟页面颜色小于5？",
        "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
        "mask_query": "SELECT <mask> FROM <mask> WHERE <unk>  =  \"A4\" AND <unk>  <  5"
    },
    {
        "db_id": "concert_singer",
        "question": "我们有多少歌手？",
        "query": "SELECT count(*) FROM singer",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "school_player",
        "question": "一个学校有多少教派？",
        "query": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "small_bank_1",
        "question": "支票和储蓄余额总额最低的账户对应的名称是什么？",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T2.<unk> + T3.<unk> LIMIT 1"
    },
    {
        "db_id": "e_learning",
        "question": "姓“龚”或“铭”的学生最近登录的日期是什么？",
        "query": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"龚\" OR family_name  =  \"铭\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"龚\" OR <unk>  =  \"铭\""
    },
    {
        "db_id": "wta_1",
        "question": "找出不同的失败者姓名的数量。",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "network_2",
        "question": "找到和“仲景”交朋友的“女”的名字",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  '仲景' AND T1.gender  =  '女'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '仲景' AND T1.<unk>  =  '女'"
    },
    {
        "db_id": "student_1",
        "question": "查找没有被“孙”“晓军”教过的三年级学生的姓氏。",
        "query": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"孙\" AND T2.lastname != \"晓军\"",
        "mask_query": "SELECT DISTINCT T1.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"孙\" AND T2.lastname != \"晓军\""
    },
    {
        "db_id": "address_1",
        "question": "我们有多少个城市？",
        "query": "SELECT count(*) FROM City",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "bakery_1",
        "question": "查找所有最新日期的收据及其对应的日期。",
        "query": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
        "mask_query": "SELECT <unk> ,  date FROM <mask> WHERE date  =  (SELECT date FROM <mask> ORDER BY date DESC LIMIT 1)"
    },
    {
        "db_id": "department_store",
        "question": "返回供应商3提供的产品类型、名称和价格。",
        "query": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T2.<unk> FROM product_suppliers AS T1 JOIN products AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  3"
    },
    {
        "db_id": "perpetrator",
        "question": "按年份降序列出犯罪者的姓名。",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "insurance_fnol",
        "question": "找到所有的电话号码。",
        "query": "SELECT customer_phone FROM available_policies",
        "mask_query": "SELECT customer_phone FROM available_policies"
    },
    {
        "db_id": "e_government",
        "question": "查找其名称包含“组织”的组织名称。",
        "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%组织%\"",
        "mask_query": "SELECT <unk> FROM organizations WHERE <unk> LIKE \"%组织%\""
    },
    {
        "db_id": "geo",
        "question": "中国有多少省",
        "query": "SELECT COUNT ( state_name ) FROM state;",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask>;"
    },
    {
        "db_id": "storm_record",
        "question": "列出所有至少有1人死亡的风暴的名称、活动日期和死亡人数。",
        "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "mask_query": "SELECT name ,  dates_active ,  number_deaths FROM <mask> WHERE number_deaths  >=  1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "对于每个学院ID，学位数目最多的学院的名称是什么？",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "是杏味且比5美元便宜的商品的ID是多少？",
        "query": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
        "mask_query": "SELECT id FROM <mask> WHERE flavor  =  \"Apricot\" AND price  <  5"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "从“初始”一词开始描述的文档的类型是什么？",
        "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE '初始'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '初始'"
    },
    {
        "db_id": "music_2",
        "question": "歌曲“波斯猫”中使用的声乐类型有哪些？",
        "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"波斯猫\"",
        "mask_query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"波斯猫\""
    },
    {
        "db_id": "e_learning",
        "question": "授课最多课程的作者的个人姓名、姓氏和作者id是什么？",
        "query": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "aircraft",
        "question": "那些从来没有赢得任何比赛的飞机的名字是什么？",
        "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM MATCH)"
    },
    {
        "db_id": "architecture",
        "question": "“美国”或“加拿大”的建筑师建造的工厂有哪些类型？",
        "query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  \"美国\" OR T2.nationality  =  \"加拿大\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"美国\" OR T2.<unk>  =  \"加拿大\""
    },
    {
        "db_id": "geo",
        "question": "面积最大的省的省会是什么？",
        "query": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "assets_maintenance",
        "question": "每家第三方公司提供多少资产？列出总和和公司ID。",
        "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "gymnast",
        "question": "返回所有体操运动员的平均单杠得分。",
        "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "hospital_1",
        "question": "给出手术的最高、最低和平均的花费。",
        "query": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures",
        "mask_query": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures"
    },
    {
        "db_id": "customer_deliveries",
        "question": "按牌照号码的顺序显示所有卡车的细节。",
        "query": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "mask_query": "SELECT <unk> FROM trucks ORDER BY <unk>"
    },
    {
        "db_id": "battle_death",
        "question": "每一次造成的最大和最小死亡人数是多少？",
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "student_1",
        "question": "找出在105教室学习的年纪。",
        "query": "SELECT DISTINCT grade FROM list WHERE classroom  =  105",
        "mask_query": "SELECT DISTINCT grade FROM <mask> WHERE classroom  =  105"
    },
    {
        "db_id": "country_language",
        "question": "国家的名称以及他们官方语言的名字是什么？",
        "query": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "scientist_1",
        "question": "从事项目的时间最长的SSN和科学家的名字是什么？",
        "query": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "mask_query": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.<unk> WHERE T2.hours  =  (SELECT max(hours) FROM projects)"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "不能与产物为“生物酶”的酶相互作用的药物名称和商标名称？",
        "query": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  '生物酶'",
        "mask_query": "SELECT <unk> ,  trade_name FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.trade_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.product  =  '生物酶'"
    },
    {
        "db_id": "music_2",
        "question": "找到所有没有“后台”声乐类型的歌曲。",
        "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"后台\"",
        "mask_query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"后台\""
    },
    {
        "db_id": "match_season",
        "question": "在防守位置的球员所在的国家中，有多少种不同的官方语言？",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"后卫\"",
        "mask_query": "SELECT count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"后卫\""
    },
    {
        "db_id": "college_2",
        "question": "有两个预备课程的课程名称是什么？",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  =  2"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "以字母降序顺序列出酶的名称。",
        "query": "SELECT name FROM enzyme ORDER BY name DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "epinions_1",
        "question": "查找最低信任分数的目标用户的姓名。",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY <mask> LIMIT 1"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "什么是不同的预算类型代码，以及每种有多少文件？",
        "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "mask_query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
    },
    {
        "db_id": "geo",
        "question": "“重庆”城的人口是多少",
        "query": "SELECT population FROM city WHERE city_name  =  \"重庆\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"重庆\";"
    },
    {
        "db_id": "college_2",
        "question": "找出低于最高工资的所有不同教员的工资。",
        "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  <  (SELECT max(<unk>) FROM <mask>)"
    },
    {
        "db_id": "department_store",
        "question": "价格低于600或高于900的产品的id和名称是什么？",
        "query": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "mask_query": "SELECT <unk> ,  <unk> FROM products WHERE <unk>  <  600 OR <unk>  >  900"
    },
    {
        "db_id": "art_1",
        "question": "给出1910年以后创作的所有油画作品的名字。",
        "query": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
        "mask_query": "SELECT <unk> FROM paintings WHERE YEAR  >  1910 AND <unk>  =  \"oil\""
    },
    {
        "db_id": "game_1",
        "question": "每项运动有多少学生玩？",
        "query": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname",
        "mask_query": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname"
    },
    {
        "db_id": "hr_1",
        "question": "部门ID、全名和每个部门中工资最高的员工的工资是什么？",
        "query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "mask_query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM <mask> GROUP BY department_id"
    },
    {
        "db_id": "scholar",
        "question": "2010以前的关于“字符识别”的论文",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"字符识别\" AND t3.year  <  2010;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"字符识别\" AND t3.<unk>  <  2010;"
    },
    {
        "db_id": "insurance_policies",
        "question": "在所有索赔中，索赔的最早日期是什么时候？",
        "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "question": "有多少航班从“哈尔滨”起飞，到达“西安”？",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"西安\" AND T3.City  =  \"哈尔滨\"",
        "mask_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.<unk>  =  T2.<unk> JOIN AIRPORTS AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"西安\" AND T3.<unk>  =  \"哈尔滨\""
    },
    {
        "db_id": "match_season",
        "question": "来自“重庆力帆”球队的球员来自多少不同的学院？",
        "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"重庆力帆\"",
        "mask_query": "SELECT count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"重庆力帆\""
    },
    {
        "db_id": "insurance_fnol",
        "question": "请告诉我“李帅”客户使用的保险单的类型。",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"李帅\"",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"李帅\""
    },
    {
        "db_id": "document_management",
        "question": "查找具有功能区域“致谢”的文档的平均访问次数。",
        "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"致谢\"",
        "mask_query": "SELECT avg(t1.<unk>) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.<unk>  =  t2.<unk> JOIN functional_areas AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"致谢\""
    },
    {
        "db_id": "boat_1",
        "question": "预定红色或蓝色船只的水手的id是什么？",
        "query": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON  T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  'red' OR T1.<unk>  =  \"blue\""
    },
    {
        "db_id": "bakery_1",
        "question": "按风味分类和排序的商品的最高、最低和平均价格是多少？",
        "query": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
        "mask_query": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM <mask> GROUP BY flavor ORDER BY flavor"
    },
    {
        "db_id": "products_for_hire",
        "question": "支付次数最多的预订的ID和退款额是多少？",
        "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "city_record",
        "question": "给我一张3月份气温低于12月份并且从未成为主办城市的城市名单。",
        "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "mask_query": "SELECT T1.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id  =  T2.city_id WHERE T2.<unk>  <  T2.<unk> EXCEPT SELECT T3.<mask> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.city_id  =  T4.host_city"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "数据库中列出了多少个位置？",
        "query": "SELECT count(*) FROM Ref_locations",
        "mask_query": "SELECT count(*) FROM Ref_locations"
    },
    {
        "db_id": "concert_singer",
        "question": "哪些国家有20岁以上的歌手？",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "mask_query": "SELECT DISTINCT country FROM <mask> WHERE age  >  20"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "对于每个文档对象id，它属于多少个集合？",
        "query": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
        "mask_query": "SELECT count(*) ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "epinions_1",
        "question": "找到任何评分低于5的项目的标题。",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  5"
    },
    {
        "db_id": "inn_1",
        "question": "能住在这家旅店的现代风格客房的总人数是多少？",
        "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  '现代化';",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  '现代化';"
    },
    {
        "db_id": "railway",
        "question": "按字母顺序升序排列列出铁路的建设者。",
        "query": "SELECT Builder FROM railway ORDER BY Builder ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "geo",
        "question": "“四川”最长的河流是什么？",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"四川\" ) AND traverse  =  \"四川\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> WHERE <unk>  =  \"四川\" ) AND <unk>  =  \"四川\";"
    },
    {
        "db_id": "geo",
        "question": "中国的最低的点是什么？",
        "query": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "flight_1",
        "question": "持有最多的距离超过5000的飞机证书的员工的工资和姓名是什么？",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM Employee AS T1 JOIN Certificate AS T2 ON T1.<unk>  =  T2.<unk> JOIN Aircraft AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  >  5000 GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "school_bus",
        "question": "显示有最多数量司机的家乡城市。",
        "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT home_city FROM <mask> GROUP BY home_city ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "protein_institute",
        "question": "显示没有任何机构的建筑物名称。",
        "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
        "mask_query": "SELECT name FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM institution)"
    },
    {
        "db_id": "academic",
        "question": "返回于2000年后在“VLDB”会议上的引用超过200篇的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" AND t2.<unk>  >  200 AND t2.<unk>  >  2000;"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示有客户的的代理的所有代理ID和详细信息。",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "county_public_safety",
        "question": "统计省的数量。",
        "query": "SELECT count(*) FROM county_public_safety",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "dog_kennels",
        "question": "计算年龄低于平均的狗的数量。",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  <  ( SELECT avg(<unk>) FROM <mask> )"
    },
    {
        "db_id": "product_catalog",
        "question": "查找价格大于700（美元）的产品名称和容量。",
        "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  700"
    },
    {
        "db_id": "course_teach",
        "question": "有多少老师？",
        "query": "SELECT count(*) FROM teacher",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "book_1",
        "question": "有多少客户？",
        "query": "SELECT count(*) FROM Client",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "e_learning",
        "question": "最多人数的学生报名参加哪门课程？给出课程名称。",
        "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "question": "哪个国家有收入超过1400000和球员收入低于1100000的球员？",
        "query": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  1400000 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  1100000"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "显示所有不止一次被文档使用的模板的ID。",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "mask_query": "SELECT template_id FROM <mask> GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "db_id": "museum_visit",
        "question": "既参观过2009年之前开放的博物馆又参观过2011年之后开放的博物馆的游客的名字是什么？",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.visitor_id JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.visitor_id JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t3.open_year  >  2011"
    },
    {
        "db_id": "college_2",
        "question": "有多少课程没有预备课程？",
        "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "icfp_1",
        "question": "发表论文最多的作者的姓氏是什么？",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.<unk> ,  t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "question": "支票余额大于平均支票余额而储蓄余额低于平均储蓄余额的账户的名称是什么？",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "mask_query": "SELECT T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  (SELECT avg(<unk>) FROM checking) INTERSECT SELECT T1.<unk> FROM accounts AS T1 JOIN savings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  (SELECT avg(<unk>) FROM savings)"
    },
    {
        "db_id": "academic",
        "question": "返回由“李政道”发表超过10篇论文的杂志。",
        "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" GROUP BY t2.<unk> HAVING COUNT ( DISTINCT t4.<unk> )  >  10;"
    },
    {
        "db_id": "network_1",
        "question": "显示有喜欢的高中学生的名字，以及每个人喜欢的数量。",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id GROUP BY T1.<unk>"
    },
    {
        "db_id": "assets_maintenance",
        "question": "最近签订合同的公司的类型描述是什么？",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "architecture",
        "question": "建造工厂最多的建筑师的 ID 、姓名和国籍是什么？",
        "query": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "question": "显示至少有5000和不超过40000座位数的赛道开放的年份。",
        "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "mask_query": "SELECT year_opened FROM <mask> WHERE seating BETWEEN 4000 AND 5000"
    },
    {
        "db_id": "pilot_1",
        "question": "最受欢迎的飞机叫什么名字？",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM pilotskills GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "与名为“余” “菲菲”的客户对应的帐户的名称和其他细节是什么？",
        "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"余\" AND T2.customer_last_name  =  \"菲菲\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"余\" AND T2.<unk>  =  \"菲菲\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "给出包含一到两个段落的文档的ID。",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "mask_query": "SELECT document_id FROM <mask> GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "db_id": "warehouse_1",
        "question": "价值最低的箱子的代码和存储物是什么？",
        "query": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
        "mask_query": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "question": "对于最近注册301课程的学生，他们的ID是什么？",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM student_course_attendance WHERE <unk> = 301 ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "network_1",
        "question": "找出没有朋友的学生的最低年级。",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "mask_query": "SELECT min(<unk>) FROM <mask> WHERE id NOT IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id)"
    },
    {
        "db_id": "flight_4",
        "question": "有多少条航线是以“加拿大”机场为终点的？",
        "query": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  \"加拿大\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"加拿大\""
    },
    {
        "db_id": "chinook_1",
        "question": "找出摇滚流派的歌曲的平均单价。",
        "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"摇滚\"",
        "mask_query": "SELECT AVG(T2.<unk>) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"摇滚\""
    },
    {
        "db_id": "singer",
        "question": "按净资产升序排列歌手姓名。",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "每个客户的移动日期是什么，以及相应的客户ID和细节？",
        "query": "SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "bike_1",
        "question": "每个曾经有7辆可用自行车的车站都有哪些不同的名字？",
        "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  7"
    },
    {
        "db_id": "academic",
        "question": "把“北京理工大学”的所有论文都返回。",
        "query": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t3.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "program_share",
        "question": "找出播放最频繁的节目名称。",
        "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "storm_record",
        "question": "计算不同受影响区域的数量。",
        "query": "SELECT count(DISTINCT region_id) FROM affected_region",
        "mask_query": "SELECT count(DISTINCT region_id) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“奥哈德·萨米尔”最多引用的论文是什么？",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"奥哈德·萨米尔\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM <mask> AS t3 JOIN <mask> AS t4 ON t3.paperid  =  t4.citedpaperid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"奥哈德·萨米尔\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "有多少个任务？",
        "query": "SELECT count(*) FROM Tasks",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "查找获得最高奖金的员工的名字。",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "question": "找到有多少不同的附属类型。",
        "query": "SELECT count(DISTINCT affiliation) FROM university",
        "mask_query": "SELECT count(DISTINCT affiliation) FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "统计“教学”的容量低于50房间的数量。",
        "query": "SELECT count(*) FROM classroom WHERE building  =  '教学' AND capacity  <  50",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '教学' AND <unk>  <  50"
    },
    {
        "db_id": "scientist_1",
        "question": "找出那些没有从事最长工作时间项目的科学家的名字。",
        "query": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "mask_query": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.<unk> WHERE T2.hours  =  (SELECT max(hours) FROM projects)"
    },
    {
        "db_id": "world_1",
        "question": "返回哪些不讲“英语”国家的国家代码。",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"英语\"",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask> WHERE LANGUAGE  =  \"英语\""
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出订单最大订货量的客户。",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "mask_query": "SELECT t1.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> JOIN order_items AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  ( SELECT max(<unk>) FROM order_items)"
    },
    {
        "db_id": "store_1",
        "question": "将标题以字母顺序排序，列出每个专辑。",
        "query": "SELECT title FROM albums WHERE title LIKE '安' ORDER BY title;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '安' ORDER BY <unk>;"
    },
    {
        "db_id": "imdb",
        "question": "找出所有出现“李易峰”的电影",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"李易峰\";",
        "mask_query": "SELECT t2.<unk> FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李易峰\";"
    },
    {
        "db_id": "address_1",
        "question": "巴尔的摩对应的经纬度是多少？",
        "query": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"Baltimore\""
    },
    {
        "db_id": "game_1",
        "question": "显示所有游戏的ID和玩的小时数。",
        "query": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",
        "mask_query": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid"
    },
    {
        "db_id": "pilot_1",
        "question": "找出在奥斯汀有飞机的飞行员的姓名和年龄。",
        "query": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Austin\""
    },
    {
        "db_id": "county_public_safety",
        "question": "不包含任何城市的省的名称是什么？",
        "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "pets_1",
        "question": "每个不养猫的学生都学什么专业？他们多大了？",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫')",
        "mask_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫')"
    },
    {
        "db_id": "scholar",
        "question": "2015年的NIPS的热门话题",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t3.<unk>  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "db_id": "geo",
        "question": "什么城市有最多的人",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "scholar",
        "question": "CVPR中被引用最多的作者是怎样的？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.venueid  =  t2.venueid JOIN <mask> AS t1 ON t1.paperid  =  t2.paperid JOIN <mask> AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "所有帐户的ID，开户日期，名称，以及其他细节是什么？",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "soccer_2",
        "question": "选拔赛中球员的不同的位置是什么？",
        "query": "SELECT count(DISTINCT pPos) FROM tryout",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM tryout"
    },
    {
        "db_id": "music_2",
        "question": "成员名字包含“贯中”的乐队中唱得最多的声乐是什么类型的？",
        "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"贯中\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"贯中\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "baseball_1",
        "question": "列出“广州恒大队”在季后赛获胜时的最高得分。",
        "query": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  '广州恒大队';",
        "mask_query": "SELECT max(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '广州恒大队';"
    },
    {
        "db_id": "machine_repair",
        "question": "按他们分配的机器质量等级升序的技术人员的姓名是什么？",
        "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.machine_id  =  T2.machine_id JOIN <mask> AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.<unk>"
    },
    {
        "db_id": "customers_and_orders",
        "question": "所有产品的ID、类型代码和名称是什么？",
        "query": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "没有雇用任何担任“研究院”角色作为工作人员的项目的细节有哪些？",
        "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  '研究院' )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  '研究院' )"
    },
    {
        "db_id": "student_assessment",
        "question": "最近注册课程的学生的具体信息是什么？",
        "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.<unk> = T2.<unk> ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "culture_company",
        "question": "每个出版商有多少本书？",
        "query": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",
        "mask_query": "SELECT publisher ,  count(*) FROM <mask> GROUP BY publisher"
    },
    {
        "db_id": "car_1",
        "question": "什么型号的汽车有最多不同的版本？",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM CAR_NAMES GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "university_rank",
        "question": "排名第五或以下大学的招生总数是多少？",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "mask_query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "boat_1",
        "question": "找到至少预定了一艘船的水手的姓名和id？",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "既有“GV”型又有“SF”型费用的文档日期是什么？",
        "query": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  \"GV\" INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  \"SF\"",
        "mask_query": "SELECT T1.document_date FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  \"GV\" INTERSECT SELECT T1.document_date FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  \"SF\""
    },
    {
        "db_id": "college_1",
        "question": "每个系的学生花多少时间学习？",
        "query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
        "mask_query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code"
    },
    {
        "db_id": "music_4",
        "question": "专辑的歌曲按升序排列是什么？",
        "query": "SELECT Song FROM volume ORDER BY Song",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "restaurants",
        "question": "给出一家在“鼓浪屿”“龙头路”的好吃的餐馆",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"鼓浪屿\" AND t2.street_name  =  \"龙头路\" AND t1.rating  >  2.5;",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"鼓浪屿\" AND t2.street_name  =  \"龙头路\" AND t1.rating  >  2.5;"
    },
    {
        "db_id": "geo",
        "question": "“四川”的首都是什么？",
        "query": "SELECT capital FROM state WHERE state_name  =  \"四川\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\";"
    },
    {
        "db_id": "planet_1",
        "question": "收到最重包裹的客户叫什么名字？",
        "query": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "返回最大25岁的艺术家专辑登顶的平均周数。",
        "query": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "mask_query": "SELECT avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.age  <=  25"
    },
    {
        "db_id": "scientist_1",
        "question": "找一个同时从事名为“东电西输”的项目和一个名为“南水北调”的项目的科学家的名字。",
        "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  \"东电西输\" INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  \"南水北调\"",
        "mask_query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.<unk> WHERE T2.name  =  \"东电西输\" INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.<unk> WHERE T2.name  =  \"南水北调\""
    },
    {
        "db_id": "party_people",
        "question": "列出成员名称和他们的党派名字。",
        "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",
        "mask_query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN <mask> AS T2 ON T1.party_id  =  T2.party_id"
    },
    {
        "db_id": "product_catalog",
        "question": "最贵的目录（美元）的条目名称是什么？",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM catalog_contents ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "question": "显示所有客户ID和客户名称。",
        "query": "SELECT customer_id ,  customer_name FROM Customers",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "college_1",
        "question": "历史系有“博士”学位的教授的名字和职务是什么？",
        "query": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  '旧' AND T2.prof_high_degree  =  '博士'",
        "mask_query": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  '旧' AND T2.prof_high_degree  =  '博士'"
    },
    {
        "db_id": "online_exams",
        "question": "显示学生的所有信息。",
        "query": "SELECT * FROM Students",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "storm_record",
        "question": "按代码排序所有地区的代码和名称是什么？",
        "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
        "mask_query": "SELECT region_code ,  region_name FROM <mask> ORDER BY region_code"
    },
    {
        "db_id": "activity_1",
        "question": "“李”“斌”指导哪些学生？给我他们的名字和姓氏。",
        "query": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"斌\" AND T1.lname  =  \"李\"",
        "mask_query": "SELECT T2.fname ,  T2.lname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.advisor WHERE T1.fname  =  \"斌\" AND T1.lname  =  \"李\""
    },
    {
        "db_id": "scholar",
        "question": "发表在“CHI”会议的论文",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"CHI\";",
        "mask_query": "SELECT DISTINCT t1.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"CHI\";"
    },
    {
        "db_id": "formula_1",
        "question": "获得5分以上的所有日本制造商的名字是什么？",
        "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"日本\" AND T2.points > 5",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.<unk> = \"日本\" AND T2.<unk> > 5"
    },
    {
        "db_id": "boat_1",
        "question": "评分为7的水手的平均年龄是多少？",
        "query": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
        "mask_query": "SELECT AVG(<unk>) FROM <mask> WHERE <unk>  =  7"
    },
    {
        "db_id": "sports_competition",
        "question": "有多少个俱乐部？",
        "query": "SELECT count(*) FROM club",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "SIGIR会议的论文数是多少？",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "mask_query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";"
    },
    {
        "db_id": "vehicle_rent",
        "question": "返回所有有关折扣的信息。",
        "query": "SELECT * FROM discount",
        "mask_query": "SELECT * FROM discount"
    },
    {
        "db_id": "boat_1",
        "question": "水手的最高等级是多少？",
        "query": "SELECT max(rating) FROM Sailors",
        "mask_query": "SELECT max(<unk>) FROM <mask>"
    },
    {
        "db_id": "imdb",
        "question": "“成龙”是什么时候出生的？",
        "query": "SELECT birth_year FROM actor WHERE name  =  \"成龙\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"成龙\";"
    },
    {
        "db_id": "hr_1",
        "question": "做过两个或更多工作的员工的员工ID是什么？",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "mask_query": "SELECT employee_id FROM <mask> GROUP BY employee_id HAVING COUNT(*)  >= 2"
    },
    {
        "db_id": "wta_1",
        "question": "根据出生日期顺序，所有左手球员的全名是什么？",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  '左' ORDER BY birth_date",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  '左' ORDER BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "返回在2002年的“VLDB”会议上有发表论文的作者。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"VLDB\" AND t4.<unk>  =  2002;"
    },
    {
        "db_id": "music_1",
        "question": "发行了一首标题中包含“爱”字的歌曲的艺术家的名字和原籍国是什么？",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"爱\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE \"爱\""
    },
    {
        "db_id": "world_1",
        "question": "面积最大的国家的人口、名字和领导人是什么？",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  population ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "不同的客户ID是什么和每个用户持有多少张卡？",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM Customers_cards GROUP BY <unk>"
    },
    {
        "db_id": "store_1",
        "question": "列出客户'“康” “伯约”'购买的所有曲目。",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"康\" AND T4.last_name = \"伯约\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T3.<unk> = T2.<unk> JOIN <mask> AS T4 ON T4.<unk> = T3.<unk> WHERE T4.<unk> = \"康\" AND T4.<unk> = \"伯约\";"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "按照客户编号的降序显示所有客户的名称、电话和支付方法代码。",
        "query": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM customers ORDER BY <unk> DESC"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "显示预定的发货日期和预订的实际交货日期。",
        "query": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "mask_query": "SELECT <unk> ,  <unk> FROM BOOKINGS"
    },
    {
        "db_id": "train_station",
        "question": "提供“和谐号”和“复兴号”列车的车站的名称是什么？",
        "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"和谐号\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"复兴号\"",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.station_id  =  T2.station_id JOIN <mask> AS T3 ON T3.train_id  =  T1.train_id WHERE T3.<unk>  =  \"和谐号\" INTERSECT SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.station_id  =  T2.station_id JOIN <mask> AS T3 ON T3.train_id  =  T1.train_id WHERE T3.<unk>  =  \"复兴号\""
    },
    {
        "db_id": "shop_membership",
        "question": "2018年“北京”所有分行的总购买金额是多少？",
        "query": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  '北京' AND T1.year  =  2018",
        "mask_query": "SELECT sum(total_pounds) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  '北京' AND T1.year  =  2018"
    },
    {
        "db_id": "hr_1",
        "question": "每个部门的部门名称、城市和所在省份都有哪些？",
        "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "mask_query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.location_id  =  T1.location_id"
    },
    {
        "db_id": "hospital_1",
        "question": "找到那些随时值班的护士的名字。",
        "query": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "mask_query": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.<unk>  =  T2.nurse"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "哪些学生的助学贷款高于平均水平？列出学生的个人资料和细节。",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  ( SELECT avg(<unk>) FROM <mask> )"
    },
    {
        "db_id": "network_1",
        "question": "返回名字是“小军”高中学生的朋友的名字。",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"小军\"",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id JOIN <mask> AS T3 ON T1.<unk>  =  T3.id WHERE T2.<unk>  =  \"小军\""
    },
    {
        "db_id": "wine_1",
        "question": "每种年份的葡萄酒的平均价格是多少？",
        "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
        "mask_query": "SELECT avg(<unk>) ,  YEAR FROM WINE GROUP BY YEAR"
    },
    {
        "db_id": "flight_4",
        "question": "每个国家有多少个机场？按照机场数量降序来排列。",
        "query": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "文件数最多的作者叫什么名字？",
        "query": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "question": "找到存放在芝加哥或纽约仓库的箱子的编码。",
        "query": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "mask_query": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'"
    },
    {
        "db_id": "geo",
        "question": "所有省的最高点是什么？",
        "query": "SELECT highest_point FROM highlow;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "school_player",
        "question": "哪些学校没有球员？给我学校的位置。",
        "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <unk>)"
    },
    {
        "db_id": "film_rank",
        "question": "没有电影市场估计的电影的片名是什么？",
        "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "college_2",
        "question": "在最大的教室(容量最高)教的课程名称和学分是什么？",
        "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
        "mask_query": "SELECT T3.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN SECTION AS T2 ON T1.<unk>  =  T2.<unk> AND T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  (SELECT max(<unk>) FROM <mask>)"
    },
    {
        "db_id": "e_government",
        "question": "地址“石龙山街18号”可能在哪个省？",
        "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%石龙山街18号%\"",
        "mask_query": "SELECT <unk> FROM addresses WHERE <unk> LIKE \"%石龙山街18号%\""
    },
    {
        "db_id": "twitter_1",
        "question": "找到名为“马丽”的用户的电子邮件。",
        "query": "SELECT email FROM user_profiles WHERE name  =  '马丽'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '马丽'"
    },
    {
        "db_id": "scholar",
        "question": "“营养级联”相关会议",
        "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"营养级联\";",
        "mask_query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"营养级联\";"
    },
    {
        "db_id": "art_1",
        "question": "什么样的材料用于id是80的画作？",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "mask_query": "SELECT <unk> FROM paintings WHERE <unk>  =  80"
    },
    {
        "db_id": "wine_1",
        "question": "给出最高得分的葡萄酒的名称。",
        "query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
        "mask_query": "SELECT <unk> FROM WINE ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "pilot_record",
        "question": "显示飞行员的名字和他们的记录数量。",
        "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.<unk>"
    },
    {
        "db_id": "museum_visit",
        "question": "会员级别为“1”的游客的门票总费用是多少？",
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "mask_query": "SELECT sum(t2.<unk>) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.visitor_id WHERE t1.<unk>  =  1"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "“种子”类别中有多少种产品？",
        "query": "SELECT count(*) FROM products WHERE product_category_code  =  \"种子\"",
        "mask_query": "SELECT count(*) FROM products WHERE <unk>  =  \"种子\""
    },
    {
        "db_id": "csu_1",
        "question": "1956年，哪个学校的招生总数超过400人但全日制招生却超过200人？",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "mask_query": "SELECT T1.campus FROM campuses AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND <unk>  >  200"
    },
    {
        "db_id": "college_1",
        "question": "教室“KLR209”上过的所有课程的代码是什么？",
        "query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "mask_query": "SELECT class_code FROM <mask> WHERE class_room  =  'KLR209'"
    },
    {
        "db_id": "wedding",
        "question": "展示30岁以上和25岁以下的人来自的国家。",
        "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
        "mask_query": "SELECT country FROM <mask> WHERE age  <  25 INTERSECT SELECT country FROM <mask> WHERE age  >  30"
    },
    {
        "db_id": "department_management",
        "question": "哪个部门有不止一个负责人？列出ID、姓名和人数。",
        "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
        "mask_query": "SELECT T1.department_id ,  T1.<unk> ,  count(*) FROM <mask> AS T2 JOIN <mask> AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1"
    },
    {
        "db_id": "dog_kennels",
        "question": "找出没有治疗过狗的专家的数量。",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "assets_maintenance",
        "question": "日志中的所有故障记录中的所有故障描述和故障状态是什么？",
        "query": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cinema",
        "question": "我们有多少电影院？",
        "query": "SELECT count(*) FROM cinema",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "计算模板的数量。",
        "query": "SELECT count(*) FROM Templates",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "manufactory_1",
        "question": "“索尼”的创始人是谁？",
        "query": "SELECT founder FROM manufacturers WHERE name  =  '索尼'",
        "mask_query": "SELECT founder FROM manufacturers WHERE name  =  '索尼'"
    },
    {
        "db_id": "music_2",
        "question": "有成员的姓是“刘”的乐队最常演奏的声乐类型是什么？",
        "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"刘\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"刘\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "question": "总得分超过57.5的体操运动员的不同家乡是什么？",
        "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  57.5"
    },
    {
        "db_id": "academic",
        "question": "把2000年后在“VLDB”会议上发表论文中拥有最多数量引用的论文返回。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" AND t2.<unk>  >  2000 ORDER BY t2.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "match_season",
        "question": "按学院的字母顺序排列，返回所有球员。",
        "query": "SELECT player FROM match_season ORDER BY College ASC",
        "mask_query": "SELECT <mask> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "soccer_1",
        "question": "列出总得分在85到90之间的左脚球员的名字。",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"左\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk>  =  \"左\" AND T2.<unk>  >=  85 AND T2.<unk>  <=  90"
    },
    {
        "db_id": "device",
        "question": "给出库存的平均数量。",
        "query": "SELECT avg(Quantity) FROM stock",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "flight_4",
        "question": "按机场数量列出拥有2个以上机场的城市。",
        "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  2 ORDER BY count(*)"
    },
    {
        "db_id": "flight_1",
        "question": "显示使用“空客”飞机的所有航班号。",
        "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"空客\"",
        "mask_query": "SELECT T1.<unk> FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"空客\""
    },
    {
        "db_id": "planet_1",
        "question": "列出所有由王里奥寄出或收到的包裹。",
        "query": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> OR T1.<unk>  =  T2.<unk> WHERE T2.<unk> = \"Leo Wong\""
    },
    {
        "db_id": "book_1",
        "question": "显示订购图书总量最多的客户名称。",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idClient  =  T2.idClient JOIN <mask> AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "debate",
        "question": "有多少辩论？",
        "query": "SELECT count(*) FROM debate",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "climbing",
        "question": "登山者来自多少不同的国家？",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "mask_query": "SELECT COUNT(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "hospital_1",
        "question": "每个楼层有多少个房间？",
        "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
        "mask_query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor"
    },
    {
        "db_id": "customer_complaints",
        "question": "找出最贵产品的名称和类别。",
        "query": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM products ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "最小省的人口密度是多少？",
        "query": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "baseball_1",
        "question": "哪支球队在1980年参加的主场比赛最少？",
        "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = 1980 ORDER BY T1.<unk> ASC LIMIT 1;"
    },
    {
        "db_id": "hospital_1",
        "question": "列出一些预约医生的名字。",
        "query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "mask_query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.<mask>  =  T2.<unk>"
    },
    {
        "db_id": "loan_1",
        "question": "查找提供最大贷款总额的银行支行的名称。",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.<unk> ORDER BY sum(T2.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "中国的最高的是什么地方？",
        "query": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "party_people",
        "question": "党员人数最多的政党名称是什么？",
        "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.party_name FROM Member AS T1 JOIN <mask> AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "至少有两个特征的房产有多少？",
        "query": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
        "mask_query": "SELECT count(*) FROM <mask> GROUP BY <unk> HAVING count(*)  >= 2;"
    },
    {
        "db_id": "scholar",
        "question": "“布瑞恩·克莱斯”做“卷积”相关领域么？",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"布瑞恩·克莱斯\" AND t5.keyphrasename  =  \"卷积\";",
        "mask_query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"布瑞恩·克莱斯\" AND t5.keyphrasename  =  \"卷积\";"
    },
    {
        "db_id": "dorm_1",
        "question": "找出住容量最大的宿舍的学生的平均年龄。",
        "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)",
        "mask_query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  (SELECT max(<unk>) FROM dorm)"
    },
    {
        "db_id": "manufactory_1",
        "question": "最便宜的产品的名称和价格是多少？",
        "query": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1",
        "mask_query": "SELECT name ,  price FROM <mask> ORDER BY price ASC LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "question": "计算40岁以上或30岁以下的飞行员人数。",
        "query": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
        "mask_query": "SELECT count(<unk>) FROM pilotskills ORDER BY <unk>  >  40 OR <unk>  <  30"
    },
    {
        "db_id": "college_1",
        "question": "每所学校有多少课？",
        "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
        "mask_query": "SELECT count(*) ,  T3.school_code FROM <mask> AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "计算产品“芝麻”的不同特征名称的数量。",
        "query": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"芝麻\"",
        "mask_query": "SELECT count(DISTINCT t3.<unk>) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"芝麻\""
    },
    {
        "db_id": "flight_1",
        "question": "每架飞机的名字是什么，每个飞机有多少个航班？",
        "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "tv_shows",
        "question": "请显示城市频道最常见的所属单位。",
        "query": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "question": "“湖南大学”有多少本科生？",
        "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"湖南大学\"",
        "mask_query": "SELECT sum(t1.undergraduate) FROM <mask> AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"湖南大学\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "总共有多少套公寓预订？",
        "query": "SELECT count(*) FROM Apartment_Bookings",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "bakery_1",
        "question": "包含一件价值超过13美元的商品的不同收据号是什么？",
        "query": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.receipt JOIN <mask> AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13"
    },
    {
        "db_id": "restaurants",
        "question": "一些在“泉州”的餐厅",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"泉州\";",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"泉州\";"
    },
    {
        "db_id": "wedding",
        "question": "我们的记录中有多少女性年龄超过30岁？",
        "query": "SELECT count(*) FROM people WHERE is_male  =  '女' AND age  >  30",
        "mask_query": "SELECT count(*) FROM <mask> WHERE is_male  =  '女' AND age  >  30"
    },
    {
        "db_id": "railway",
        "question": "所有经理的平均年龄是多少？",
        "query": "SELECT avg(Age) FROM manager",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "device",
        "question": "显示有超过一个商店库存的设备的载体。",
        "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "列出具有不止一个雇员的角色，并列出角色描述和员工的人数。",
        "query": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",
        "mask_query": "SELECT <mask>.<unk> , count(<mask>.<unk>) FROM ROLES JOIN <mask> ON <mask>.<unk> = <mask>.<unk> GROUP BY <mask>.<unk> HAVING count(<mask>.<unk>)  >  1;"
    },
    {
        "db_id": "body_builder",
        "question": "显示每个健美运动员的所有信息。",
        "query": "SELECT * FROM body_builder",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "store_1",
        "question": "列出按州分组的美国发票数量。",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"美国\" GROUP BY billing_state;",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> WHERE <unk>  =  \"美国\" GROUP BY <unk>;"
    },
    {
        "db_id": "college_1",
        "question": "参加“会计学”和“信息系统”系课程的所有学生的名字是什么？",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  '会计学' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  '信息系统'",
        "mask_query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN <mask> AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  '会计学' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN <mask> AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  '信息系统'"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "显示“取消”或“付款”订单状态的客户订单的装运费和客户ID。",
        "query": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  '取消' OR order_status_code  =  '付款'",
        "mask_query": "SELECT <unk> ,  <unk> FROM customer_orders WHERE <unk>  =  '取消' OR <unk>  =  '付款'"
    },
    {
        "db_id": "machine_repair",
        "question": "列出未被指派修理机器的技术人员的姓名。",
        "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "哪个雇员在流通文件中出现的最多。列出员工姓名、文件草稿和复印件的数量。",
        "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT <mask>.<unk> , count(*) FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> GROUP BY <mask>.<unk> , <mask>.<unk> , <mask>.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "train_station",
        "question": "显示所有车站的名称、位置和站台数量。",
        "query": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
        "mask_query": "SELECT name ,  LOCATION ,  number_of_platforms FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“丙烯酸骨水泥断裂”发表的会议是什么？",
        "query": "SELECT DISTINCT venueid FROM paper WHERE title  =  \"丙烯酸骨水泥断裂\";",
        "mask_query": "SELECT DISTINCT venueid FROM <mask> WHERE <unk>  =  \"丙烯酸骨水泥断裂\";"
    },
    {
        "db_id": "vehicle_driver",
        "question": "计算没有驾驶任何车辆的驾驶员人数。",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE driver_id NOT IN ( SELECT driver_id FROM <mask> )"
    },
    {
        "db_id": "icfp_1",
        "question": "哪篇论文的第一作者隶属于“日本”某机构，而且姓“村上”？把论文的标题给我。",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"日本\" AND t2.authorder  =  1 AND t1.lname  =  \"村上\"",
        "mask_query": "SELECT t3.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.<unk>  =  \"日本\" AND t2.authorder  =  1 AND t1.<unk>  =  \"村上\""
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "雇员名为“琳琳”的角色名和角色描述是什么？",
        "query": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"琳琳\"",
        "mask_query": "SELECT T2.role_name ,  T2.role_description FROM <mask> AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"琳琳\""
    },
    {
        "db_id": "vehicle_driver",
        "question": "车型名中有“DJ”的车型名称和制造年份是什么？",
        "query": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
        "mask_query": "SELECT model ,  build_year FROM <mask> WHERE model LIKE '%DJ%'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "哪些老师教过的学生的成绩单最早？列出老师的详细资料。",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> ORDER BY T3.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "restaurant_1",
        "question": "哪些学生年龄在18岁以上，主修600？列出每个学生的名和姓。",
        "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;",
        "mask_query": "SELECT <unk> , Lname FROM <mask> WHERE <unk>  >  18 AND <unk> = 600;"
    },
    {
        "db_id": "music_1",
        "question": "所有“孟加拉语”歌曲的平均评级和分辨率是多少？",
        "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"孟加拉语\"",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) FROM <mask> WHERE <unk>  =  \"孟加拉语\""
    },
    {
        "db_id": "dorm_1",
        "question": "找到一些有宿舍设施的宿舍。",
        "query": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM has_amenity"
    },
    {
        "db_id": "car_1",
        "question": "每个汽车制造商的全名，ID以及生产多少种型号的汽车？",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>;"
    },
    {
        "db_id": "debate",
        "question": "显示那些在辩论中至少两次处于负面的人的名字。",
        "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "列出所有预算类型代码和说明。",
        "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "mask_query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"
    },
    {
        "db_id": "boat_1",
        "question": "预定红色和蓝色船只的水手的id是什么？",
        "query": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON  T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  'red' INTERSECT SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON  T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"blue\""
    },
    {
        "db_id": "vehicle_rent",
        "question": "车辆数目最多的的动力系统是什么类型的？",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "gas_company",
        "question": "所有市场价值大于100的公司的加油站所在的位置在什么地方？",
        "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "mask_query": "SELECT T3.location FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.company_id  =  T2.company_id JOIN <mask> AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"
    },
    {
        "db_id": "geo",
        "question": "中国的总面积是多少？",
        "query": "SELECT SUM ( area ) FROM state;",
        "mask_query": "SELECT SUM ( <unk> ) FROM <mask>;"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "查找超过2个客户使用的所有保险单类型。",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "mask_query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"
    },
    {
        "db_id": "academic",
        "question": "返回“使数据库可用”的关键词。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"使数据库可用\";",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t2.<unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "movie_1",
        "question": "有多少电影评分超过3颗星？",
        "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  3"
    },
    {
        "db_id": "battle_death",
        "question": "包含文本为“东”的死亡事件的注解是什么？",
        "query": "SELECT note FROM death WHERE note LIKE '东'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '东'"
    },
    {
        "db_id": "wta_1",
        "question": "找出所有比赛中失败者的最高排名。",
        "query": "SELECT min(loser_rank) FROM matches",
        "mask_query": "SELECT min(<unk>) FROM <mask>"
    },
    {
        "db_id": "soccer_2",
        "question": "有多少省的大学入学率低于平均入学率？",
        "query": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM college WHERE <unk>  <  (SELECT avg(<unk>) FROM college)"
    },
    {
        "db_id": "geo",
        "question": "给我所有的省的名称",
        "query": "SELECT state_name FROM state;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "imdb",
        "question": "电影“无极”中的主要角色是什么？",
        "query": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"无极\";",
        "mask_query": "SELECT t2.<unk> FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t3.<unk>  =  \"无极\";"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "返回描述中包含字母“w”的文档的名称和模板ID。",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"w\"",
        "mask_query": "SELECT document_name ,  template_id FROM <mask> WHERE <unk> LIKE \"w\""
    },
    {
        "db_id": "address_1",
        "question": "给出波士顿和其他城市之间的平均距离。",
        "query": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
        "mask_query": "SELECT avg(<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Boston\""
    },
    {
        "db_id": "scholar",
        "question": "引用“丹尼尔·朱拉斯凯”的论文",
        "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"丹尼尔·朱拉斯凯\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t3 JOIN <mask> AS t4 ON t3.paperid  =  t4.citingpaperid JOIN <mask> AS t2 ON t2.paperid  =  t4.citedpaperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"丹尼尔·朱拉斯凯\";"
    },
    {
        "db_id": "customer_complaints",
        "question": "包含子字符串“westlake”的电子邮件地址的工作人员的姓氏是什么？",
        "query": "SELECT last_name FROM staff WHERE email_address LIKE \"%westlake%\"",
        "mask_query": "SELECT <unk> FROM staff WHERE <unk> LIKE \"%westlake%\""
    },
    {
        "db_id": "geo",
        "question": "哪些河流不会穿过“新疆”",
        "query": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"新疆\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"新疆\" );"
    },
    {
        "db_id": "network_1",
        "question": "每个高中生的名字和年级是什么？",
        "query": "SELECT name ,  grade FROM Highschooler",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "sakila_1",
        "question": "地址“中山东路15号”的电话号码和邮政编码是多少？",
        "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '中山东路15号'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <mask>  =  '中山东路15号'"
    },
    {
        "db_id": "architecture",
        "question": "有多少建筑师是“女”性？",
        "query": "SELECT count(*) FROM architect WHERE gender  =  \"女\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"女\""
    },
    {
        "db_id": "icfp_1",
        "question": "查找作者的名和姓氏，并且作者的机构隶属是“清华大学”。",
        "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"清华大学\"",
        "mask_query": "SELECT DISTINCT t1.<unk> ,  t1.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.<unk>  =  \"清华大学\""
    },
    {
        "db_id": "machine_repair",
        "question": "技术人员的名字和他们需要修理机器系列的名称是什么？",
        "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.machine_id  =  T2.machine_id JOIN <mask> AS T3 ON T1.technician_ID  =  T3.technician_ID"
    },
    {
        "db_id": "imdb",
        "question": "电影“三国演义”的作者是谁？",
        "query": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"三国演义\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"三国演义\";"
    },
    {
        "db_id": "yelp",
        "question": "找出“赵毅”评论的所有在“重庆”的“餐厅”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"重庆\" AND t2.category_name  =  \"餐厅\" AND t4.name  =  \"赵毅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"重庆\" AND t2.<unk>  =  \"餐厅\" AND t4.<unk>  =  \"赵毅\";"
    },
    {
        "db_id": "insurance_fnol",
        "question": "求最大结算金额和最小结算金额。",
        "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
        "mask_query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements"
    },
    {
        "db_id": "address_1",
        "question": "显示所有城市名称以及到所有其他城市的平均距离。",
        "query": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
        "mask_query": "SELECT T2.<unk> ,  avg(<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "store_product",
        "question": "找出最大页面大小为“A4”或每分钟页面颜色小于5的产品。",
        "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "mask_query": "SELECT <mask> FROM <mask> WHERE <unk>  =  \"A4\" OR <unk>  <  5"
    },
    {
        "db_id": "sakila_1",
        "question": "返回所有演员中最常见的全名。",
        "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> GROUP BY <unk> ,  <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "question": "最年轻的体操运动员的总得分是多少？",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "2014年使用ImageNet数据集的ECCV论文",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.<unk>  =  2014 AND t4.venuename  =  \"eccv\";"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "对于每个保险单类型，在记录中返回其类型代码及其数量。",
        "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "mask_query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"
    },
    {
        "db_id": "aircraft",
        "question": "获胜次数最多的30岁以下的飞行员的姓名和年龄是多少？",
        "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.name ,  t1.age FROM <mask> AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "进行金融交易的不同账户ID是什么，以及每个账户对应多少个交易？",
        "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM Financial_transactions GROUP BY <unk>"
    },
    {
        "db_id": "device",
        "question": "设备商店的名称是什么以及他们携带设备库存的载体是什么？",
        "query": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "county_public_safety",
        "question": "哪个地方有最多相对应的省？",
        "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT LOCATION FROM <mask> GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "museum_visit",
        "question": "找到不止一次参观博物馆的游客的id、姓名和年龄。",
        "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "mask_query": "SELECT t1.id ,  t1.name ,  t1.age FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
    },
    {
        "db_id": "document_management",
        "question": "找出被访问次数最多的文档的名称以及其被访问的次数是多少？",
        "query": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM documents ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "登录名为ratione的用户的注册日期是什么？",
        "query": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  'ratione';"
    },
    {
        "db_id": "company_1",
        "question": "找到所有与某个雇员有配偶关系的家属姓名。",
        "query": "SELECT Dependent_name FROM dependent WHERE relationship  =  '配偶'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE relationship  =  '配偶'"
    },
    {
        "db_id": "geo",
        "question": "在“四川”边境的那些省的省会是什么？",
        "query": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"四川\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"四川\";"
    },
    {
        "db_id": "geo",
        "question": "有多少省与人口最多的省接壤？",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "soccer_2",
        "question": "被“否定”的学生平均花多少时间练习？",
        "query": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  '否定'",
        "mask_query": "SELECT avg(T1.<unk>) FROM player AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '否定'"
    },
    {
        "db_id": "yelp",
        "question": "列出所有在“黑龙江”的“餐馆”。",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"黑龙江\" AND t2.category_name  =  \"餐馆\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"黑龙江\" AND t2.<unk>  =  \"餐馆\";"
    },
    {
        "db_id": "architecture",
        "question": "显示所有由“美国”建筑师设计的桥梁的名称，并根据桥长度对结果进行排序。",
        "query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  \"美国\" ORDER BY t1.length_feet",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"美国\" ORDER BY t1.<unk>"
    },
    {
        "db_id": "train_station",
        "question": "找出不经过“广州”任何车站的列车的名称。",
        "query": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"广州\")",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"广州\")"
    },
    {
        "db_id": "flight_company",
        "question": "什么是最常见的公司类型，每种有多少？",
        "query": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE ,  count(*) FROM <mask> GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "match_season",
        "question": "返回“杭州绿城”球队的队员的位置。",
        "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"杭州绿城\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"杭州绿城\""
    },
    {
        "db_id": "allergy_1",
        "question": "找出对“动物”和“食物”类型过敏的学生的平均年龄。",
        "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"食物\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"动物\")",
        "mask_query": "SELECT avg(age) FROM <mask> WHERE <unk> IN ( SELECT T1.<unk> FROM Has_allergy AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.allergytype  =  \"食物\" INTERSECT SELECT T1.<unk> FROM Has_allergy AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.allergytype  =  \"动物\")"
    },
    {
        "db_id": "art_1",
        "question": "找出所有拥有雕塑作品名中包含“女性”这个词的艺术家的名字和姓氏。",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM artists AS T1 JOIN sculptures AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE \"%female%\""
    },
    {
        "db_id": "party_host",
        "question": "显示不同的国籍，以及每个国家的主持人人数。",
        "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM HOST GROUP BY <unk>"
    },
    {
        "db_id": "gymnast",
        "question": "返回所有体操运动员的平均年龄。",
        "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "mask_query": "SELECT avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "imdb",
        "question": "“成龙”的国籍是什么？",
        "query": "SELECT nationality FROM director WHERE name  =  \"成龙\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"成龙\";"
    },
    {
        "db_id": "voter_1",
        "question": "名字叫“王伟”的选手的选票创建日期、州和电话号码是什么？",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  \"王伟\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T2.<unk> FROM contestants AS T1 JOIN votes AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"王伟\""
    },
    {
        "db_id": "vehicle_driver",
        "question": "返回从未被驾驶过的车型。",
        "query": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
        "mask_query": "SELECT model FROM <mask> EXCEPT SELECT T1.model FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.vehicle_id  =  T2.vehicle_id"
    },
    {
        "db_id": "sing_contest",
        "question": "所有用“英语”演唱的歌曲的不同的舞台表演得分是多少？",
        "query": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  'English'"
    },
    {
        "db_id": "academic",
        "question": "把在2000年之后的“VLDB”会议的论文返回给我。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" AND t2.<unk>  >  2000;"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "有多少个不同的地点位于有东西的服务细节是“不满意的”的地方？",
        "query": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  '不满意的'",
        "mask_query": "SELECT count(DISTINCT T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '不满意的'"
    },
    {
        "db_id": "institution_sports",
        "question": "返回具有公共关系的机构的冠军总数。",
        "query": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
        "mask_query": "SELECT sum(T1.<unk>) FROM championship AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Public\""
    },
    {
        "db_id": "architecture",
        "question": "建造一座超过80米的桥梁的建筑师建造的工厂叫什么名字？",
        "query": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  >  80"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "显示最多数量的帐户的结算单 ID 和结算单的详细信息。",
        "query": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.statement_id ,  T2.statement_details FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示所有角色是“人力资源”的员工的姓名。",
        "query": "SELECT employee_name FROM Employees WHERE role_code  =  \"人力资源\"",
        "mask_query": "SELECT employee_name FROM <mask> WHERE role_code  =  \"人力资源\""
    },
    {
        "db_id": "geo",
        "question": "中国最高的山峰是什么？",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "music_2",
        "question": "2010发行的专辑有什么信息？",
        "query": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "mask_query": "SELECT * FROM <mask> WHERE YEAR  =  2010"
    },
    {
        "db_id": "aan_1",
        "question": "标题包含“翻译”的论文的ID是什么？",
        "query": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"%translation%\""
    },
    {
        "db_id": "restaurant_1",
        "question": "哪家餐馆的评价最高？列出餐厅名称及其等级。",
        "query": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;",
        "mask_query": "SELECT <unk> , <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "product_catalog",
        "question": "找出修订超过一次的日期。",
        "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "geo",
        "question": "人口密度最大的省是哪一个省",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "battle_death",
        "question": "有多少艘船最终被“俘虏”？",
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  '俘虏'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '俘虏'"
    },
    {
        "db_id": "perpetrator",
        "question": "身高超过1.84的犯罪者的总杀害的人数是什么。",
        "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
        "mask_query": "SELECT sum(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  1.84"
    },
    {
        "db_id": "course_teach",
        "question": "显示教师姓名和他们教的课程数量。",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "geo",
        "question": "“福建”最高点有多高？",
        "query": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"福建\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"福建\";"
    },
    {
        "db_id": "imdb",
        "question": "在1990年之后发行了多少部关于“波斯人”的电影？",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"波斯人\" AND t3.release_year  >  1990;",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk>  ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<mask>  =  \"波斯人\" AND t3.<unk>  >  1990;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "“马林”拥有的文档的父文档的所有者是什么？",
        "query": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk>  =  'Marlin'"
    },
    {
        "db_id": "farm",
        "question": "那里有多少个农场？",
        "query": "SELECT count(*) FROM farm",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "poker_player",
        "question": "按照名字的字母顺序排列，所有人的姓名和生日是什么？",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "advertising_agencies",
        "question": "计算发票数量。",
        "query": "SELECT count(*) FROM Invoices",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "store_1",
        "question": "“浙江”州有多少客户？",
        "query": "SELECT count(*) FROM customers WHERE state = \"浙江\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"浙江\";"
    },
    {
        "db_id": "geo",
        "question": "中国最大的省是什么？",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "art_1",
        "question": "每年绘画的最大高度和宽度分别是什么？",
        "query": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
        "mask_query": "SELECT max(<unk>) ,  max(<unk>) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR"
    },
    {
        "db_id": "network_2",
        "question": "按年龄的顺序列出所有的人的姓名和职称。",
        "query": "SELECT name ,  job FROM Person ORDER BY name",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "college_1",
        "question": "找出教一门课的教授的名字。",
        "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
        "mask_query": "SELECT T2.emp_fname FROM <mask> AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1"
    },
    {
        "db_id": "flight_2",
        "question": "航空公司“深圳航空公司”的缩写是什么？",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"深圳航空公司\"",
        "mask_query": "SELECT <unk> FROM AIRLINES WHERE <unk>  =  \"深圳航空公司\""
    },
    {
        "db_id": "department_management",
        "question": "部门中有多少人年龄大于56岁？",
        "query": "SELECT count(*) FROM head WHERE age  >  56",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  56"
    },
    {
        "db_id": "sakila_1",
        "question": "这些电影有多少种语言？",
        "query": "SELECT count(DISTINCT language_id) FROM film",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "music_4",
        "question": "什么是不同的著名的发行日期？",
        "query": "SELECT distinct(Famous_Release_date) FROM artist",
        "mask_query": "SELECT distinct(<unk>) FROM <mask>"
    },
    {
        "db_id": "music_1",
        "question": "在“mp4”格式上或分辨率高于720的所有可用歌曲的id是什么？",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"mp4\" UNION SELECT <unk> FROM <mask> WHERE <unk>  >  720"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "显示没有预订的所有客户的姓名。",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "college_2",
        "question": "预算最高的系里有多少名讲师，他们的平均工资是多少？",
        "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
        "mask_query": "SELECT avg(T1.<unk>) ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示具有状态码“确认”的预订的公寓的不同公寓号码。",
        "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"确认\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"确认\""
    },
    {
        "db_id": "course_teach",
        "question": "列出没有被安排上课的老师的名字。",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE Teacher_id NOT IN (SELECT Teacher_id FROM <mask>)"
    },
    {
        "db_id": "protein_institute",
        "question": "显示机构类型，以及每种类型的机构的数量和总注册人数。",
        "query": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE",
        "mask_query": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE"
    },
    {
        "db_id": "movie_1",
        "question": "导演评分是5星级电影的导演名字是什么？返回这些电影的名称。",
        "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  5"
    },
    {
        "db_id": "election",
        "question": "统计来自人口在50000人以上的县的不同代表人数。",
        "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "mask_query": "SELECT count(DISTINCT T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.County_id  =  T2.<unk> WHERE T1.<unk>  >  50000"
    },
    {
        "db_id": "art_1",
        "question": "找到高度大于500且小于2000的画作的ID。",
        "query": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
        "mask_query": "SELECT <unk> FROM paintings WHERE <unk>  >  500 AND <unk>  <  2000"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "在所有项目中多少“专利”成果产出？",
        "query": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  '专利'",
        "mask_query": "SELECT count(*) FROM Project_outcomes WHERE <unk>  =  '专利'"
    },
    {
        "db_id": "race_track",
        "question": "比赛的名称和日期，以及举行比赛的赛道的名称？",
        "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "mask_query": "SELECT T1.name ,  T1.date ,  T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.track_id  =  T2.track_id"
    },
    {
        "db_id": "video_game",
        "question": "返回非任天堂开发的游戏的平均销量（百万）。",
        "query": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE developers != 'Nintendo'"
    },
    {
        "db_id": "climbing",
        "question": "显示登山者的名字和他们攀登的高山的高度。",
        "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示所有员工的ID和详细信息。",
        "query": "SELECT staff_id ,  staff_details FROM Staff",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "company_employee",
        "question": "显示“银行”或“零售”的公司名称。",
        "query": "SELECT Name FROM company WHERE Industry  =  \"银行业\" OR Industry  =  \"零售\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"银行业\" OR <unk>  =  \"零售\""
    },
    {
        "db_id": "coffee_shop",
        "question": "有多少会员有黑会员卡？",
        "query": "SELECT count(*) FROM member WHERE Membership_card  =  '黑卡'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '黑卡'"
    },
    {
        "db_id": "battle_death",
        "question": "战斗共有多少不同的结果？",
        "query": "SELECT count(DISTINCT RESULT) FROM battle",
        "mask_query": "SELECT count(DISTINCT RESULT) FROM <mask>"
    },
    {
        "db_id": "restaurant_1",
        "question": "哪个专业有2到30名学生？列出专业和学生人数。",
        "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> HAVING count(<unk>) BETWEEN 2 AND 30;"
    },
    {
        "db_id": "scholar",
        "question": "多少作者有ACL论文",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "mask_query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.venueid  =  t2.venueid JOIN <mask> AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;"
    },
    {
        "db_id": "inn_1",
        "question": "找到可用的“大床”的总数。",
        "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  '大床';",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE bedtype  =  '大床';"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "给出产品“君子兰”的颜色描述。",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"君子兰\"",
        "mask_query": "SELECT t2.<unk> FROM products AS t1 JOIN ref_colors AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"君子兰\""
    },
    {
        "db_id": "store_1",
        "question": "叫“袁” “熙”的员工的头衔、电话号码和雇佣日期是什么？",
        "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"袁\" AND last_name = \"熙\";",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk> = \"袁\" AND <unk> = \"熙\";"
    },
    {
        "db_id": "geo",
        "question": "在“新疆”边界最长的河流是什么？",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"新疆\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"新疆\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"新疆\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"新疆\" );"
    },
    {
        "db_id": "movie_1",
        "question": "找出所有评价过“飘”的评论者的名字。",
        "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  '飘'",
        "mask_query": "SELECT DISTINCT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  '飘'"
    },
    {
        "db_id": "movie_2",
        "question": "查找在任何电影院上映的电影的名称和及其对应的剧院名。",
        "query": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "mask_query": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "baseball_1",
        "question": "在1985年到1990年间，这位名字是“文”姓氏是“左”的球员总共赚了多少钱？",
        "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  '文' AND T2.name_last = '左' AND T1.year BETWEEN 1985 AND 1990;",
        "mask_query": "SELECT sum(T1.<mask>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk>  =  '文' AND T2.<unk> = '左' AND T1.<unk> BETWEEN 1985 AND 1990;"
    },
    {
        "db_id": "course_teach",
        "question": "32岁或33岁的老师的名字是什么？",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  32 OR <unk>  =  33"
    },
    {
        "db_id": "scholar",
        "question": "“唐纳德·克努斯”在哪一个期刊上发表了他的最后一篇论文？",
        "query": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"唐纳德·克努斯\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;",
        "mask_query": "SELECT DISTINCT t3.journalid  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"唐纳德·克努斯\" GROUP BY t3.journalid  ,  t3.<unk> ORDER BY t3.<unk> DESC;"
    },
    {
        "db_id": "twitter_1",
        "question": "找出用户名字中含有“往事随风”的人的名字和电子邮箱。",
        "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '往事随风'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> LIKE '往事随风'"
    },
    {
        "db_id": "election",
        "question": "代表人数最多的是哪一个政党？",
        "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "club_1",
        "question": "统计年龄在18岁以上的“赛车”俱乐部会员人数。",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t3.age  >  18",
        "mask_query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t3.age  >  18"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "找出价格超过2000的产品的订单细节。",
        "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "mask_query": "SELECT T1.<unk> FROM ORDER_ITEMS AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.Product_price  >  2000"
    },
    {
        "db_id": "warehouse_1",
        "question": "储存在最大容量仓库中的箱子的总价值是多少？",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
        "mask_query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "question": "哪些国家诞生了不止一个球员？",
        "query": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "icfp_1",
        "question": "“李” “航”发表了多少篇论文？",
        "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"李\" AND t1.lname  =  \"航\"",
        "mask_query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.<unk>  =  \"李\" AND t1.<unk>  =  \"航\""
    },
    {
        "db_id": "orchestra",
        "question": "显示不止一次演出的管弦乐队成立的年份。",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "academic",
        "question": "把论文包含关键字“关系型数据库”的数量最多的作者返回。",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"关系型数据库\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"关系型数据库\" GROUP BY t2.<unk> ORDER BY COUNT ( DISTINCT t3.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "election",
        "question": "返回按县名字母顺序降序排序的所有县名。",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "insurance_policies",
        "question": "告诉我每个结算案件的索赔日期和结算日期。",
        "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "department_store",
        "question": "供应“红色牛仔裤”的供应商的名字和电话号码是什么？",
        "query": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"红色牛仔裤\"",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.<unk>  =  T2.<unk> JOIN products AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"红色牛仔裤\""
    },
    {
        "db_id": "planet_1",
        "question": "发送多个包的所有客户的名字是什么？",
        "query": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  1;"
    },
    {
        "db_id": "chinook_1",
        "question": "有多少歌是“AAC”媒体类型？",
        "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC\"",
        "mask_query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"AAC\""
    },
    {
        "db_id": "phone_1",
        "question": "列出屏幕使用在10到15KB之间的手机的硬件型号和公司名称。",
        "query": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",
        "mask_query": "SELECT DISTINCT T2.<unk> , T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<mask> WHERE T1.<unk> BETWEEN 10 AND 15;"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "返回记录中最早的贷款日期。",
        "query": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "wine_1",
        "question": "“白”葡萄酿造的葡萄酒的名称和分数是多少？",
        "query": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"白\"",
        "mask_query": "SELECT T2.<unk> ,   T2.<unk> FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"白\""
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示具有最大交易数量的投资者的ID和投资者细节。",
        "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "哪些歌曲的评级低于所有“英文”歌曲的评级？",
        "query": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  '英文')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <   (SELECT min(<unk>) FROM <mask> WHERE <unk>  =  '英文')"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "列出所有学生的个人资料和地址类型说明。",
        "query": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "railway",
        "question": "展示管理者的不同国家。",
        "query": "SELECT DISTINCT Country FROM manager",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "orchestra",
        "question": "返回不是“美国”国籍的指挥人员的姓名。",
        "query": "SELECT Name FROM conductor WHERE Nationality != \"美国\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"美国\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "每个组织被给予的赠款总额是多少，其id是什么？",
        "query": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id",
        "mask_query": "SELECT sum(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "“香草”类产品的名称、颜色描述和产品描述是什么？",
        "query": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"香草\"",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  T1.<unk> FROM products AS T1 JOIN Ref_colors AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"香草\""
    },
    {
        "db_id": "tvshow",
        "question": "找到正在播放由“黄伟明”和“杨洁”执导的卡通片的电视频道的系列名称和国家。",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  '杨洁' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  '黄伟明'",
        "mask_query": "SELECT T1.<unk> ,  T1.country FROM <mask> AS T1 JOIN cartoon AS T2 ON T1.<unk> = T2.<unk> WHERE T2.directed_by  =  '杨洁' INTERSECT SELECT T1.<unk> ,  T1.country FROM <mask> AS T1 JOIN cartoon AS T2 ON T1.<unk> = T2.<unk> WHERE T2.directed_by  =  '黄伟明'"
    },
    {
        "db_id": "twitter_1",
        "question": "查找不止一次发推特的用户的姓名，以及他们发推特的次数。",
        "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "book_press",
        "question": "按出版日期从最近及远的顺序列出所有书名。",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "mask_query": "SELECT title FROM <mask> ORDER BY release_date DESC"
    },
    {
        "db_id": "academic",
        "question": "返回论文“使数据库可用”的作者的数量。",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"使数据库可用\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "formula_1",
        "question": "那些位置是1并获胜的车手的不同名字有什么？",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.<unk> = 1 AND T2.<unk> = 1"
    },
    {
        "db_id": "geo",
        "question": "最小面积的省是什么？",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "e_government",
        "question": "最常见组织形式的名称是什么？",
        "query": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM forms AS t1 JOIN party_forms AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "question": "统计“南方航空”航空公司航班抵达“虹桥”机场的数量。",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"南方航空\" AND T2.DestAirport  =  \"虹桥\"",
        "mask_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.<unk>  =  T1.<unk> WHERE T1.<unk>  =  \"南方航空\" AND T2.<unk>  =  \"虹桥\""
    },
    {
        "db_id": "musical",
        "question": "谁被提名过“金鸡奖”或“金像奖”奖项？",
        "query": "SELECT Nominee FROM musical WHERE Award  =  \"金鸡奖\" OR Award  =  \"金像奖\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"金鸡奖\" OR <unk>  =  \"金像奖\""
    },
    {
        "db_id": "hr_1",
        "question": "显示名字不包含“男”字的雇员的全名（姓氏和名字）、雇用日期、工资和部门编号，并将结果按部门编号升序排列。",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '男' ORDER BY department_id",
        "mask_query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM <mask> WHERE first_name NOT LIKE '男' ORDER BY department_id"
    },
    {
        "db_id": "city_record",
        "question": "请给我一张地区人口超过80万或低于50万的城市名单。",
        "query": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "mask_query": "SELECT <mask> FROM <mask> WHERE regional_population  >  10000000 UNION SELECT <mask> FROM <mask> WHERE regional_population  <  5000000"
    },
    {
        "db_id": "company_1",
        "question": "查找位于休斯敦的部门名称。",
        "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  '武汉'",
        "mask_query": "SELECT t1.dname FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  '武汉'"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "列出客户事件ID和日期，入住日期和属性ID。",
        "query": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "mask_query": "SELECT customer_event_id ,  <unk> ,  <unk> FROM customer_events"
    },
    {
        "db_id": "restaurant_bills",
        "question": "每位顾客点的菜总数是多少？列出客户名称和数量。",
        "query": "SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name",
        "mask_query": "SELECT T1.<unk> ,  sum(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "geo",
        "question": "“长江”经过的省的居民数是多少？",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" );"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "第一份成绩单是什么时候发布的？列出日期和细节。",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "返回订单数量最多的客户的姓氏、ID和电话号码。",
        "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“艾德·德斯蒙德”写了多少篇关于“语义分析”的论文？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"艾德·德斯蒙德\" AND t4.keyphrasename  =  \"语义解析\";",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN <mask> AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t1.paperid JOIN <mask> AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"艾德·德斯蒙德\" AND t4.keyphrasename  =  \"语义解析\";"
    },
    {
        "db_id": "book_1",
        "question": "所有客户的名字是什么，每个客户订购的书的总数是多少？",
        "query": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
        "mask_query": "SELECT T2.name ,  sum(T3.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idClient  =  T2.idClient JOIN <mask> AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient"
    },
    {
        "db_id": "bike_1",
        "question": "有多少次旅行没有结束在“厦门”？",
        "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"厦门\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> != \"厦门\""
    },
    {
        "db_id": "student_1",
        "question": "名单上每一个班的年级号和教室号码是多少？",
        "query": "SELECT DISTINCT classroom ,  grade FROM list",
        "mask_query": "SELECT DISTINCT classroom ,  grade FROM <mask>"
    },
    {
        "db_id": "candidate_poll",
        "question": "按字母顺序排列所有女性候选人的姓名(性别是“女”)？",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  '女' ORDER BY t1.name",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  '女' ORDER BY t1.name"
    },
    {
        "db_id": "theme_gallery",
        "question": "显示没有任何展览的艺术家名字。",
        "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "mask_query": "SELECT name FROM <mask> WHERE artist_id NOT IN (SELECT artist_id FROM <mask>)"
    },
    {
        "db_id": "climbing",
        "question": "显示分数最好的登山者攀登的最大高度。",
        "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "question": "有多少学生患有“猫”过敏？",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"猫\"",
        "mask_query": "SELECT count(*) FROM Has_allergy WHERE <unk>  =  \"猫\""
    },
    {
        "db_id": "phone_1",
        "question": "有多少型号没有WiFi功能？",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  '没有'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE wifi  =  '没有'"
    },
    {
        "db_id": "customers_and_orders",
        "question": "名为显示器的产品价格是多少？",
        "query": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Monitor\""
    },
    {
        "db_id": "academic",
        "question": "返回在2002年前在“VLDB”会议上有论文的作者。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"VLDB\" AND t4.<unk>  <  2002;"
    },
    {
        "db_id": "world_1",
        "question": "在“阿鲁巴”说多少种语言？",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"阿鲁巴\"",
        "mask_query": "SELECT COUNT(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"阿鲁巴\""
    },
    {
        "db_id": "battle_death",
        "question": "吨位为“T”的船舶造成的伤亡事故是什么？",
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  't'"
    },
    {
        "db_id": "ship_1",
        "question": "返回船长数量最少的等级。",
        "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT rank FROM <mask> GROUP BY rank ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "question": "没有专业排名第一的大学叫什么名字？",
        "query": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
        "mask_query": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1"
    },
    {
        "db_id": "dorm_1",
        "question": "有多少宿舍？",
        "query": "SELECT count(*) FROM dorm",
        "mask_query": "SELECT count(*) FROM dorm"
    },
    {
        "db_id": "csu_1",
        "question": "找到在“徐汇”、“上海”或“厦门”的校园名称。",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"徐汇\" AND county  =  \"上海\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"厦门\" AND county  =  \"厦门\"",
        "mask_query": "SELECT campus FROM campuses WHERE LOCATION  =  \"徐汇\" AND county  =  \"上海\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"厦门\" AND county  =  \"厦门\""
    },
    {
        "db_id": "sports_competition",
        "question": "俱乐部按字母顺序排列的不同区域是什么？",
        "query": "SELECT DISTINCT Region FROM club ORDER BY Region ASC",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "列出所有预订的订单日期。",
        "query": "SELECT Order_Date FROM BOOKINGS",
        "mask_query": "SELECT <unk> FROM BOOKINGS"
    },
    {
        "db_id": "advertising_agencies",
        "question": "客户的数量有多少？",
        "query": "SELECT count(*) FROM Clients",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "customers_and_orders",
        "question": "显示每个客户的客户名称、ID和订单数量。",
        "query": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  count(*) FROM Customer_orders AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "machine_repair",
        "question": "最老的技术人员的起始年是哪一年？",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "由工资高于或等于12000的员工完成的工作的历史信息是什么？",
        "query": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "mask_query": "SELECT * FROM  <mask> AS T1 JOIN <mask> AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000"
    },
    {
        "db_id": "academic",
        "question": "返回超过60篇包含关键词“关系型数据库”的论文的期刊。",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"关系型数据库\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t4.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<mask>  =  \"关系型数据库\" GROUP BY t3.<unk> HAVING COUNT ( DISTINCT t2.<unk> )  >  60;"
    },
    {
        "db_id": "candidate_poll",
        "question": "按出生日期顺序列出所有人的名字是什么？",
        "query": "SELECT name FROM people ORDER BY date_of_birth",
        "mask_query": "SELECT name FROM <mask> ORDER BY date_of_birth"
    },
    {
        "db_id": "tvshow",
        "question": "找出不使用“英语”的电视频道的像素纵横比和国家。",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != '英语'",
        "mask_query": "SELECT <unk> ,  country FROM tv_channel WHERE LANGUAGE != '英语'"
    },
    {
        "db_id": "bakery_1",
        "question": "同时购买蛋糕和饼干的收据号码是多少？",
        "query": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
        "mask_query": "SELECT T1.receipt FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\""
    },
    {
        "db_id": "insurance_fnol",
        "question": "查找没有首次丢失通知记录的用户的姓名。",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "mask_query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "db_id": "art_1",
        "question": "找到1920年后所有雕塑艺术家的出生年份。",
        "query": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM artists AS T1 JOIN sculptures AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  1920"
    },
    {
        "db_id": "store_product",
        "question": "找出总面积最大的3个区的总人口。",
        "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
        "mask_query": "SELECT sum(city_population) FROM <mask> ORDER BY city_area DESC LIMIT 3"
    },
    {
        "db_id": "tvshow",
        "question": "列出收视率排名前3位的电视剧。列出电视连续剧的剧集和收视率。",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 3;"
    },
    {
        "db_id": "orchestra",
        "question": "指挥家的名字以及他们指挥的管弦乐队叫什么？",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "我们有多少员工？",
        "query": "SELECT count(*) FROM Employees;",
        "mask_query": "SELECT count(*) FROM <mask>;"
    },
    {
        "db_id": "pilot_1",
        "question": "按年龄升序返回比平均年龄小的飞行员姓名。",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  (SELECT avg(<unk>) FROM <mask>) ORDER BY <unk>"
    },
    {
        "db_id": "imdb",
        "question": "“顾长卫”导演了多少部电影？",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"顾长卫\";",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk>  ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"顾长卫\";"
    },
    {
        "db_id": "boat_1",
        "question": "水手的名字是什么，这些水手的等级比任何叫路易斯的水手的等级都高？",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT min(<unk>) FROM <mask> WHERE <unk>  =  'Luis')"
    },
    {
        "db_id": "icfp_1",
        "question": "查找机构“浙江大学”发表的论文数量。",
        "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"浙江大学\"",
        "mask_query": "SELECT count(DISTINCT t1.<unk>) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.<unk>  =  \"浙江大学\""
    },
    {
        "db_id": "region_building",
        "question": "列出完工建筑最多的年份。",
        "query": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_1",
        "question": "找出所有教过某些课程的老师的名字和课程描述。",
        "query": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
        "mask_query": "SELECT T2.emp_fname ,  T3.crs_description FROM <mask> AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code"
    },
    {
        "db_id": "manufactory_1",
        "question": "价格最多是200的产品名称是什么？",
        "query": "SELECT name FROM products WHERE price  <=  200",
        "mask_query": "SELECT name FROM products WHERE price  <=  200"
    },
    {
        "db_id": "musical",
        "question": "列出没有演员的音乐剧名称。",
        "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "scholar",
        "question": "我应该读哪一篇关于“依存类型”的论文？",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"依存类型\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"依存类型\";"
    },
    {
        "db_id": "yelp",
        "question": "有多少用户在评论了“成都”的“爱尔兰酒吧”？",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"成都\" AND t2.category_name  =  \"爱尔兰酒吧\";",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"成都\" AND t2.<unk>  =  \"爱尔兰酒吧\";"
    },
    {
        "db_id": "hr_1",
        "question": "部门80的员工ID和职称是什么？",
        "query": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "mask_query": "SELECT T1.employee_id ,  T2.job_title FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80"
    },
    {
        "db_id": "baseball_1",
        "question": "计算球队“广州恒大队”在2009年季后赛中输掉的次数。",
        "query": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  '广州恒大队' AND T1.year = 2009;",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '广州恒大队' AND T1.<unk> = 2009;"
    },
    {
        "db_id": "e_commerce",
        "question": "所有未发货的订单的发票状态是什么？",
        "query": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "sakila_1",
        "question": "租了一部电影给一位名为“晓月”姓为“张”的顾客的职员的全名是什么？",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  '晓月' AND T3.last_name  =  '张'",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '晓月' AND T3.<unk>  =  '张'"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "展示大多数人选择旅游景点的交通方式。",
        "query": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "显示所有卡的ID、客户ID、卡类型代码、卡号。",
        "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM Customers_cards"
    },
    {
        "db_id": "products_for_hire",
        "question": "以“书”为子字符串的产品的日租金是多少？",
        "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '书'",
        "mask_query": "SELECT <unk> FROM Products_for_hire WHERE <unk> LIKE '书'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "不是其他集合的父集合的集合的名称是什么？",
        "query": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk>;"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "交易最多的账户ID是什么？",
        "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM Financial_transactions GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "question": "有多少种不同的过敏反应类型？",
        "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "mask_query": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
    },
    {
        "db_id": "scholar",
        "question": "最新“深度学习”的论文",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"深度学习\" ORDER BY t3.year DESC;",
        "mask_query": "SELECT DISTINCT t3.paperid  ,  t3.<unk> FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"深度学习\" ORDER BY t3.<unk> DESC;"
    },
    {
        "db_id": "store_1",
        "question": "按发票总额计算，前8个国家的名称是什么？那些总额有多大？",
        "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
        "mask_query": "SELECT <unk> ,  SUM(<unk>) FROM <mask> GROUP BY <unk> ORDER BY SUM(<unk>) DESC LIMIT 8;"
    },
    {
        "db_id": "small_bank_1",
        "question": "这三个有着最高储蓄余额的账户的名称和存款余额是什么？",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM accounts AS T1 JOIN savings AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 3"
    },
    {
        "db_id": "solvency_ii",
        "question": "产品的平均价格是多少？",
        "query": "SELECT avg(Product_Price) FROM Products",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“卢克·泽特莫耶尔”使用的主题",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"卢克·泽特莫耶尔\";",
        "mask_query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"卢克·泽特莫耶尔\";"
    },
    {
        "db_id": "aircraft",
        "question": "按年龄递减顺序列出所有飞行员的姓名。",
        "query": "SELECT Name FROM pilot ORDER BY Age DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "course_teach",
        "question": "按照老师名字的字母升序排列，显示老师的名字和安排他们教的课程。",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk>"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "列出文件的所有ID和收据日期。",
        "query": "SELECT document_id ,  receipt_date FROM Documents;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>;"
    },
    {
        "db_id": "allergy_1",
        "question": "学生居住在什么城市？",
        "query": "SELECT DISTINCT city_code FROM Student",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "culture_company",
        "question": "向出版商展示一本1989年出版的书和1990年出版的书。",
        "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
        "mask_query": "SELECT publisher FROM <mask> WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM <mask> WHERE YEAR  =  1990"
    },
    {
        "db_id": "college_3",
        "question": "找出名字包含“安”字的学生的名字。",
        "query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE 'a'",
        "mask_query": "SELECT DISTINCT <unk> FROM STUDENT WHERE <unk> LIKE 'a'"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议的所有论文的总引用。",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "e_learning",
        "question": "找出至少注册两门课的学生ID和个人姓名。",
        "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "hospital_1",
        "question": "找出在1号楼和区域编码是1的位置值班的护士的id。",
        "query": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1",
        "mask_query": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "最多数学生申请的学位的项目编号和学位摘要是什么？",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "找到每个城市的头衔为IT员工的数目？",
        "query": "SELECT count(*) ,  city FROM employees WHERE title  =  '运维职员' GROUP BY city",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> WHERE <unk>  =  '运维职员' GROUP BY <unk>"
    },
    {
        "db_id": "hr_1",
        "question": "显示每个雇员的雇员ID和他结束前一份工作的日期。",
        "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "mask_query": "SELECT employee_id ,  MAX(end_date) FROM <mask> GROUP BY employee_id"
    },
    {
        "db_id": "geo",
        "question": "“辽宁”最大的城市有多大？",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"辽宁\" ) AND state_name  =  \"辽宁\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk>  =  \"辽宁\" ) AND <unk>  =  \"辽宁\";"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示名为“琳琳”的雇员的id。",
        "query": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"琳琳\"",
        "mask_query": "SELECT employee_ID FROM <mask> WHERE employee_name  =  \"琳琳\""
    },
    {
        "db_id": "swimming",
        "question": "哪个国家既有容量大于60000个的体育场馆，又有容量小于50000个的体育场？",
        "query": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000",
        "mask_query": "SELECT country FROM <mask> WHERE capacity  >  60000 INTERSECT SELECT country FROM <mask> WHERE capacity  <  50000"
    },
    {
        "db_id": "university_basketball",
        "question": "查找不同附属类型学校的入学学生总数。",
        "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
        "mask_query": "SELECT sum(enrollment) ,  affiliation FROM <mask> GROUP BY affiliation"
    },
    {
        "db_id": "soccer_2",
        "question": "按数量递减查找每所大学参加选拔赛的学生人数。",
        "query": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "mask_query": "SELECT count(*) ,  <unk> FROM tryout GROUP BY <unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "store_1",
        "question": "有什么不同的体裁名字？",
        "query": "SELECT DISTINCT name FROM genres;",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "在名为最佳的集合中但不在名为“2000最佳”的子集中有哪些不同的文档对象ID？",
        "query": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"Best\" EXCEPT SELECT DISTINCT T3.<unk> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.<unk> =  T4.<unk> WHERE T4.<unk> = \"Best for 2000\""
    },
    {
        "db_id": "aircraft",
        "question": "显示国际旅客最多的机场的所有信息。",
        "query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
        "mask_query": "SELECT * FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "返回最短登顶周数专辑的发行日期。",
        "query": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "计算这家面包店出售的蛋糕种类。",
        "query": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE food  =  \"Cake\""
    },
    {
        "db_id": "inn_1",
        "question": "找一张有“大床”的房间。",
        "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"大床\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"大床\";"
    },
    {
        "db_id": "yelp",
        "question": "找出每天在“厦门”“摩洛哥”“餐厅”的总访问数",
        "query": "SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"厦门\" AND t2.category_name  =  \"摩洛哥\" AND t3.category_name  =  \"餐厅\" GROUP BY t4.day;",
        "mask_query": "SELECT t4.<unk>  ,  SUM ( t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"厦门\" AND t2.<unk>  =  \"摩洛哥\" AND t3.<unk>  =  \"餐厅\" GROUP BY t4.<unk>;"
    },
    {
        "db_id": "flight_1",
        "question": "显示“赵强”所拥有证件的所有飞机名称。",
        "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"赵强\"",
        "mask_query": "SELECT T3.<unk> FROM Employee AS T1 JOIN Certificate AS T2 ON T1.<unk>  =  T2.<unk> JOIN Aircraft AS T3 ON T3.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"赵强\""
    },
    {
        "db_id": "film_rank",
        "question": "从未在“中国”上映过的电影的名字和导演的名字。",
        "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  '中国')",
        "mask_query": "SELECT title ,  director FROM <mask> WHERE film_id NOT IN (SELECT film_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.market_id  =  T2.<unk> WHERE country  =  '中国')"
    },
    {
        "db_id": "wta_1",
        "question": "拥有超过50名球员的国家的代码是什么？",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  50"
    },
    {
        "db_id": "geo",
        "question": "中国有多少省流经最短的河流",
        "query": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "activity_1",
        "question": "找出“马”“文杰”参与的活动数量。",
        "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"文杰\" AND T1.lname  =  \"马\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"文杰\" AND T1.lname  =  \"马\""
    },
    {
        "db_id": "geo",
        "question": "人口最多的省的省会是什么？",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> );"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "名为“顶部集合”的集合子集的详细信息是什么？",
        "query": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"Top collection\";"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "包含“ALA”的酶的名称是什么？",
        "query": "SELECT name FROM enzyme WHERE name LIKE \"物\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"物\""
    },
    {
        "db_id": "sakila_1",
        "question": "所有评级为“R”的电影是什么？列出标题。",
        "query": "SELECT title FROM film WHERE rating  =  'R'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  'R'"
    },
    {
        "db_id": "formula_1",
        "question": "最小单圈时间的司机的名字和姓氏是什么？",
        "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.<unk> LIMIT 1"
    },
    {
        "db_id": "boat_1",
        "question": "名字以字母D开头的水手有多少？",
        "query": "SELECT COUNT(DISTINCT name) FROM Sailors WHERE name LIKE 'D%'",
        "mask_query": "SELECT COUNT(DISTINCT <unk>) FROM <mask> WHERE <unk> LIKE 'D%'"
    },
    {
        "db_id": "sports_competition",
        "question": "显示位置包含“右前锋”的球员的俱乐部名字。",
        "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"右前锋\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"右前锋\""
    },
    {
        "db_id": "ship_1",
        "question": "所有船长的姓名、级别和等级是多少？",
        "query": "SELECT name ,  CLASS ,  rank FROM captain",
        "mask_query": "SELECT name ,  CLASS ,  rank FROM <mask>"
    },
    {
        "db_id": "phone_market",
        "question": "显示带有“中国联通”或“中国移动”的运营商的手机名称。",
        "query": "SELECT Name FROM phone WHERE Carrier  =  \"中国联通\" OR Carrier  =  \"中国移动\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国联通\" OR <unk>  =  \"中国移动\""
    },
    {
        "db_id": "orchestra",
        "question": "返回按创立年份降序排列的乐团唱片公司的名称。",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "entrepreneur",
        "question": "按要求的申请金额降序排列返回企业家的重量。",
        "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC"
    },
    {
        "db_id": "car_1",
        "question": "在1980年之前生产或8缸的汽车最大MPG是多少？",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
        "mask_query": "SELECT mpg FROM CARS_DATA WHERE <unk>  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;"
    },
    {
        "db_id": "baseball_1",
        "question": "2000年在“长沙”市举行了多少比赛？",
        "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  '长沙';",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  2000 AND T2.<unk>  =  '长沙';"
    },
    {
        "db_id": "voter_1",
        "question": "“浙江”省最后的投票创建日期是什么时候？",
        "query": "SELECT max(created) FROM votes WHERE state  =  \"浙江\"",
        "mask_query": "SELECT max(<unk>) FROM votes WHERE <unk>  =  \"浙江\""
    },
    {
        "db_id": "game_1",
        "question": "有多少学生玩电子游戏？",
        "query": "SELECT count(DISTINCT StuID) FROM Plays_games",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Plays_games"
    },
    {
        "db_id": "roller_coaster",
        "question": "显示长度超过3300或高度超过100的过山车的状态。",
        "query": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  >  3300 OR <unk>  >  100"
    },
    {
        "db_id": "movie_2",
        "question": "播放电影数量最多的电影院叫什么名字？",
        "query": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "planet_1",
        "question": "经理的名字及其管理的货物数量是多少？",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk>;"
    },
    {
        "db_id": "allergy_1",
        "question": "过敏的类型有哪些？",
        "query": "SELECT DISTINCT allergytype FROM Allergy_type",
        "mask_query": "SELECT DISTINCT allergytype FROM Allergy_type"
    },
    {
        "db_id": "dorm_1",
        "question": "找出大多数学生居住的城市代码。",
        "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM student GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "question": "数一数比赛的次数。",
        "query": "SELECT count(*) FROM race",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "company_office",
        "question": "显示有超过一个公司办公室的建筑物的名称。",
        "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "scholar",
        "question": "“理查德·兰德尔”写了“CHI”中的什么论文？",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"理查德·兰德尔\" AND t4.venuename  =  \"chi\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t4 JOIN <mask> AS t3 ON t4.venueid  =  t3.venueid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"理查德·兰德尔\" AND t4.venuename  =  \"chi\";"
    },
    {
        "db_id": "imdb",
        "question": "“舒淇”在2002之前演过多少部电影？",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"舒淇\" AND t2.release_year  <  2002;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk>  ) FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"舒淇\" AND t2.<unk>  <  2002;"
    },
    {
        "db_id": "ship_1",
        "question": "最年轻的船长叫什么名字？",
        "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
        "mask_query": "SELECT name FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "计算预算代码的数量。",
        "query": "SELECT count(*) FROM Ref_budget_codes",
        "mask_query": "SELECT count(*) FROM Ref_budget_codes"
    },
    {
        "db_id": "store_product",
        "question": "人口最多的地区所有商店的名称是什么？",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
        "mask_query": "SELECT t1.store_name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM <mask> ORDER BY city_population DESC LIMIT 1)"
    },
    {
        "db_id": "tvshow",
        "question": "在电视上播放“白英”写的漫画的国家有哪些？",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  '白英'",
        "mask_query": "SELECT T1.country FROM <mask> AS T1 JOIN cartoon AS T2 ON T1.<unk> = T2.<unk> WHERE T2.written_by  =  '白英'"
    },
    {
        "db_id": "musical",
        "question": "显示至少有三个演员的音乐剧名称。",
        "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "sports_competition",
        "question": "列出球员的位置和每个位置球员的平均得分数。",
        "query": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION",
        "mask_query": "SELECT POSITION ,  avg(<unk>) FROM <mask> GROUP BY POSITION"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "员工角色代码是HR对应的描述是什么？",
        "query": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\"",
        "mask_query": "SELECT <unk> FROM Ref_staff_roles WHERE <unk>  =  \"HR\""
    },
    {
        "db_id": "region_building",
        "question": "按层数的升序列出建筑物的名称。",
        "query": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "world_1",
        "question": "在官方语言是“中文”的“亚洲”国家有哪些不同的城市？",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  \"T\" AND T2.Language  =  \"中文\" AND T1.Continent  =  \"亚洲\"",
        "mask_query": "SELECT DISTINCT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"T\" AND T2.<unk>  =  \"中文\" AND T1.<unk>  =  \"亚洲\""
    },
    {
        "db_id": "hr_1",
        "question": "查找不在某些部门工作的员工的id，这些部门的经理的id在100和200范围内。",
        "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "mask_query": "SELECT * FROM <mask> WHERE department_id NOT IN (SELECT department_id FROM <mask> WHERE manager_id BETWEEN 100 AND 200)"
    },
    {
        "db_id": "address_1",
        "question": "不在美国的男学生的id是什么？",
        "query": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.sex  =  'M' AND T1.<unk> != \"USA\""
    },
    {
        "db_id": "wta_1",
        "question": "在2013年和2016年中获胜的球员的名字是什么？",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR  =  2013 INTERSECT SELECT <unk> FROM <mask> WHERE YEAR  =  2016"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "文档数量最少的地点的名称和代码是什么？",
        "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "wine_1",
        "question": "按升序排列的葡萄酒的名称是什么？",
        "query": "SELECT DISTINCT Name FROM WINE ORDER BY price",
        "mask_query": "SELECT DISTINCT <unk> FROM WINE ORDER BY price"
    },
    {
        "db_id": "party_host",
        "question": "有最多主持人的聚会在什么地方？",
        "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "mask_query": "SELECT LOCATION FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "flight_4",
        "question": "找出包括“国际”一词的机场名称。",
        "query": "SELECT count(*) FROM airports WHERE name LIKE \"%国际%\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> LIKE \"%国际%\""
    },
    {
        "db_id": "device",
        "question": "请以设备计数的递减顺序显示软件平台。",
        "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "headphone_store",
        "question": "价格低于平均价格的耳机有哪些型号？",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "mask_query": "SELECT model FROM <mask> WHERE price  <  (SELECT avg(price) FROM <mask>)"
    },
    {
        "db_id": "planet_1",
        "question": "哪些员工有欧米茄3号的许可证？列出员工姓名。",
        "query": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T1.<mask> = T3.<unk> WHERE T3.<unk>  =  \"Omega III\";"
    },
    {
        "db_id": "scholar",
        "question": "“莎朗·戈德华特”编写的论文",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"莎朗·戈德华特\";",
        "mask_query": "SELECT DISTINCT t2.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"莎朗·戈德华特\";"
    },
    {
        "db_id": "store_1",
        "question": "查找拥有最多客户的雇员的全名。",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> , T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "谁在攻读“学士”学位课程？列出名字，中间名字，姓氏。",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  '本科'",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '本科'"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”在“PVLDB”上发表的论文数量。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"PVLDB\";",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "document_management",
        "question": "给出名字是“张伟的简历”的文档的章节标题。",
        "query": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"张伟的简历\"",
        "mask_query": "SELECT t2.<unk> FROM documents AS t1 JOIN document_sections AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"张伟的简历\""
    },
    {
        "db_id": "scholar",
        "question": "2016年在CVPR上发表了哪些关于“类一致多模态融合和二进制特征”应用于“RGB-D对象数据集”的文章？",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D对象数据集\" AND t3.title  =  \"类一致多模态融合和二进制特征\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D对象数据集\" AND t3.<unk>  =  \"类一致多模态融合和二进制特征\" AND t3.<unk>  =  2016 AND t4.venuename  =  \"CVPR\";"
    },
    {
        "db_id": "online_exams",
        "question": "按数量的倒顺列出所有学生的答案。",
        "query": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "network_1",
        "question": "“小军”有多少喜欢？",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"小军\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id WHERE T2.<unk>  =  \"小军\""
    },
    {
        "db_id": "department_store",
        "question": "返回所有客户和供应商的电话号码。",
        "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "mask_query": "SELECT <unk> FROM customers UNION SELECT <unk> FROM suppliers"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "返回属于以细节“l”的投资者的大量批次细节。",
        "query": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\"",
        "mask_query": "SELECT T2.<unk> FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"l\""
    },
    {
        "db_id": "geo",
        "question": "给我“四川”的城市",
        "query": "SELECT city_name FROM city WHERE state_name  =  \"四川\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\";"
    },
    {
        "db_id": "advertising_agencies",
        "question": "返回参加过会议或有发票的客户的ID和详细信息。",
        "query": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN meetings AS T2 ON T1.<unk>  =  T2.<unk> UNION SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN invoices AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "bike_1",
        "question": "平均有14辆以上可用自行车或在12月份安装自行车的车站的名称和ID是什么？",
        "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"十二月\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING avg(T2.<unk>)  >  14 UNION SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> LIKE \"十二月\""
    },
    {
        "db_id": "culture_company",
        "question": "“中国社会科学出版社”出版的一本书的公司名称是什么？",
        "query": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  \"中国社会科学出版社\"",
        "mask_query": "SELECT T1.company_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.publisher  =  \"中国社会科学出版社\""
    },
    {
        "db_id": "customers_and_orders",
        "question": "每个订单状态代码有多少订单？",
        "query": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM Customer_orders GROUP BY <unk>"
    },
    {
        "db_id": "address_1",
        "question": "距离大于平均值的城市的代码是什么？",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  (SELECT avg(<unk>) FROM <mask>)"
    },
    {
        "db_id": "entrepreneur",
        "question": "所有企业家的平均资金是多少？",
        "query": "SELECT avg(Money_Requested) FROM entrepreneur",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“琳达·夏皮罗”提交了哪些期刊？",
        "query": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"琳达·夏皮罗\";",
        "mask_query": "SELECT DISTINCT t2.journalid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.journalid  =  t2.journalid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"琳达·夏皮罗\";"
    },
    {
        "db_id": "scientist_1",
        "question": "有多少科学家没有分配给他们的项目？",
        "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
        "mask_query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM <mask>)"
    },
    {
        "db_id": "geo",
        "question": "与“四川”接壤的省的总人口是多少？",
        "query": "SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"四川\";",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"四川\";"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”的发表过论文的会议。",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "book_1",
        "question": "过去被订购过的书有哪些不同的书名？",
        "query": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
        "mask_query": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn"
    },
    {
        "db_id": "customers_and_orders",
        "question": "最多客户使用的付款方式代码是什么？",
        "query": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "返回对应描述为“演示”的模板的ID。",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"演示\"",
        "mask_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN <mask> AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"演示\""
    },
    {
        "db_id": "geo",
        "question": "“惠特尼山”位于哪里？",
        "query": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"whitney\";"
    },
    {
        "db_id": "concert_singer",
        "question": "音乐会最多的是哪一年？",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT YEAR FROM <mask> GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "question": "最多保持天数的摔跤运动员被淘汰的次数是多少？",
        "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM elimination AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "program_share",
        "question": "在“早上”时段和“晚上”时段都有节目播出的频道的所有者是谁？",
        "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"早上\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"晚上\"",
        "mask_query": "SELECT t1.owner FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.program_id  =  t2.program_id WHERE t2.<unk>  =  \"早上\" INTERSECT SELECT t1.owner FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.program_id  =  t2.program_id WHERE t2.<unk>  =  \"晚上\""
    },
    {
        "db_id": "school_bus",
        "question": "显示至少有两个40岁以上的司机的家乡城市。",
        "query": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2",
        "mask_query": "SELECT home_city FROM <mask> WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2"
    },
    {
        "db_id": "loan_1",
        "question": "查找同时有“存储”和“支票”帐户类型的客户的名字。",
        "query": "SELECT cust_name FROM customer WHERE acc_type  =  '存储' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  '支票'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '存储' INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  '支票'"
    },
    {
        "db_id": "poker_player",
        "question": "显示国籍不是“俄罗斯”的人的姓名。",
        "query": "SELECT Name FROM people WHERE Nationality != \"俄罗斯\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"俄罗斯\""
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "列出ID是2的文档的文档类型代码。",
        "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = 2;"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "有多少文件没有任何费用？",
        "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
    },
    {
        "db_id": "theme_gallery",
        "question": "显示2009年之前所有年份展览的平均、最低和最高门票价格。",
        "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
        "mask_query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM <mask> WHERE YEAR  <  2009"
    },
    {
        "db_id": "csu_1",
        "question": "1996年度“厦门大学”的所需要的学费是多少？",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"厦门大学\" AND T2.year  =  1996",
        "mask_query": "SELECT campusfee FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"厦门大学\" AND T2.year  =  1996"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "姓“兰兰”的员工报告了哪些问题？显示问题的ID。",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"兰兰\"",
        "mask_query": "SELECT T1.<unk> FROM problems AS T1 JOIN staff AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"兰兰\""
    },
    {
        "db_id": "yelp",
        "question": "2014年度的平均点评量是多少？",
        "query": "SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;",
        "mask_query": "SELECT AVG ( <unk> ) FROM <mask> WHERE YEAR  =  2014;"
    },
    {
        "db_id": "dog_kennels",
        "question": "被喂养最多数量的狗都有哪些品种？给我这个品种的名字。",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "government_shift",
        "question": "查找所有层类型代码及其相应的使用计数。",
        "query": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
        "mask_query": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code"
    },
    {
        "db_id": "bike_1",
        "question": "94107邮政编码地区中最常见的3种云覆盖是什么？",
        "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  94107 GROUP BY <unk> ORDER BY COUNT (*) DESC LIMIT 3"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "每个角色的代码及其对应的的员工数量是多少？",
        "query": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code",
        "mask_query": "SELECT role_code ,  count(*) FROM <mask> GROUP BY role_code"
    },
    {
        "db_id": "scholar",
        "question": "谁在2007年的CVPR发表了最多数量的论文",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.venueid  =  t2.venueid JOIN <mask> AS t1 ON t1.paperid  =  t2.paperid WHERE t2.<unk>  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
    },
    {
        "db_id": "store_product",
        "question": "在“安踏”店里卖什么产品？",
        "query": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"安踏\"",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"安踏\""
    },
    {
        "db_id": "club_leader",
        "question": "显示俱乐部领导的名字和他们加入的俱乐部的名字。",
        "query": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "restaurant_bills",
        "question": "显示客户的不同国籍，以及每个国籍的客户数量。",
        "query": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "formula_1",
        "question": "2008年“摩纳哥大奖赛”比赛平均最快圈速是多少？",
        "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"摩纳哥大奖赛\"",
        "mask_query": "SELECT avg(T2.fastestlapspeed) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid WHERE T1.<unk> = 2008 AND T1.<unk> = \"摩纳哥大奖赛\""
    },
    {
        "db_id": "address_1",
        "question": "列出所有州。",
        "query": "SELECT DISTINCT state FROM City",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "institution_sports",
        "question": "所有机构的最高和最低的注册人数是多少？",
        "query": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "查找2009“秋季”或2010“春季”课程。",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  '秋季' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  '春季' AND YEAR  =  2010",
        "mask_query": "SELECT <unk> FROM SECTION WHERE <unk>  =  '秋季' AND YEAR  =  2009 UNION SELECT <unk> FROM SECTION WHERE <unk>  =  '春季' AND YEAR  =  2010"
    },
    {
        "db_id": "voter_2",
        "question": "报告有超过2名学生的不同的导师。",
        "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2",
        "mask_query": "SELECT <unk> FROM STUDENT GROUP BY <unk> HAVING count(*)  >  2"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "显示没有任何帐户的客户的名字和姓氏。",
        "query": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "art_1",
        "question": "列出所有比1900年后创作的最长画作高的画作的ID。",
        "query": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
        "mask_query": "SELECT <unk> FROM paintings WHERE <unk>  >   (SELECT max(<unk>) FROM paintings WHERE YEAR  >  1900)"
    },
    {
        "db_id": "dorm_1",
        "question": "找到容量最大的宿舍的名字。",
        "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM dorm ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "activity_1",
        "question": "哪些学生有“教授”作为他们的导师？找出他们的学生ID。",
        "query": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.advisor WHERE T1.rank  =  \"Professor\""
    },
    {
        "db_id": "scholar",
        "question": "关于“低频”的论文",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"低频\" AND t4.venuename  =  \"NIPS\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"低频\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "对“中国”营销区域的描述是什么？",
        "query": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"中国\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国\""
    },
    {
        "db_id": "flight_2",
        "question": "我们有多少次航班？",
        "query": "SELECT count(*) FROM FLIGHTS",
        "mask_query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "db_id": "election",
        "question": "返回每个选举记录的所有信息。",
        "query": "SELECT * FROM election",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "movie_2",
        "question": "按分级排序的电影名称是什么？",
        "query": "SELECT title FROM movies ORDER BY rating",
        "mask_query": "SELECT title FROM movies ORDER BY rating"
    },
    {
        "db_id": "college_1",
        "question": "每所学校有多少个部门？",
        "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
        "mask_query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"
    },
    {
        "db_id": "driving_school",
        "question": "职员 “温”“子君” 什么时候离开公司的？",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = \"子君\" AND last_name = \"温\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"子君\" AND <unk> = \"温\";"
    },
    {
        "db_id": "geo",
        "question": "最小与“四川”接壤的省是什么？",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"四川\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"四川\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" );"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "授权文件销毁的所有员工的id是什么？",
        "query": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "mask_query": "SELECT DISTINCT <unk> FROM Documents_to_be_destroyed"
    },
    {
        "db_id": "store_1",
        "question": "列出“四川”,“成都”的发票数量。",
        "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"成都\" AND billing_state  =  \"四川\";",
        "mask_query": "SELECT COUNT(*) FROM <mask> WHERE <unk>  =  \"成都\" AND <unk>  =  \"四川\";"
    },
    {
        "db_id": "musical",
        "question": "那儿有多少演员？",
        "query": "SELECT count(*) FROM actor",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "wrestler",
        "question": "摔跤运动员的名字和位置是什么？",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "mask_query": "SELECT <unk> ,  LOCATION FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "段落数量最少的文档的ID是多少？",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT document_id FROM <mask> GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "college_1",
        "question": "每个系提供多少学分？",
        "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "mask_query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code"
    },
    {
        "db_id": "film_rank",
        "question": "制作最多电影的工作室的名字是什么？",
        "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "sports_competition",
        "question": "请显示俱乐部的名字和球员。",
        "query": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.Player_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "scholar",
        "question": "什么论文与“问答”系统相关？",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"问答\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"问答\";"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "找出“刘” “兰兰”和“王” “平之”都报告有问题的产品",
        "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"刘\" AND T3.staff_last_name = \"兰兰\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"王\" AND T3.staff_last_name = \"平之\"",
        "mask_query": "SELECT T2.<unk> FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.<unk> = T2.<unk> AND T1.<unk> = T3.<unk> WHERE T3.<unk> = \"刘\" AND T3.<unk> = \"兰兰\" INTERSECT SELECT T2.<unk> FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.<unk> = T2.<unk> AND T1.<unk> = T3.<unk> WHERE T3.<unk> = \"王\" AND T3.<unk> = \"平之\""
    },
    {
        "db_id": "geo",
        "question": "“青海”主要城市的人口是多少？",
        "query": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"青海\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150000 AND <unk>  =  \"青海\";"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "在旅游景点“电影城”拍的照片的名称和描述是什么？",
        "query": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"电影城\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"电影城\""
    },
    {
        "db_id": "online_exams",
        "question": "学生的回答有多少不同的评价？",
        "query": "SELECT count(DISTINCT Comments) FROM Student_Answers",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "pilot_record",
        "question": "显示飞行员的名字和他们飞行的飞行器型号。",
        "query": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "game_injury",
        "question": "对于每次受伤事故，找出比赛日期和比赛中受伤球员的姓名，并将结果按赛季的顺序进行排序。",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "mask_query": "SELECT T1.date ,  T2.player FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.season DESC"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "我们有多少客户？",
        "query": "SELECT count(*) FROM CUSTOMERS",
        "mask_query": "SELECT count(*) FROM CUSTOMERS"
    },
    {
        "db_id": "train_station",
        "question": "按其每年出入和交换量排序列出所有车站的名称和地点。",
        "query": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges",
        "mask_query": "SELECT name ,  LOCATION FROM <mask> ORDER BY <unk> ,  <unk>"
    },
    {
        "db_id": "apartment_rentals",
        "question": "给我所有房间里最小和最大的浴室数。",
        "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
        "mask_query": "SELECT min(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "有订单状态是“运送”的订单的客户姓名和日期是什么？",
        "query": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"运送\"",
        "mask_query": "SELECT t1.<unk> ,  t2.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> WHERE <unk>  =  \"运送\""
    },
    {
        "db_id": "program_share",
        "question": "不同频道所有者的数量是多少？",
        "query": "SELECT count(DISTINCT OWNER) FROM channel",
        "mask_query": "SELECT count(DISTINCT OWNER) FROM <mask>"
    },
    {
        "db_id": "theme_gallery",
        "question": "返回在2004发生的展览的主题、日期和出席情况。",
        "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004",
        "mask_query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004"
    },
    {
        "db_id": "match_season",
        "question": "哪所学校有中场球员和后卫球员？",
        "query": "SELECT College FROM match_season WHERE POSITION  =  \"中场\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"后卫\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE POSITION  =  \"中场\" INTERSECT SELECT <unk> FROM <mask> WHERE POSITION  =  \"后卫\""
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出所有不同的访问日期。",
        "query": "SELECT DISTINCT Visit_Date FROM VISITS",
        "mask_query": "SELECT DISTINCT <unk> FROM VISITS"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "找出“东方”商店地址所在的城市。",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"东方\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"东方\""
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "有多少产品被描述为“白色”或有“热”这个名称的特征？",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"白色\" OR t3.characteristic_name  =  \"热\"",
        "mask_query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> JOIN ref_colors AS t4 ON t1.<unk>  =  t4.<unk> WHERE t4.<unk>  =  \"白色\" OR t3.<unk>  =  \"热\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "列出所有没有文档的流程ID。",
        "query": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes",
        "mask_query": "SELECT <unk> FROM Business_processes EXCEPT SELECT <unk> FROM Documents_processes"
    },
    {
        "db_id": "flight_1",
        "question": "显示工资最低的三名员工的姓名。",
        "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "mask_query": "SELECT <unk> FROM Employee ORDER BY <unk> ASC LIMIT 3"
    },
    {
        "db_id": "car_1",
        "question": "哪个车型的马力最小？",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "db_id": "flight_1",
        "question": "能飞5000距离、至少5人能飞的飞机的名字和距离是多少？",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "mask_query": "SELECT T2.<unk> FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.<unk>  =  T1.<unk> WHERE T2.<unk>  >  5000 GROUP BY T1.<unk> ORDER BY count(*)  >=  5"
    },
    {
        "db_id": "pets_1",
        "question": "找到最年轻的狗的体重。",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "mask_query": "SELECT <unk> FROM pets ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "数据库中联系通道的平均时间跨度是多少？",
        "query": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "mask_query": "SELECT avg(<unk> - <unk>) FROM customer_contact_channels"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "招聘的所有信息是什么？",
        "query": "SELECT * FROM hiring",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "car_racing",
        "question": "哪个国家既有品牌是“道奇”的司机，也有品牌是“雪佛兰”的司机？",
        "query": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
        "mask_query": "SELECT t2.<mask> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<mask>  =  t2.country_id WHERE t1.<unk>  =  \"Dodge\" INTERSECT SELECT t2.<mask> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<mask>  =  t2.country_id WHERE t1.<unk>  =  \"Chevrolet\""
    },
    {
        "db_id": "art_1",
        "question": "这些雕塑叫什么名字？它们在哪里？",
        "query": "SELECT title ,  LOCATION FROM sculptures",
        "mask_query": "SELECT <unk> ,  LOCATION FROM sculptures"
    },
    {
        "db_id": "club_1",
        "question": "找出所有专业是“600”的“赛车”的成员的姓名和姓氏。",
        "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t3.major  =  \"600\"",
        "mask_query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t3.major  =  \"600\""
    },
    {
        "db_id": "icfp_1",
        "question": "找到作者“史俊文”写的论文的标题。",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"史\" AND t1.lname  =  \"俊文\"",
        "mask_query": "SELECT t3.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.<unk>  =  \"史\" AND t1.<unk>  =  \"俊文\""
    },
    {
        "db_id": "browser_web",
        "question": "与最多数量的网络加速器兼容的浏览器的id和名称是什么？",
        "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "question": "作者包括麦基翁但不包括兰博的论文的标题和id是什么？",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"%Mckeown%\" EXCEPT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"%Rambow%\""
    },
    {
        "db_id": "university_basketball",
        "question": "最早建立的那所大学的招生和初级会议是什么？",
        "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "mask_query": "SELECT enrollment ,  primary_conference FROM <mask> ORDER BY founded LIMIT 1"
    },
    {
        "db_id": "college_3",
        "question": "列出以学分升序排列的所有课程信息。",
        "query": "SELECT * FROM COURSE ORDER BY Credits",
        "mask_query": "SELECT * FROM COURSE ORDER BY <unk>"
    },
    {
        "db_id": "geo",
        "question": "“南昌”是哪个省的省会",
        "query": "SELECT state_name FROM state WHERE capital  =  \"南昌\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"南昌\";"
    },
    {
        "db_id": "academic",
        "question": "返回文章“使数据库可用”的摘要。",
        "query": "SELECT abstract FROM publication WHERE title  =  \"使数据库可用\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "university_rank",
        "question": "有超过两所招生人数少于3000人的大学的所在州是什么？",
        "query": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
        "mask_query": "SELECT state FROM <mask> WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2"
    },
    {
        "db_id": "music_1",
        "question": "来自“孟加拉国”但从未获得过高于7级的评级的不同艺术家的姓名是什么？",
        "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"孟加拉国\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  =  \"孟加拉国\" EXCEPT SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  7"
    },
    {
        "db_id": "address_1",
        "question": "有几个国家？",
        "query": "SELECT count(DISTINCT country) FROM City",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "singer",
        "question": "显示出生年份是1948年或1949年的歌手的名字",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  1948 OR <unk>  =  1949"
    },
    {
        "db_id": "book_1",
        "question": "显示所有作者的姓名和他们所写的书的数量。",
        "query": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
        "mask_query": "SELECT T1.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<mask> GROUP BY T1.<unk>"
    },
    {
        "db_id": "headphone_store",
        "question": "找出价格最低的耳机的型号、等级和结构。",
        "query": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
        "mask_query": "SELECT model ,  CLASS ,  construction FROM <mask> ORDER BY price LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "question": "飞行员平均年龄在35岁以下的飞机有哪些不同的飞机名，每个飞机有多少飞行员？",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "mask_query": "SELECT count(*) ,  <unk> FROM pilotskills GROUP BY <unk> HAVING avg(<unk>)  <  35"
    },
    {
        "db_id": "dog_kennels",
        "question": "哪些专家没有对狗进行任何治疗？列出专业人员的id、角色和电子邮件。",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "product_catalog",
        "question": "找出容量最小的产品的名称。",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM catalog_contents ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "tracking_orders",
        "question": "至少一次购买“食品”的顾客的名字是什么？",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"食品\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.<unk> = T2.<unk> AND T2.<unk> = T3.<unk> AND T3.<unk> = T4.<unk> WHERE T4.<unk> = \"食品\" GROUP BY T1.<unk> HAVING count(*)  >=  1"
    },
    {
        "db_id": "academic",
        "question": "把由“李政道”和“杨振宁”撰写的引用超过200的论文返回。",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"李政道\" AND t1.name  =  \"杨振宁\" AND t5.citation_num  >  200;",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<unk>  =  \"杨振宁\" AND t5.<unk>  >  200;"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "计算“简历”类型的模板数。",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"简历\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE template_type_code  =  \"简历\""
    },
    {
        "db_id": "flight_1",
        "question": "从“上海”到“海口”的航班平均价格是多少？",
        "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"上海\" AND destination  =  \"海口\"",
        "mask_query": "SELECT avg(<unk>) FROM Flight WHERE <unk>  =  \"上海\" AND <unk>  =  \"海口\""
    },
    {
        "db_id": "driving_school",
        "question": "名字是 “子君” ，姓氏是“温” 的员工的昵称是什么？",
        "query": "SELECT nickname FROM Staff WHERE first_name = \"子君\" AND last_name = \"温\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"子君\" AND <unk> = \"温\";"
    },
    {
        "db_id": "pilot_1",
        "question": "按的年龄升序排列找出所有年龄在30到40岁之间的飞行员的名字。",
        "query": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
        "mask_query": "SELECT <unk> FROM pilotskills WHERE <unk> BETWEEN 30 AND 40 ORDER BY <unk>"
    },
    {
        "db_id": "election_representative",
        "question": "有多少次选举？",
        "query": "SELECT count(*) FROM election",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "college_3",
        "question": "找到位置在“逸夫”大楼的部门的名称。",
        "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"逸夫\"",
        "mask_query": "SELECT <unk> FROM DEPARTMENT WHERE <unk>  =  \"逸夫\""
    },
    {
        "db_id": "college_2",
        "question": "给出最低预算的部门名称。",
        "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "什么时候发表了最新的NIPS论文？",
        "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.<unk> ORDER BY COUNT ( t1.paperid ) DESC;"
    },
    {
        "db_id": "book_review",
        "question": "按评论等级的升序列出书名。",
        "query": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC"
    },
    {
        "db_id": "scholar",
        "question": "谁是发表“句法分析”论文最多的作者？",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"句法分析\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN <mask> AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t1.paperid JOIN <mask> AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"句法分析\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "db_id": "party_people",
        "question": "1961年前或1959年前就职的部长是谁？",
        "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959",
        "mask_query": "SELECT minister FROM <mask> WHERE took_office  >  1961 OR took_office  <  1959"
    },
    {
        "db_id": "video_game",
        "question": "来自奥本学院的玩家玩的游戏有哪些不同的开发者？",
        "query": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"Auburn\""
    },
    {
        "db_id": "culture_company",
        "question": "按年份递减，所有图书的年份、书名和出版商是多少？",
        "query": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
        "mask_query": "SELECT YEAR ,  book_title ,  publisher FROM <mask> ORDER BY YEAR DESC"
    },
    {
        "db_id": "customers_and_orders",
        "question": "计算客户数量。",
        "query": "SELECT count(*) FROM Customers",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "pets_1",
        "question": "找出有宠物而且姓为“琳”的学生的ID。",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  '琳'",
        "mask_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  '琳'"
    },
    {
        "db_id": "yelp",
        "question": "“杭州”有多少网友评论“外婆家”",
        "query": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"杭州\" AND t1.name  =  \"外婆家\";",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"杭州\" AND t1.<unk>  =  \"外婆家\";"
    },
    {
        "db_id": "product_catalog",
        "question": "哪个目录内容最高？给我目录条目名称。",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM catalog_contents ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "显示至少两次参观的旅游景点的名称和ID。",
        "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN VISITS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "hr_1",
        "question": "所有工资低于工作职称是“机械工人”的员工工资的所有员工的雇员id和工作ID是什么？",
        "query": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  '机械工人' )",
        "mask_query": "SELECT employee_id ,  job_id FROM <mask> WHERE salary  <  ( SELECT min(salary) FROM <mask> WHERE job_id  =  '机械工人' )"
    },
    {
        "db_id": "warehouse_1",
        "question": "仓库的所有信息是什么？",
        "query": "SELECT * FROM warehouses",
        "mask_query": "SELECT * FROM warehouses"
    },
    {
        "db_id": "bakery_1",
        "question": "提供价格低于3美元的商品的ID。",
        "query": "SELECT id FROM goods WHERE price  <  3",
        "mask_query": "SELECT id FROM <mask> WHERE price  <  3"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "员工在“2003-04-19 15:06:20”和“2016-03-15 00:33:18”之内的角色是什么？",
        "query": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  '2003-04-19 15:06:20' AND <unk>  <  '2016-03-15 00:33:18'"
    },
    {
        "db_id": "small_bank_1",
        "question": "总共有多少个帐户？",
        "query": "SELECT count(*) FROM accounts",
        "mask_query": "SELECT count(*) FROM accounts"
    },
    {
        "db_id": "activity_1",
        "question": "不指导任何学生的教职工的ID是什么？",
        "query": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT advisor FROM <mask>"
    },
    {
        "db_id": "concert_singer",
        "question": "平均到场率最高的体育场的名称是什么，有多少容量？",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "mask_query": "SELECT name ,  capacity FROM <mask> ORDER BY average DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "question": "在东部和西部的两个省都有哪些警察机构同时管辖？",
        "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"冬\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"西\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LOCATION  =  \"冬\" INTERSECT SELECT <unk> FROM <mask> WHERE LOCATION  =  \"西\""
    },
    {
        "db_id": "college_1",
        "question": "每个系有多少学生？",
        "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",
        "mask_query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code"
    },
    {
        "db_id": "scholar",
        "question": "“迈克尔·乔丹”在2016有多少论文？",
        "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"迈克尔·乔丹\" AND t3.year  =  2016;",
        "mask_query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"迈克尔·乔丹\" AND t3.<unk>  =  2016;"
    },
    {
        "db_id": "department_store",
        "question": "返回所有价格在600到700之间的产品的名称和ID。",
        "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "mask_query": "SELECT <unk> ,  <unk> FROM products WHERE <unk> BETWEEN 600 AND 700"
    },
    {
        "db_id": "soccer_3",
        "question": "在胜局超过2的球员中，挣得最多的球员来自哪个国家？",
        "query": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  2 ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2",
        "question": "有多少球员有超过1000小时的训练？",
        "query": "SELECT count(*) FROM Player WHERE HS  >  1000",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  1000"
    },
    {
        "db_id": "conference",
        "question": "有来自加拿大工作人员参加的所有会议的名称是什么？",
        "query": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
        "mask_query": "SELECT T1.conference_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.conference_id = T2.conference_id JOIN <mask> AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\""
    },
    {
        "db_id": "hr_1",
        "question": "给出每个国家的城市ID和相应的城市数量。",
        "query": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "mask_query": "SELECT country_id ,  COUNT(*) FROM <mask> GROUP BY country_id"
    },
    {
        "db_id": "world_1",
        "question": "人口在160000到900000之间的城市是什么？",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> BETWEEN 160000 AND 900000"
    },
    {
        "db_id": "party_people",
        "question": "显示所有政党名称和党员人数。",
        "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "mask_query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN <mask> AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    {
        "db_id": "store_1",
        "question": "列出“浙江”省的发票数量和发票总额。",
        "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"浙江\";",
        "mask_query": "SELECT <unk> ,  COUNT(*) ,  SUM(<unk>) FROM <mask> WHERE <unk>  =  \"浙江\";"
    },
    {
        "db_id": "imdb",
        "question": "每年由“许鞍华”导演的电影数量是多少？",
        "query": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"许鞍华\" GROUP BY t3.release_year;",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk>  )  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"许鞍华\" GROUP BY t3.<unk>;"
    },
    {
        "db_id": "e_commerce",
        "question": "已经被订购的产品的平均价格是多少？",
        "query": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "mask_query": "SELECT avg(T1.<unk>) FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "vehicle_rent",
        "question": "返回与最多的租赁历史记录相对应的折扣名称。",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM renting_history AS T1 JOIN discount AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_2",
        "question": "作者不是“钱钟书”的书名是什么？",
        "query": "SELECT Title FROM book WHERE Writer != \"钱钟书\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"钱钟书\""
    },
    {
        "db_id": "flight_company",
        "question": "哪些国家拥有超过2个机场？",
        "query": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2",
        "mask_query": "SELECT country FROM <mask> GROUP BY country HAVING count(*)  >  2"
    },
    {
        "db_id": "dog_kennels",
        "question": "每次治疗的日期和操作专业人员的名字是什么？",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "planet_1",
        "question": "扎普·布兰尼根寄出的装在奥米克罗·珀尔西8号上的包裹数量是多少？",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
        "mask_query": "SELECT T1.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON  T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T1.<mask> = T3.<unk> JOIN <mask> AS T4 ON T3.<mask> = T4.<unk> WHERE T2.<unk> = \"Zapp Brannigan\" AND T4.<unk> = \"Omicron Persei 8\";"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "所有账户的账户ID、客户ID和账户名称是什么？",
        "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "sports_competition",
        "question": "按字母顺序降序，列出所有俱乐部名称。",
        "query": "SELECT name FROM club ORDER BY name DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "farm",
        "question": "给出每个竞赛的城市的年份和官方名称。",
        "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "college_2",
        "question": "找到没有任何预备课程的课程的ID？",
        "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "college_3",
        "question": "在分公司“管理部”的部门数量是多少？",
        "query": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"管理部\"",
        "mask_query": "SELECT count(*) FROM DEPARTMENT WHERE <unk>  =  \"管理部\""
    },
    {
        "db_id": "swimming",
        "question": "找出在记录中同时有“胜利”和“失败”结果的游泳运动员的名字。",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  '胜利' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  '输'",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  '胜利' INTERSECT SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  '输'"
    },
    {
        "db_id": "activity_1",
        "question": "统计在“逸夫”楼拥有办公室的“教授”的数量。",
        "query": "SELECT count(*) FROM Faculty WHERE Rank  =  \"教授\" AND building  =  \"逸夫\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"教授\" AND building  =  \"逸夫\""
    },
    {
        "db_id": "geo",
        "question": "什么河流流经与省会是“成都”接壤的省？",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"成都\" ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"成都\" ) );"
    },
    {
        "db_id": "city_record",
        "question": "城市“台州 (浙江)”在哪一年担任主办城市？",
        "query": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"台州 (浙江)\"",
        "mask_query": "SELECT T2.year FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id  =  T2.host_city WHERE T1.<mask>  =  \"台州 (浙江)\""
    },
    {
        "db_id": "machine_repair",
        "question": "每一个技术员的团队名称和起始年是什么？",
        "query": "SELECT Team ,  Starting_Year FROM technician",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "使用ImageNet数据集的论文有多少？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"%ImageNet%\";",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"%ImageNet%\";"
    },
    {
        "db_id": "e_learning",
        "question": "找到“课程ID、课程名称”课程的入学日期。",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"西班牙语\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"西班牙语\""
    },
    {
        "db_id": "dorm_1",
        "question": "找出每个专业学生的人数。",
        "query": "SELECT count(*) ,  major FROM student GROUP BY major",
        "mask_query": "SELECT count(*) ,  major FROM student GROUP BY major"
    },
    {
        "db_id": "concert_singer",
        "question": "列出2014年音乐会上所有歌手的名字。",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.singer_id  =  T2.singer_id JOIN <mask> AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "db_id": "store_1",
        "question": "哪个员工管理最多的人？列出员工的姓名，以及报告该员工管理的人数。",
        "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> , T2.<unk> ,  count(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> ORDER BY count(T1.<unk>) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "文档ID为7的草稿信息是什么？",
        "query": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = 7;"
    },
    {
        "db_id": "planet_1",
        "question": "王里奥寄出的所有包裹的总重量是多少？",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
        "mask_query": "SELECT sum(T1.<unk>) FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Leo Wong\";"
    },
    {
        "db_id": "program_share",
        "question": "在“晚上”时间播出多少个不同的节目？",
        "query": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  '晚上'",
        "mask_query": "SELECT count(DISTINCT program_id) FROM <mask> WHERE time_of_day  =  '晚上'"
    },
    {
        "db_id": "advertising_agencies",
        "question": "每次会议的开始和结束时间是什么，以及相应与会者客户和员工详细介绍的情况分别是什么？",
        "query": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> ,  T4.<unk> FROM meetings AS T1 JOIN clients AS T2 ON T1.<unk>  =  T2.<unk> JOIN staff_in_meetings AS T3 ON T1.<unk>  =  T3.<unk> JOIN staff AS T4 ON T3.<unk>  =  T4.<unk>"
    },
    {
        "db_id": "geo",
        "question": "与“浙江”临近省的最大的城市是什么？",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"浙江\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"浙江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"浙江\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"浙江\" );"
    },
    {
        "db_id": "candidate_poll",
        "question": "列出所有人的所有信息。",
        "query": "SELECT * FROM people",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "music_2",
        "question": "哪一个声乐类型被有成员名字是“俊杰”的乐队演奏得最多？",
        "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"俊杰\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"俊杰\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "question": "不同音乐流派的名字是什么？",
        "query": "SELECT Name FROM GENRE",
        "mask_query": "SELECT <unk> FROM GENRE"
    },
    {
        "db_id": "shop_membership",
        "question": "列出其家乡地址包含“肯塔基”一词的所有会员的卡号。",
        "query": "SELECT card_number FROM member WHERE Hometown LIKE \"西安\"",
        "mask_query": "SELECT card_number FROM <mask> WHERE <unk> LIKE \"西安\""
    },
    {
        "db_id": "bike_1",
        "question": "给我平均湿度低于70，至少有100个路线的地区邮编。",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  <  70 INTERSECT SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  100"
    },
    {
        "db_id": "flight_2",
        "question": "哪些航空公司有航班从“白云”起飞，而不是从“长沙”机场起飞？",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"白云\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"长沙\"",
        "mask_query": "SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"白云\" EXCEPT SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"长沙\""
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "每个交易名提供多少药？",
        "query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "mask_query": "SELECT trade_name ,  count(*) FROM <mask> GROUP BY trade_name"
    },
    {
        "db_id": "activity_1",
        "question": "所有“教员”的名字和姓氏是什么？",
        "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"教员\"",
        "mask_query": "SELECT fname ,  lname FROM <mask> WHERE <unk>  =  \"教员\""
    },
    {
        "db_id": "bakery_1",
        "question": "低于平均商品价格的商品的不同的ID和价格是什么？",
        "query": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
        "mask_query": "SELECT DISTINCT id ,  price FROM <mask> WHERE price  <  (SELECT avg(price) FROM <mask>)"
    },
    {
        "db_id": "scholar",
        "question": "少于5次引用的ACL论文有那些？",
        "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "mask_query": "SELECT DISTINCT t3.citingpaperid FROM <mask> AS t1 JOIN <mask> AS t3 ON t1.paperid  =  t3.citedpaperid JOIN <mask> AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;"
    },
    {
        "db_id": "sing_contest",
        "question": "由名为“高速公路”的参赛者表演的音质评分、节奏评分和舞台表演评分是多少？",
        "query": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'Freeway'"
    },
    {
        "db_id": "car_1",
        "question": "最高MPG的汽车型号是什么？",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.mpg DESC LIMIT 1;"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "列出既有“专利”产出又有“论文”产出的项目细节。",
        "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  '论文' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  '专利'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN Project_outcomes AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '论文' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN Project_outcomes AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '专利'"
    },
    {
        "db_id": "advertising_agencies",
        "question": "计算职员的数量。",
        "query": "SELECT count(*) FROM Staff",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "chinook_1",
        "question": "最长和最短的流行歌曲的持续时间是多少毫秒？",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"流行\"",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"流行\""
    },
    {
        "db_id": "music_2",
        "question": "返回在2012年创建的专辑的列表。",
        "query": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "mask_query": "SELECT * FROM <mask> WHERE YEAR  =  2012"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "返回“香草”类产品的描述和测量单位。",
        "query": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"香草\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM ref_product_categories WHERE <unk>  =  \"香草\""
    },
    {
        "db_id": "bbc_channels",
        "question": "查找不运行任何节目的频道的数量。",
        "query": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE channel_id NOT IN (SELECT channel_id FROM <mask>)"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "有多少学生没有参与任何行为事件？",
        "query": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
        "mask_query": "SELECT count(*) FROM STUDENTS WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "dog_kennels",
        "question": "列出所有专家的电子邮件、手机号码和家庭电话。",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM professionals"
    },
    {
        "db_id": "world_1",
        "question": "人口比“亚洲”任何国家都少的“非洲”国家有哪些？",
        "query": "SELECT Name FROM country WHERE Continent  =  \"非洲\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"亚洲\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"非洲\"  AND population  <  (SELECT min(population) FROM <mask> WHERE <unk>  =  \"亚洲\")"
    },
    {
        "db_id": "driving_school",
        "question": "哪个城市有最多的客户？",
        "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "“照片”产品的总订购量是多少？",
        "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"照片\"",
        "mask_query": "SELECT sum(T1.<unk>) FROM ORDER_ITEMS AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"照片\""
    },
    {
        "db_id": "movie_1",
        "question": "电影“让子弹飞”的导演是谁？",
        "query": "SELECT director FROM Movie WHERE title  = '让子弹飞'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  = '让子弹飞'"
    },
    {
        "db_id": "bike_1",
        "question": "邮政编码94103地区中持续时间和平均旅行持续时间一样长的所有路线的id是什么？",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >=  (SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  94103)"
    },
    {
        "db_id": "academic",
        "question": "返回每年发表在“VLDB”会议上的论文的总引用。",
        "query": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;",
        "mask_query": "SELECT t2.<unk>  ,  SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" GROUP BY t2.<unk>;"
    },
    {
        "db_id": "bike_1",
        "question": "对于每个邮政编码，选择那些平均可见度低于10的地区的邮政编码。",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  <  10"
    },
    {
        "db_id": "yelp",
        "question": "在“成都”的“星巴克”附近找出“意大利”“餐厅”",
        "query": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"成都\" AND t3.category_name  =  \"意大利\" AND t4.category_name  =  \"餐厅\" AND t2.neighbourhood_name  =  \"星巴克\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"成都\" AND t3.<unk>  =  \"意大利\" AND t4.<unk>  =  \"餐厅\" AND t2.<unk>  =  \"星巴克\";"
    },
    {
        "db_id": "loan_1",
        "question": "具有最高信用评分的客户相对应的名字、帐户类型和帐户余额是什么？",
        "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "baseball_1",
        "question": "哪3位球员赢得了最多的球员奖？列出他们的全名和id。",
        "query": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 3;"
    },
    {
        "db_id": "wedding",
        "question": "为最近开办的三个教堂显示名字和开放年。",
        "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
        "mask_query": "SELECT name ,  open_date FROM <mask> ORDER BY open_date DESC LIMIT 3"
    },
    {
        "db_id": "restaurants",
        "question": "在“泉州”有什么好的餐馆？",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"泉州\" AND t1.rating  >  2.5;",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"泉州\" AND t1.rating  >  2.5;"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示没有订单的所有产品名称。",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "geo",
        "question": "最长的河流经过哪个省？",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "在邮件结果中同时具有“预定”邮件快照和具有“无回应”邮件快照的客户的姓名和支付方法是什么？",
        "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  '预定' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  '无回应'",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '预定' INTERSECT SELECT T2.<unk> ,  T2.<unk> FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '无回应'"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "哪个楼盘的价格是卖主要求的最低价格？列出ID和价格。",
        "query": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 1;"
    },
    {
        "db_id": "car_racing",
        "question": "找出所有司机积分超过150的所在的国家。",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Country_ID  =  T2.<unk> WHERE T2.<unk>  >  150"
    },
    {
        "db_id": "hr_1",
        "question": "那些没有佣金，工资在7000到120000之间，而且在部门50工作的员工的电子邮件是什么？",
        "query": "SELECT email FROM employees WHERE commission_pct  =  \"空\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "mask_query": "SELECT email FROM <mask> WHERE commission_pct  =  \"空\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
    },
    {
        "db_id": "shop_membership",
        "question": "那些从未在任何分支注册过的会员的名字是什么？",
        "query": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "mask_query": "SELECT name FROM <mask> WHERE member_id NOT IN (SELECT member_id FROM <mask>)"
    },
    {
        "db_id": "hr_1",
        "question": "显示员工的职称和平均工资。",
        "query": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "mask_query": "SELECT job_title ,  AVG(salary) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"
    },
    {
        "db_id": "bakery_1",
        "question": "按字母顺序排列的顾客的姓氏是什么？",
        "query": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "swimming",
        "question": "举办最多赛事的体育场叫什么名字？",
        "query": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sports_competition",
        "question": "每一种比赛的类型和所在的国家是什么？",
        "query": "SELECT Competition_type ,  Country FROM competition",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "world_1",
        "question": "有多少人生活在不讲“英语”的国家？",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"英语\")",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk> NOT IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英语\")"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示所有发票状态代码和详细信息以及相应的客户ID和详细信息及其代理的ID和详细信息。",
        "query": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> ,  T2.<unk> ,  T3.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "museum_visit",
        "question": "会员级别不高于4的游客的平均年龄是多少？",
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "mask_query": "SELECT avg(age) FROM <mask> WHERE <unk>  <=  4"
    },
    {
        "db_id": "restaurant_bills",
        "question": "列出没有任何订单的客户的姓名。",
        "query": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
        "mask_query": "SELECT name FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "party_people",
        "question": "至少有2个项目的政党名称是什么？",
        "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.party_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "candidate_poll",
        "question": "统计候选人人数。",
        "query": "SELECT count(*) FROM candidate",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "warehouse_1",
        "question": "找出所有仓库的平均容量和总容量。",
        "query": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
        "mask_query": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses"
    },
    {
        "db_id": "college_1",
        "question": "查找所有至少有两节课的教室提供的课程数量。",
        "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
        "mask_query": "SELECT count(*) ,  class_room FROM <mask> GROUP BY class_room HAVING count(*)  >=  2"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "查找详细信息中包含“拿铁”或“美式咖啡”的产品的细节",
        "query": "SELECT product_details FROM products WHERE product_details LIKE \"%拿铁%\" OR product_details LIKE \"%美式咖啡%\"",
        "mask_query": "SELECT <unk> FROM products WHERE <unk> LIKE \"%拿铁%\" OR <unk> LIKE \"%美式咖啡%\""
    },
    {
        "db_id": "insurance_policies",
        "question": "哪些客户没有任何政策？找到这些客户的详细信息。",
        "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
        "mask_query": "SELECT customer_details FROM <mask> EXCEPT SELECT T1.customer_details FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "geo",
        "question": "给我中国的城市",
        "query": "SELECT city_name FROM city;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "club_1",
        "question": "统计“杭州”俱乐部的数量。",
        "query": "SELECT count(*) FROM club WHERE clublocation  =  \"杭州\"",
        "mask_query": "SELECT count(*) FROM club WHERE clublocation  =  \"杭州\""
    },
    {
        "db_id": "district_spokesman",
        "question": "找出面积大于平均面积的地区的名称和人口数。",
        "query": "SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)",
        "mask_query": "SELECT name ,  population FROM <mask> WHERE area_km  >  (SELECT avg(area_km) FROM <mask>)"
    },
    {
        "db_id": "company_employee",
        "question": "总部设在“中国”的公司有多少？",
        "query": "SELECT count(*) FROM company WHERE Headquarters  =  '中国'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '中国'"
    },
    {
        "db_id": "flight_2",
        "question": "“深圳航空公司”航空公司有多少航班？",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"深圳航空公司\"",
        "mask_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> = \"深圳航空公司\""
    },
    {
        "db_id": "formula_1",
        "question": "参加澳大利亚大奖赛但没参加中国大奖赛的所有车手的名字和姓氏是什么？",
        "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"澳大利亚大奖赛\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"中国大奖赛\"",
        "mask_query": "SELECT T3.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid JOIN <mask> AS T3 ON T2.driverid = T3.driverid WHERE T1.<unk> = \"澳大利亚大奖赛\" EXCEPT SELECT T3.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid JOIN <mask> AS T3 ON T2.driverid = T3.driverid WHERE T1.<unk> = \"中国大奖赛\""
    },
    {
        "db_id": "customers_and_orders",
        "question": "客户有哪些不同的付款方式？",
        "query": "SELECT DISTINCT payment_method_code FROM Customers",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "election_representative",
        "question": "哪些州至少有两名代表？",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "flight_4",
        "question": "找出以“东方”开始的航空公司所在的国家的名字。",
        "query": "SELECT country FROM airlines WHERE name LIKE \"%东方%\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"%东方%\""
    },
    {
        "db_id": "customer_deliveries",
        "question": "按字母顺序列出所有路线的名称。",
        "query": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "manufactory_1",
        "question": "找出不同总部城市的公司生产的不同产品的数量。",
        "query": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "mask_query": "SELECT count(DISTINCT T1.name) ,  T2.<unk> FROM products AS T1 JOIN manufacturers AS T2 ON T1.<unk>  =  T2.code GROUP BY T2.<unk>"
    },
    {
        "db_id": "scholar",
        "question": "与“深度学习”相关的论文有多少？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"深度学习\";",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"深度学习\";"
    },
    {
        "db_id": "movie_2",
        "question": "有多少不同的电影院？",
        "query": "SELECT count(DISTINCT name) FROM movietheaters",
        "mask_query": "SELECT count(DISTINCT name) FROM movietheaters"
    },
    {
        "db_id": "county_public_safety",
        "question": "显示犯罪率低于100的省的城市名称。",
        "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)",
        "mask_query": "SELECT name FROM <mask> WHERE county_id IN (SELECT county_id FROM <mask> WHERE <unk>  <  100)"
    },
    {
        "db_id": "game_injury",
        "question": "哪个体育场名称包含子串“中心”？",
        "query": "SELECT name FROM stadium WHERE name LIKE \"中心\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"中心\""
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "包含文件“御书”的项目的细节是什么？",
        "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"御书\"",
        "mask_query": "SELECT T1.project_details FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"御书\""
    },
    {
        "db_id": "geo",
        "question": "“广东”的河流是什么？",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"广东\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"广东\";"
    },
    {
        "db_id": "geo",
        "question": "“四川”有多少个主要城市",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"四川\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  >  150000 AND <unk>  =  \"四川\";"
    },
    {
        "db_id": "club_1",
        "question": "找到拥有最多“女性”学生的俱乐部的名字。",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "question": "所有订单的ID和对应的客户名称是什么？",
        "query": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
        "mask_query": "SELECT T1.idOrder ,  T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "warehouse_1",
        "question": "按价值排序的所有箱子的代码和存储物是什么？",
        "query": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
        "mask_query": "SELECT code ,  CONTENTS FROM boxes ORDER BY value"
    },
    {
        "db_id": "region_building",
        "question": "返回名为“阿布鲁兹诺”的区域中每个建筑的层数。",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Abruzzo\""
    },
    {
        "db_id": "student_assessment",
        "question": "按照注册日期的顺序列出注册“统计学”课程的学生的ID。",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"统计学\" ORDER BY T2.registration_date",
        "mask_query": "SELECT T2.<unk> FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"统计学\" ORDER BY T2.<unk>"
    },
    {
        "db_id": "hr_1",
        "question": "对于那些没有任何佣金的员工，他们的全名（名字和姓氏）和薪水是多少？",
        "query": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"空\"",
        "mask_query": "SELECT first_name ,  last_name ,  salary FROM  <mask> WHERE commission_pct  =  \"空\""
    },
    {
        "db_id": "manufactory_1",
        "question": "对于每个制造商的名字，他们最贵的产品的名称和价格是什么？",
        "query": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "mask_query": "SELECT T1.<unk> ,  max(T1.<unk>) ,  T2.name FROM products AS T1 JOIN <mask> AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "对于ID为10的问题，返回其问题日志的ID和日期。",
        "query": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "mask_query": "SELECT <unk> ,  <unk> FROM problem_log WHERE <unk> = 10"
    },
    {
        "db_id": "geo",
        "question": "最小省的省会是什么？",
        "query": "SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "那位姓“小平”的老师住的地址的邮政编码是什么？",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"小平\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"小平\""
    },
    {
        "db_id": "program_share",
        "question": "找出“早上”时间播出的频道的名字。",
        "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  '早上'",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  '早上'"
    },
    {
        "db_id": "advertising_agencies",
        "question": "返回员工数量最多的代理机构的ID和详细信息。",
        "query": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "中国最长的河流是什那一条？",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "dog_kennels",
        "question": "所有品种类型和大小的组合是什么？",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "mask_query": "SELECT DISTINCT <unk> ,  <unk> FROM dogs"
    },
    {
        "db_id": "geo",
        "question": "“安徽”的主要城市在哪里",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"安徽\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150000 AND <unk>  =  \"安徽\";"
    },
    {
        "db_id": "car_1",
        "question": "名为“一汽”的汽车制造商生产的不同汽车型号是多少？",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  '一汽';",
        "mask_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '一汽';"
    },
    {
        "db_id": "store_1",
        "question": "“宋” “志鹏”是哪家公司的客户？",
        "query": "SELECT company FROM customers WHERE first_name = \"宋\" AND last_name = \"志鹏\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"宋\" AND <unk> = \"志鹏\";"
    },
    {
        "db_id": "video_game",
        "question": "每家专营店有多少个游戏？",
        "query": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "music_1",
        "question": "“mp3”格式且分辨率低于800的所有歌曲的平均歌曲持续时间是多长？",
        "query": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "mask_query": "SELECT avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"mp3\" AND T2.<unk>   <  800"
    },
    {
        "db_id": "solvency_ii",
        "question": "按价格升序列出产品名称。",
        "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "wine_1",
        "question": "在2010之前生产葡萄酒最多的葡萄产地是什么地区？",
        "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "什么省有最多的人？",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "academic",
        "question": "把“北京理工大学”发表的论文的总引用返回。",
        "query": "SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT SUM ( t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t3.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "phone_1",
        "question": "哪种型号的RAM最少？列出模型名称和RAM的数量。",
        "query": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1;"
    },
    {
        "db_id": "candidate_poll",
        "question": "找出支持率低于反对率的候选人的姓名。",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"
    },
    {
        "db_id": "college_1",
        "question": "代码为师范的学校有多少个不同的位置？",
        "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  '师范'",
        "mask_query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  '师范'"
    },
    {
        "db_id": "gymnast",
        "question": "体操运动员最多的家乡是什么？",
        "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "什么省与人口最少的省接壤？",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "账户名称“900”的客户全名是什么？",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"900\""
    },
    {
        "db_id": "soccer_3",
        "question": "返回挣钱最多的玩家的名字。",
        "query": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "question": "最近的治疗费用是多少？",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "说出中国的所有的省会",
        "query": "SELECT DISTINCT capital FROM state;",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>;"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "哪个位置的名字包含“大厦”这个词？",
        "query": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%大厦%\"",
        "mask_query": "SELECT <unk> FROM LOCATIONS WHERE <unk> LIKE \"%大厦%\""
    },
    {
        "db_id": "election",
        "question": "计算不同的州长的人数。",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "dorm_1",
        "question": "找出具有性别是“X”的学生宿舍的平均容量和总容量。",
        "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "mask_query": "SELECT avg(<unk>) ,  sum(<unk>) FROM dorm WHERE <unk>  =  'X'"
    },
    {
        "db_id": "company_1",
        "question": "有多少女性家属？",
        "query": "SELECT count(*) FROM dependent WHERE sex  =  '女'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE sex  =  '女'"
    },
    {
        "db_id": "boat_1",
        "question": "没有预定船只的水手的姓名和id是什么？",
        "query": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "company_office",
        "question": "哪个行业有最多的公司？",
        "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "phone_market",
        "question": "有多少手机？",
        "query": "SELECT count(*) FROM phone",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "icfp_1",
        "question": "查找来自机构为“福州大学”的作者发表的论文数量。",
        "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"福州大学\"",
        "mask_query": "SELECT count(DISTINCT t1.<unk>) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.<unk>  =  \"福州大学\""
    },
    {
        "db_id": "world_1",
        "question": "说“英语”的人口最多的城市是什么？",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"英语\" ORDER BY T1.Population DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英语\" ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示所有角色名称是“人力资源”或“经理”的员工的ID。",
        "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"人力资源\" OR T2.role_name  =  \"经理\"",
        "mask_query": "SELECT T1.employee_id FROM <mask> AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"人力资源\" OR T2.role_name  =  \"经理\""
    },
    {
        "db_id": "sakila_1",
        "question": "名为“天天”的客户住在哪里？她的电子邮件是什么？",
        "query": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  '天天'",
        "mask_query": "SELECT T2.<mask> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> WHERE T1.<unk>  =  '天天'"
    },
    {
        "db_id": "district_spokesman",
        "question": "40岁以下的发言人有哪些名字和观点？",
        "query": "SELECT name ,  points FROM spokesman WHERE age  <  40",
        "mask_query": "SELECT name ,  points FROM <mask> WHERE age  <  40"
    },
    {
        "db_id": "dorm_1",
        "question": "按年龄排序的所有未在“香港”生活的学生的姓氏和名字是什么？",
        "query": "SELECT fname ,  lname FROM student WHERE city_code != '香港' ORDER BY age",
        "mask_query": "SELECT fname ,  lname FROM student WHERE <unk> != '香港' ORDER BY age"
    },
    {
        "db_id": "flight_2",
        "question": "给出最少的航班数的机场代码。",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> OR T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "roller_coaster",
        "question": "过山车的长度和高度是多少？",
        "query": "SELECT LENGTH ,  Height FROM roller_coaster",
        "mask_query": "SELECT LENGTH ,  <unk> FROM <mask>"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "每个地方有多少商店？",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "mask_query": "SELECT count(*) ,  LOCATION FROM <mask> GROUP BY LOCATION"
    },
    {
        "db_id": "music_2",
        "question": "最常用的乐器是什么？",
        "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "gas_company",
        "question": "没有银行业的公司的总部是什么？",
        "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  '银行业'",
        "mask_query": "SELECT headquarters FROM <mask> EXCEPT SELECT headquarters FROM <mask> WHERE main_industry  =  '银行业'"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "所有的位置代码和位置名称是什么？",
        "query": "SELECT location_code ,  location_name FROM Ref_locations",
        "mask_query": "SELECT location_code ,  location_name FROM Ref_locations"
    },
    {
        "db_id": "device",
        "question": "有多于一种设备库存的商店的名字叫什么？",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "train_station",
        "question": "显示所有火车的名称、时间和服务。",
        "query": "SELECT name ,  TIME ,  service FROM train",
        "mask_query": "SELECT name ,  TIME ,  service FROM <mask>"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "对于命名为“最佳”的集合，文档数最多的集合的名称和ID是什么，它有多少文档？",
        "query": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"Best\" GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "dog_kennels",
        "question": "找出做过两种或更多种治疗的专业人员的ID和手机号码。",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "chinook_1",
        "question": "在“德国”居住的有发票的客户地址是什么？",
        "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"德国\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.country  =  \"德国\""
    },
    {
        "db_id": "address_1",
        "question": "找出每个城市的学生人数。",
        "query": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "company_office",
        "question": "公司的平均利润是多少？",
        "query": "SELECT avg(Profits_billion) FROM Companies",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "company_office",
        "question": "以市场价值递减的顺序列出公司名称。",
        "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "music_2",
        "question": "拥有“分享”一共有多少首歌？",
        "query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"分享\"",
        "mask_query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"分享\""
    },
    {
        "db_id": "academic",
        "question": "返回“PVLDB”中超过100篇论文中包含的关键词。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t4.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\" GROUP BY t1.<mask> HAVING COUNT ( DISTINCT t2.<unk> )  >  100;"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "每份成绩单的日期和细节是什么？",
        "query": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "dorm_1",
        "question": "有多少学生？",
        "query": "SELECT count(*) FROM student",
        "mask_query": "SELECT count(*) FROM student"
    },
    {
        "db_id": "entertainment_awards",
        "question": "展示不同类型在2007的艺术节中被提名的艺术品。",
        "query": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  =  2007"
    },
    {
        "db_id": "device",
        "question": "按名称的字母升序排列的商店的名称和位置是什么？",
        "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC",
        "mask_query": "SELECT <unk> ,  LOCATION FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "customers_and_orders",
        "question": "所有产品的最低、平均和最高价格是多少？",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "mask_query": "SELECT min(<unk>) ,  avg(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "insurance_fnol",
        "question": "客户ID的有序列表是什么？",
        "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
        "mask_query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC"
    },
    {
        "db_id": "boat_1",
        "question": "找到预订多条船的水手的id和姓名。",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "与份额数大于100且类型代码为“PUR”的交易相关的批次的批次细节是什么？",
        "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"",
        "mask_query": "SELECT T1.<unk> FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.<unk>  =  T2.<unk> JOIN TRANSACTIONS AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  >  100 AND T3.<unk>  =  \"PUR\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "哪一套公寓的总房数量最多？返回公寓类型代码，浴室的数量和卧室的数量。",
        "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> GROUP BY <unk> ORDER BY sum(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "browser_web",
        "question": "网络客户端加速器支持多少种不同的客户端？",
        "query": "SELECT count(DISTINCT client) FROM web_client_accelerator",
        "mask_query": "SELECT count(DISTINCT client) FROM web_client_accelerator"
    },
    {
        "db_id": "museum_visit",
        "question": "查找会员级别高于4的游客的姓名和会员级别，并按年龄从高到低进行排序。",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "mask_query": "SELECT name ,  <unk> FROM <mask> WHERE <unk>  >  4 ORDER BY age DESC"
    },
    {
        "db_id": "music_1",
        "question": "找出所有至少有一首“英文”歌曲的艺术家的名字和作品数量。",
        "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"英文\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英文\" GROUP BY T2.<unk> HAVING count(*)  >=  1"
    },
    {
        "db_id": "game_1",
        "question": "哪项运动获得奖学金的学生参加最多？",
        "query": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  \"Y\" GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  \"Y\" GROUP BY sportname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "员工有多少种角色？",
        "query": "SELECT count(DISTINCT role_code) FROM Project_Staff",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "所有模板类型的类型代码和描述是什么？",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "mask_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "db_id": "dog_kennels",
        "question": "总花费最少的治疗类型的描述是什么？",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM Treatment_types AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY sum(<unk>) ASC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "最近买东西的5个顾客的名字和姓是什么？",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> ORDER BY T2.<unk> DESC LIMIT 5;"
    },
    {
        "db_id": "wrestler",
        "question": "哪支队伍有超过3次被淘汰？",
        "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
        "mask_query": "SELECT <unk> FROM elimination GROUP BY <unk> HAVING COUNT(*)  >  3"
    },
    {
        "db_id": "movie_2",
        "question": "有多少部电影的评级是“G”级？",
        "query": "SELECT count(*) FROM movies WHERE rating  =  'G'",
        "mask_query": "SELECT count(*) FROM movies WHERE rating  =  'G'"
    },
    {
        "db_id": "voter_2",
        "question": "不同的注册日期和选举周期是什么？",
        "query": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD",
        "mask_query": "SELECT DISTINCT <unk> ,  <unk> FROM VOTING_RECORD"
    },
    {
        "db_id": "college_3",
        "question": "找出具有课程名称为“计算机基础”的教师的名字和姓氏",
        "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"计算机基础\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"计算机基础\""
    },
    {
        "db_id": "warehouse_1",
        "question": "箱子里有什么不同的东西？",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "mask_query": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "question": "每个仓库位置价值最高的箱子的价值是多少？",
        "query": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
        "mask_query": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "列出所有集合的名称。",
        "query": "SELECT Collection_Name FROM Collections;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "academic",
        "question": "返回在“数据库”领域的所有关键字。",
        "query": "SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"数据库\";",
        "mask_query": "SELECT t1.<mask> FROM DOMAIN AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t3.<unk>  =  \"数据库\";"
    },
    {
        "db_id": "imdb",
        "question": "“刘诗诗”在2010年后的电影数量是多少？",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"刘诗诗\" AND t2.release_year  >  2010;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk>  ) FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"刘诗诗\" AND t2.<unk>  >  2010;"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "检索所有城市的列表。",
        "query": "SELECT DISTINCT city FROM addresses",
        "mask_query": "SELECT DISTINCT <unk> FROM addresses"
    },
    {
        "db_id": "icfp_1",
        "question": "“刘” “珍”发表论文的题目是什么？",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"刘\" AND t1.lname  =  \"珍\"",
        "mask_query": "SELECT t3.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.<unk>  =  \"刘\" AND t1.<unk>  =  \"珍\""
    },
    {
        "db_id": "voter_1",
        "question": "有多少参赛者没有被投票？",
        "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "mask_query": "SELECT count(*) FROM contestants WHERE <unk> NOT IN ( SELECT <unk> FROM votes )"
    },
    {
        "db_id": "store_product",
        "question": "查找所有包含“扫描仪”一词产品的名称。",
        "query": "SELECT product FROM product WHERE product LIKE \"扫描仪\"",
        "mask_query": "SELECT <mask> FROM <mask> WHERE <mask> LIKE \"扫描仪\""
    },
    {
        "db_id": "scholar",
        "question": "“艾伦·埃齐奥尼”引用了谁",
        "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"艾伦·埃齐奥尼\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t3 JOIN <mask> AS t4 ON t3.paperid  =  t4.citingpaperid JOIN <mask> AS t2 ON t2.paperid  =  t4.citedpaperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"艾伦·埃齐奥尼\";"
    },
    {
        "db_id": "wine_1",
        "question": "找出在2008年之后生产但葡萄产地不在“西北部”的葡萄酒的名称。",
        "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"西北部\"",
        "mask_query": "SELECT <unk> FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT <unk> FROM APPELLATIONS WHERE <unk>  =  \"西北部\""
    },
    {
        "db_id": "e_learning",
        "question": "查找属于“计算机科学”课程的名称和说明。",
        "query": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"计算机科学\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"计算机科学\""
    },
    {
        "db_id": "phone_1",
        "question": "查找未被任何具有完全认证类型的手机使用的芯片型号的名称。",
        "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  '全权'",
        "mask_query": "SELECT model_name FROM <mask> EXCEPT SELECT <mask> FROM <mask> WHERE <unk>  =  '全权'"
    },
    {
        "db_id": "yelp",
        "question": "返回给我“餐馆”的企业数量。",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"餐馆\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"餐馆\";"
    },
    {
        "db_id": "gas_company",
        "question": "按开业年份排列，加油站ID、地点和经理姓名是什么？",
        "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
        "mask_query": "SELECT station_id ,  LOCATION ,  manager_name FROM <mask> ORDER BY open_year"
    },
    {
        "db_id": "assets_maintenance",
        "question": "每个零件可以用于多少资产？列出零件名称和编号。",
        "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "按名字排序的所有老年人的登录名是什么？",
        "query": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  'Senior Citizen' ORDER BY <unk>"
    },
    {
        "db_id": "college_3",
        "question": "给位置在268号房间内的部门打电话。",
        "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "mask_query": "SELECT <unk> FROM DEPARTMENT WHERE <unk>  =  268"
    },
    {
        "db_id": "twitter_1",
        "question": "查找有不止一个跟随者的用户的姓名和电子邮件。",
        "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "movie_2",
        "question": "找出电影分级为‘G’的电影的名称.",
        "query": "SELECT title FROM movies WHERE rating  =  'G'",
        "mask_query": "SELECT title FROM movies WHERE rating  =  'G'"
    },
    {
        "db_id": "region_building",
        "question": "对于每个建筑，返回建筑的名称及其所属区域的名称。",
        "query": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "每个地址的国家和城市是什么？",
        "query": "SELECT country ,  town_city FROM Addresses;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>;"
    },
    {
        "db_id": "architecture",
        "question": "“风车”类型的工厂的名字和年份是什么？",
        "query": "SELECT name ,  built_year FROM mill WHERE TYPE  =  \"风车\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE TYPE  =  \"风车\""
    },
    {
        "db_id": "company_office",
        "question": "找出其行业是“银行业”或“综合”的公司。",
        "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"银行业\" OR Industry  =  \"综合\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"银行业\" OR <unk>  =  \"综合\""
    },
    {
        "db_id": "car_1",
        "question": "超过6个气缸的汽车的数量是多少？",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "mask_query": "SELECT COUNT(*) FROM CARS_DATA WHERE <unk>  >  6;"
    },
    {
        "db_id": "hr_1",
        "question": "向“王总”报告的员工的id是什么？他们的薪水是多少？",
        "query": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  '王总' )",
        "mask_query": "SELECT employee_id ,  salary FROM <mask> WHERE manager_id  =  (SELECT employee_id FROM <mask> WHERE first_name  =  '王总' )"
    },
    {
        "db_id": "flight_2",
        "question": "返回从“哈尔滨”起飞的航班数。",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"哈尔滨\"",
        "mask_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"哈尔滨\""
    },
    {
        "db_id": "address_1",
        "question": "琳达·史密斯和特蕾西·金居住的城市之间的距离是多少？",
        "query": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.<unk>  =  \"Tracy\" AND T3.Lname  =  \"Kim\""
    },
    {
        "db_id": "chinook_1",
        "question": "在所有歌曲中最常见的媒体类型是什么？",
        "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "哪个老师教的课程最多？给我老师的id和他或她教的课程数。",
        "query": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "driving_school",
        "question": "叫“赵”“文祥”的客户总共花了多长时间上课？",
        "query": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"文祥\" AND T2.last_name = \"赵\";",
        "mask_query": "SELECT sum(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  = T2.<unk> WHERE T2.<unk> = \"文祥\" AND T2.<unk> = \"赵\";"
    },
    {
        "db_id": "journal_committee",
        "question": "展示期刊的不同主题。",
        "query": "SELECT DISTINCT Theme FROM journal",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "tvshow",
        "question": "播放连续剧“潜伏”的电视频道播出的卡通片标题是什么？",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"潜伏\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"潜伏\";"
    },
    {
        "db_id": "student_1",
        "question": "哪位老师教最多的学生？请告诉我老师的名字和姓氏。",
        "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.firstname ,  T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "network_2",
        "question": "按年龄排序找出年龄比任何“摄影师”年龄都大的人的名字。",
        "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  '摄影师') ORDER BY age",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT min(<unk>) FROM person WHERE <unk>  =  '摄影师') ORDER BY <unk>"
    },
    {
        "db_id": "music_1",
        "question": "按标题字母顺序排列的每首“流行”歌曲的持续时间、文件大小和歌曲格式是什么？",
        "query": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"流行\" ORDER BY T2.song_name",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"流行\" ORDER BY T2.<unk>"
    },
    {
        "db_id": "flight_2",
        "question": "哪个城市有最频繁的目的地机场？",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "question": "电视频道使用的最少的语言是什么？有多少频道使用它？",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "mask_query": "SELECT LANGUAGE ,  count(*) FROM <mask> GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "号码“4560596484842”的卡的有效日期是什么？",
        "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM Customers_cards WHERE <unk>  =  \"4560596484842\""
    },
    {
        "db_id": "art_1",
        "question": "找到所有至少有两幅画的艺术家的名字和作品数量？",
        "query": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "e_commerce",
        "question": "列出至少下了2个订单且至少购买了3件商品的客户的ID、名字和姓氏。",
        "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  2 INTERSECT SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Order_items AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk> HAVING count(*)  >= 3"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "计算客户的借记卡数量。",
        "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"借记卡\"",
        "mask_query": "SELECT count(*) FROM Customers_cards WHERE <unk>  =  \"借记卡\""
    },
    {
        "db_id": "music_1",
        "question": "歌曲中最常用的语言是什么？",
        "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "question": "每栋建筑有多少房间容量超过50？",
        "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> WHERE <unk>  >  50 GROUP BY <unk>"
    },
    {
        "db_id": "wta_1",
        "question": "比赛时间最长的胜利者和失败者的名字是什么？",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "question": "按成立年份排列的机构的名称是什么？",
        "query": "SELECT Name FROM institution ORDER BY Founded ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "geo",
        "question": "“泰山”位于哪个省？",
        "query": "SELECT state_name FROM mountain WHERE mountain_name  =  \"泰山\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"泰山\";"
    },
    {
        "db_id": "world_1",
        "question": "哪些“非洲”国家的人口比“亚洲”任何国家都少?",
        "query": "SELECT Name FROM country WHERE Continent  =  \"非洲\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"亚洲\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"非洲\"  AND population  <  (SELECT max(population) FROM <mask> WHERE <unk>  =  \"亚洲\")"
    },
    {
        "db_id": "activity_1",
        "question": "哪些教职工不参与任何活动？找出他们的教职工ID。",
        "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM Faculty_participates_in"
    },
    {
        "db_id": "flight_1",
        "question": "航班的数量是多少？",
        "query": "SELECT count(*) FROM Flight",
        "mask_query": "SELECT count(*) FROM Flight"
    },
    {
        "db_id": "tracking_orders",
        "question": "找出所有产品ID为11的订单项目。订单项目ID是什么？",
        "query": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "mask_query": "SELECT <unk> FROM order_items WHERE <unk> = 11"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "一个房产的平均房间数是多少？",
        "query": "SELECT avg(room_count) FROM Properties;",
        "mask_query": "SELECT avg(<unk>) FROM <mask>;"
    },
    {
        "db_id": "geo",
        "question": "中国的主要城市是什么？",
        "query": "SELECT city_name FROM city WHERE population  >  150000;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150000;"
    },
    {
        "db_id": "book_1",
        "question": "下过订单的不同客户的名字是什么？",
        "query": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
        "mask_query": "SELECT DISTINCT T1.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”在2000年以后发表的论文。",
        "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"李政道\" AND t3.year  >  2000;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\" AND t3.<unk>  >  2000;"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "“显示器”产品有多少问题？",
        "query": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"显示器\"",
        "mask_query": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"显示器\""
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "查找产品数量超过平均产品数量的商店的名称。",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "mask_query": "SELECT name FROM <mask> WHERE number_products  >  (SELECT avg(number_products) FROM <mask>)"
    },
    {
        "db_id": "country_language",
        "question": "最常见的官方语言是什么？",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "question": "返回所有信用积分高于平均值的客户的平均年龄。",
        "query": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
        "mask_query": "SELECT avg(<unk>) FROM customers WHERE <unk>  >  (SELECT avg(<unk>) FROM customers)"
    },
    {
        "db_id": "tvshow",
        "question": "电视剧的“大宅门”这一集的播出日期是什么时候？",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"大宅门\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"大宅门\";"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "返回所有产品的名称和各自的购买价格。",
        "query": "SELECT product_name ,  typical_buying_price FROM products",
        "mask_query": "SELECT <unk> ,  <unk> FROM products"
    },
    {
        "db_id": "allergy_1",
        "question": "没有过敏的学生的学生ID是什么？",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM Has_allergy"
    },
    {
        "db_id": "scholar",
        "question": "“迈克尔·斯通布雷克”什么时候出版第一篇VLDB的论文？",
        "query": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"迈克尔·斯通布雷克\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM <mask> AS t4 JOIN <mask> AS t3 ON t4.venueid  =  t3.venueid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"迈克尔·斯通布雷克\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.<unk>;"
    },
    {
        "db_id": "car_road_race",
        "question": "请出示车手的姓名和参加的比赛次数。",
        "query": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
        "mask_query": "SELECT T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "e_commerce",
        "question": "至少有两种产品的订单的ID和日期是多少？",
        "query": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "hr_1",
        "question": "列出那些收入低于6000的员工的全名（名字和姓氏）以及薪水。",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "mask_query": "SELECT first_name ,  last_name ,  salary FROM <mask> WHERE salary  <  6000"
    },
    {
        "db_id": "formula_1",
        "question": "请问参加过澳大利亚大奖赛和中国大奖赛的车手的ID和名字？",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"澳大利亚大奖赛\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"中国大奖赛\"",
        "mask_query": "SELECT T2.driverid ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid JOIN <mask> AS T3 ON T2.driverid  =  T3.driverid WHERE T1.<unk> = \"澳大利亚大奖赛\" INTERSECT SELECT T2.driverid ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid JOIN <mask> AS T3 ON T2.driverid  =  T3.driverid WHERE T1.<unk> = \"中国大奖赛\""
    },
    {
        "db_id": "csu_1",
        "question": "报告1998至2002年间授予的学位总数。",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
        "mask_query": "SELECT T1.campus ,  sum(T2.<mask>) FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus"
    },
    {
        "db_id": "storm_record",
        "question": "按暴风雨最大速度降序排序，风暴的名称和以百万计的损失是什么？",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "mask_query": "SELECT name ,  damage_millions_USD FROM <mask> ORDER BY max_speed DESC"
    },
    {
        "db_id": "academic",
        "question": "把“VLDB”会议上包含关键字“信息检索”的论文返回。",
        "query": "SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"信息检索\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"VLDB\" AND t1.<mask>  =  \"信息检索\";"
    },
    {
        "db_id": "planet_1",
        "question": "名字中包含约翰的客户寄来的最重的包裹的包裹编号及其重量是什么？",
        "query": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
        "mask_query": "SELECT T1.<unk> ,  max(T1.<unk>) FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE \"John\";"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "与至少一个理事会税务条目相关的cmi交叉参考ID是什么？列出交叉引用ID和源系统代码。",
        "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  1"
    },
    {
        "db_id": "poker_player",
        "question": "在收入少于200000的扑克玩家中，决赛牌桌的最大数量是多少？",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "mask_query": "SELECT max(<unk>) FROM <mask> WHERE <unk>  <  200000"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示有至少2个客户的代理的代理ID和详细信息。",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "restaurant_1",
        "question": "“全聚德”餐厅地址是什么？",
        "query": "SELECT Address FROM Restaurant WHERE ResName = \"全聚德\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"全聚德\";"
    },
    {
        "db_id": "epinions_1",
        "question": "查找没有留下任何评论的用户的姓名。",
        "query": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "advertising_agencies",
        "question": "列出发票数量最多的客户ID及其详细信息。",
        "query": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "返回名称为“鼠标”的产品的颜色代码和描述。",
        "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"鼠标\"",
        "mask_query": "SELECT t1.<unk> ,  t2.<unk> FROM products AS t1 JOIN ref_colors AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"鼠标\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "显示名称为“欢迎来到纽约”的文件的所有段落ID和文本。",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  '上海欢迎你'",
        "mask_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.document_id  =  T2.document_id WHERE T2.<unk>  =  '上海欢迎你'"
    },
    {
        "db_id": "restaurant_bills",
        "question": "按点菜的数量降序显示顾客的名字和他们点的菜的名字。",
        "query": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找到被拘留次数最多且拘留类型代码为“后置”的老师的id和姓氏？",
        "query": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"后置\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"后置\" GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "film_rank",
        "question": "制作两部或更多部电影的工作室名称是什么？",
        "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "company_office",
        "question": "列出办公室所在建筑物的名称以及公司的名称。",
        "query": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "company_office",
        "question": "那些行业不是“银行业”的公司的最高销售额和最低销售额是多少？",
        "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"银行业\"",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask> WHERE <unk> != \"银行业\""
    },
    {
        "db_id": "planet_1",
        "question": "收到的包裹数数量最少的客户名及收到的包裹数是多少？",
        "query": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) LIMIT 1;",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) LIMIT 1;"
    },
    {
        "db_id": "movie_2",
        "question": "列出按字母顺序所有电影的片名。",
        "query": "SELECT title FROM movies ORDER BY title",
        "mask_query": "SELECT title FROM movies ORDER BY title"
    },
    {
        "db_id": "network_2",
        "question": "找到没有“学生”朋友的人的名字。",
        "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  '学生'",
        "mask_query": "SELECT <unk> FROM person EXCEPT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '学生'"
    },
    {
        "db_id": "baseball_1",
        "question": "2010年“广州恒大队”的总薪水是多少？",
        "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = '广州恒大队' AND T1.year  =  2010",
        "mask_query": "SELECT sum(T1.<mask>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  = '广州恒大队' AND T1.<unk>  =  2010"
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”中包含关键字“关键词搜索”的论文的数量。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"关键词搜索\";",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t4.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\" AND t1.<mask>  =  \"关键词搜索\";"
    },
    {
        "db_id": "theme_gallery",
        "question": "艺术家的不同国家是什么样的？",
        "query": "SELECT DISTINCT country FROM artist",
        "mask_query": "SELECT DISTINCT country FROM <mask>"
    },
    {
        "db_id": "aan_1",
        "question": "麦基翁，凯瑟琳和兰博，欧文共同撰写的论文标题和id是什么？",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "museum_visit",
        "question": "30岁以下的游客有多少？",
        "query": "SELECT count(*) FROM visitor WHERE age  <  30",
        "mask_query": "SELECT count(*) FROM <mask> WHERE age  <  30"
    },
    {
        "db_id": "scholar",
        "question": "被引用最多的关于“句法分析”的论文",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"句法分析\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"句法分析\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
    },
    {
        "db_id": "performance_attendance",
        "question": "按出席率，列出主持人的演出。",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "mask_query": "SELECT HOST FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "apartment_rentals",
        "question": "返回卧室最多的房间号。",
        "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "question": "是“统计学”系而不是“心理学”系的课程名称是什么？",
        "query": "SELECT title FROM course WHERE dept_name  =  '统计学' EXCEPT SELECT title FROM course WHERE dept_name  =  '心理学'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '统计学' EXCEPT SELECT <unk> FROM <mask> WHERE <unk>  =  '心理学'"
    },
    {
        "db_id": "world_1",
        "question": "给出那些不使用“英语”语言的国家的国家代码。",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"英语\"",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE LANGUAGE != \"英语\""
    },
    {
        "db_id": "customers_and_orders",
        "question": "使用最不常见付款方式的客户的姓名是什么？",
        "query": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1)"
    },
    {
        "db_id": "aan_1",
        "question": "所有附属机构的名称是什么，按论文数量价格降序排序？",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "wine_1",
        "question": "最高的葡萄酒是在什么酿造厂被制造的？",
        "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
        "mask_query": "SELECT <unk> FROM WINE ORDER BY SCORE LIMIT 1"
    },
    {
        "db_id": "government_shift",
        "question": "最常见的分析层类型代码是什么？",
        "query": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示发票号码和每张发票的交易数量。",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "mask_query": "SELECT <unk> ,  count(*) FROM Financial_transactions GROUP BY <unk>"
    },
    {
        "db_id": "manufactory_1",
        "question": "收益高于在“奥斯汀”收益最低的制造商的所有公司的总收益是多少？",
        "query": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  '郑州')",
        "mask_query": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  '郑州')"
    },
    {
        "db_id": "game_1",
        "question": "有多少不同的学生参与体育运动？",
        "query": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Sportsinfo"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "哪一个CMI交叉参考ID与任何停车税无关？",
        "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "mask_query": "SELECT <unk> FROM cmi_cross_references EXCEPT SELECT <unk> FROM parking_fines"
    },
    {
        "db_id": "shop_membership",
        "question": "对于每个分支ID，2015年以后登记的分支名称是什么？",
        "query": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "mask_query": "SELECT T2.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id"
    },
    {
        "db_id": "music_2",
        "question": "谁为“说好的幸福呢”的“后台”做舞台表演？显示姓名和姓氏。",
        "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"说好的幸福呢\" AND T1.StagePosition  =  \"后台\"",
        "mask_query": "SELECT T2.firstname ,  T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> WHERE T3.<unk>  =  \"说好的幸福呢\" AND T1.<unk>  =  \"后台\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "有多少个文档有一个流程？",
        "query": "SELECT count(DISTINCT document_id) FROM Documents_processes",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Documents_processes"
    },
    {
        "db_id": "world_1",
        "question": "“安哥拉”的所在区域和人口是多少？",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"安哥拉\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"安哥拉\""
    },
    {
        "db_id": "sakila_1",
        "question": "哪个城市的地址最多？列出城市名称、地址数量和城市ID。",
        "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<mask> ,  count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "授权销毁的雇员和销毁相应文件的雇员的名字是什么？",
        "query": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;",
        "mask_query": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.employee_id JOIN <mask> AS T3 ON T1.<unk> = T3.employee_id;"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找到评估记录最多的学生的id和名字。",
        "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_4",
        "question": "从最多航线起始的机场的名称和城市是什么？",
        "query": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "超过2各引用的ACL论文数",
        "query": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM <mask> AS t1 JOIN <mask> AS t3 ON t1.paperid  =  t3.citedpaperid JOIN <mask> AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;"
    },
    {
        "db_id": "movie_2",
        "question": "显示当前未在任何影院中放映的电影的名字。",
        "query": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask> WHERE <unk> != 'null')"
    },
    {
        "db_id": "soccer_1",
        "question": "所有运动员的平均体重是多少？",
        "query": "SELECT avg(weight) FROM Player",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“UIST”论文使用哪些关键词",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"UIST\";",
        "mask_query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"UIST\";"
    },
    {
        "db_id": "gas_company",
        "question": "2000年后开张最多的加油站的经理叫什么名字？",
        "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT manager_name FROM <mask> WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_1",
        "question": "员工最多的工作的代码和员工数量是什么？",
        "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "15号顾客购买的所有不同商品是什么？",
        "query": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
        "mask_query": "SELECT DISTINCT T1.item FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.receipt  =  T2.<unk> WHERE T2.<unk>  =  15"
    },
    {
        "db_id": "orchestra",
        "question": "列出按年限升序排列的指挥家的名字。",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "club_1",
        "question": "我们叫“网球俱乐部”的俱乐部在哪里？",
        "query": "SELECT clublocation FROM club WHERE clubname  =  \"网球俱乐部\"",
        "mask_query": "SELECT clublocation FROM club WHERE clubname  =  \"网球俱乐部\""
    },
    {
        "db_id": "government_shift",
        "question": "查找客户和服务详细信息中所有被标记为“不满意”的服务。",
        "query": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\"",
        "mask_query": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\""
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示所有客户的ID、姓名和姓氏以及帐户数量。",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  T2.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "inn_1",
        "question": "每种床类型的房间数是多少？",
        "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>;"
    },
    {
        "db_id": "news_report",
        "question": "工作年限最长的记者的国籍是什么？",
        "query": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "对于每个文件格式，返回以该格式发布歌曲的艺术家的数量。",
        "query": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "allergy_1",
        "question": "有多少女生对“鸡蛋”或“牛奶\"过敏？",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"女\" AND T1.allergy  =  \"牛奶\" OR T1.allergy  =  \"鸡蛋\"",
        "mask_query": "SELECT count(*) FROM has_allergy AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.sex  =  \"女\" AND T1.allergy  =  \"牛奶\" OR T1.allergy  =  \"鸡蛋\""
    },
    {
        "db_id": "book_1",
        "question": "订单最多的客户叫什么名字？",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "question": "展示主办城市数量最多的城市的状态。",
        "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "question": "告诉我从“上海”到“海口”的所有航班的出发日期和到达日期。",
        "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"上海\" AND destination  =  \"海口\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM Flight WHERE <unk>  =  \"上海\" AND <unk>  =  \"海口\""
    },
    {
        "db_id": "customers_and_invoices",
        "question": "计算对应于每个客户ID的帐户数。",
        "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "club_leader",
        "question": "哪个俱乐部名称包含字符串“州”？",
        "query": "SELECT club_name FROM club WHERE club_name LIKE '%state%'",
        "mask_query": "SELECT club_name FROM <mask> WHERE club_name LIKE '%state%'"
    },
    {
        "db_id": "game_1",
        "question": "找出同时踢“足球”和“曲棍球”的学生的名字和年龄。",
        "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"足球\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"曲棍球\")",
        "mask_query": "SELECT fname ,  age FROM <mask> WHERE <unk> IN (SELECT <unk> FROM Sportsinfo WHERE <unk>  =  \"足球\" INTERSECT SELECT <unk> FROM Sportsinfo WHERE <unk>  =  \"曲棍球\")"
    },
    {
        "db_id": "baseball_1",
        "question": "2010年和2001年的球员的工资值是多少？",
        "query": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
        "mask_query": "SELECT <mask> FROM <mask> WHERE YEAR  =  2010 UNION SELECT <mask> FROM <mask> WHERE YEAR  =  2001"
    },
    {
        "db_id": "geo",
        "question": "哪个省最大的城市是“南宁”？",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"南宁\" ) AND state_name  =  \"南宁\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk>  =  \"南宁\" ) AND <unk>  =  \"南宁\";"
    },
    {
        "db_id": "pets_1",
        "question": "找出体重大于10的宠物的数量。",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "mask_query": "SELECT count(*) FROM pets WHERE <unk>  >  10"
    },
    {
        "db_id": "museum_visit",
        "question": "找到员工人数最多的博物馆的ID和名称？",
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "mask_query": "SELECT museum_id ,  name FROM <mask> ORDER BY num_of_staff DESC LIMIT 1"
    },
    {
        "db_id": "pilot_record",
        "question": "显示有在2005年以后加入和在2000年之前加入的飞行员位置。",
        "query": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005",
        "mask_query": "SELECT POSITION FROM <mask> WHERE <unk>\t <  2000 INTERSECT SELECT POSITION FROM <mask> WHERE <unk>\t >  2005"
    },
    {
        "db_id": "company_office",
        "question": "找出最大高度的建筑物的故事。",
        "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "ship_1",
        "question": "计算每个等级中50岁以下的船长人数。",
        "query": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",
        "mask_query": "SELECT count(*) ,  rank FROM <mask> WHERE <unk>  <  50 GROUP BY rank"
    },
    {
        "db_id": "e_learning",
        "question": "找出课程ID、课程名称和每个科目对应的可用课程数量。",
        "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "car_1",
        "question": "哪些国家有3种以上汽车制造商或生产“荣威”，它们的ID和名称是什么？",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  '荣威';",
        "mask_query": "SELECT T1.countryId ,  T1.<unk> FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.<unk> FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.<unk>  =  T2.<unk> JOIN MODEL_LIST AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '荣威';"
    },
    {
        "db_id": "performance_attendance",
        "question": "按照参加演出出席率的降序，显示会员姓名和演出日期。",
        "query": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk> DESC"
    },
    {
        "db_id": "wine_1",
        "question": "每种葡萄酒的葡萄和葡萄产地是什么？",
        "query": "SELECT Grape ,  Appelation FROM WINE",
        "mask_query": "SELECT <unk> ,  <unk> FROM WINE"
    },
    {
        "db_id": "dorm_1",
        "question": "找出年龄小于平均年龄的学生的名字和姓氏。",
        "query": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)",
        "mask_query": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出以“4”开头的邮政编码所有城市的省和市。",
        "query": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"%4%\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM addresses WHERE <unk> LIKE \"%4%\""
    },
    {
        "db_id": "gas_company",
        "question": "每一个地点有多少个加油站？，按数目排序。",
        "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "mask_query": "SELECT LOCATION ,  count(*) FROM <mask> GROUP BY LOCATION ORDER BY count(*)"
    },
    {
        "db_id": "election",
        "question": "返回所有县的最大和最小人口。",
        "query": "SELECT max(Population) ,  min(Population) FROM county",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "college_1",
        "question": "这个系有多少学校？",
        "query": "SELECT count(DISTINCT school_code) FROM department",
        "mask_query": "SELECT count(DISTINCT school_code) FROM department"
    },
    {
        "db_id": "car_road_race",
        "question": "每个制造商使用多少个司机？",
        "query": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
        "mask_query": "SELECT CONSTRUCTOR ,  COUNT(*) FROM <mask> GROUP BY CONSTRUCTOR"
    },
    {
        "db_id": "station_weather",
        "question": "查找最大降水量大于50的车站的id和所属的地方当局。",
        "query": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "mask_query": "SELECT t2.<unk> ,  t2.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> HAVING max(t1.<unk>)  >  50"
    },
    {
        "db_id": "online_exams",
        "question": "科目代码包含子字符串“数据”的考试日期是什么？按日期降序返回。",
        "query": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '%data%' ORDER BY <unk> DESC"
    },
    {
        "db_id": "roller_coaster",
        "question": "有多少过山车？",
        "query": "SELECT count(*) FROM roller_coaster",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "wedding",
        "question": "显示所有举办过至少两次婚礼的教堂名称。",
        "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "restaurant_bills",
        "question": "顾客最多的国籍是哪个？",
        "query": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "按字母升序排列的所有专辑的标题是什么？",
        "query": "SELECT title FROM albums ORDER BY title;",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>;"
    },
    {
        "db_id": "academic",
        "question": "返回引用超过200个的作者是“李政道”且发表在“PVLDB”的论文。",
        "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"PVLDB\" AND t4.<unk>  >  200;"
    },
    {
        "db_id": "sing_contest",
        "question": "有多少首歌的名字里有“爱”？",
        "query": "SELECT count(*) FROM songs WHERE name LIKE \"%Love%\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> LIKE \"%Love%\""
    },
    {
        "db_id": "cinema",
        "question": "2010年或以后电影院最多的位置是什么？",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "voter_2",
        "question": "性别是“男”的学生的专业是什么？",
        "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"男\"",
        "mask_query": "SELECT <unk> FROM STUDENT WHERE <unk>  =  \"男\""
    },
    {
        "db_id": "school_finance",
        "question": "列出所有学校的名字、地点、吉祥物。",
        "query": "SELECT school_name ,  LOCATION ,  mascot FROM school",
        "mask_query": "SELECT school_name ,  LOCATION ,  mascot FROM school"
    },
    {
        "db_id": "music_1",
        "question": "最长的歌的ID是什么？",
        "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "question": "每个旅程的终点站的安装日期是多少？",
        "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "art_1",
        "question": "每一位在240号画廊展出一幅材质是油画的画家的唯一ID是什么？",
        "query": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
        "mask_query": "SELECT DISTINCT <unk> FROM paintings WHERE <unk>  =  \"oil\" AND LOCATION  =  \"Gallery 240\""
    },
    {
        "db_id": "customers_and_invoices",
        "question": "返回帐号最多的客户的ID和全名。",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示最少发生的交易类型代码。",
        "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM TRANSACTIONS GROUP BY <unk> ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "这50个省的人口总和是多少？",
        "query": "SELECT SUM ( population ) FROM state;",
        "mask_query": "SELECT SUM ( <unk> ) FROM <mask>;"
    },
    {
        "db_id": "yelp",
        "question": "给我“云南”所有的“摩洛哥”“餐馆”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"云南\" AND t2.category_name  =  \"摩洛哥\" AND t3.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"云南\" AND t2.<unk>  =  \"摩洛哥\" AND t3.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示没有账户的客户ID。",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "chinook_1",
        "question": "计算包含\"gmail.com\"的电子邮件的客户数量。",
        "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"qq.com\"",
        "mask_query": "SELECT COUNT(*) FROM CUSTOMER WHERE <unk> LIKE \"qq.com\""
    },
    {
        "db_id": "document_management",
        "question": "列出最受欢迎角色的用户所有的用户名和密码。",
        "query": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM users GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "club_leader",
        "question": "显示既包含22岁以上的会员又包含19岁以下会员的国家。",
        "query": "SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  22 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  19"
    },
    {
        "db_id": "store_1",
        "question": "雇员“袁” “熙”的地址是什么？",
        "query": "SELECT address FROM employees WHERE first_name = \"袁\" AND last_name = \"熙\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"袁\" AND <unk> = \"熙\";"
    },
    {
        "db_id": "music_2",
        "question": "姓“刘”的音乐家在歌曲“红日”中使用了什么乐器？",
        "query": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"刘\" AND T3.title  =  \"红日\"",
        "mask_query": "SELECT T4.instrument FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> JOIN <mask> AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"刘\" AND T3.title  =  \"红日\""
    },
    {
        "db_id": "world_1",
        "question": "“非洲”“共和制”国家的平均预期寿命是多少？",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"非洲\" AND GovernmentForm  =  \"共和制\"",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  \"非洲\" AND <unk>  =  \"共和制\""
    },
    {
        "db_id": "dorm_1",
        "question": "不是最大的专业的学生的名字和姓氏是什么？",
        "query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "workshop_paper",
        "question": "找出每个提交的作者，并按提交分数的升序列出它们。",
        "query": "SELECT Author FROM submission ORDER BY Scores ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "ship_1",
        "question": "最近一年建造的船的名称、类型和标志是什么？",
        "query": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1",
        "mask_query": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "什么河流流经与“宁夏”接近的省",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"宁夏\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"宁夏\" );"
    },
    {
        "db_id": "boat_1",
        "question": "有多少艘船是红色的？",
        "query": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  'red'"
    },
    {
        "db_id": "car_racing",
        "question": "哪些国家没有司机？",
        "query": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
        "mask_query": "SELECT <mask> FROM <mask> WHERE country_id NOT IN (SELECT <mask> FROM <mask>)"
    },
    {
        "db_id": "twitter_1",
        "question": "有多少用户？",
        "query": "SELECT count(*) FROM user_profiles",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "network_2",
        "question": "“丹丹”和“丽丽”共同的朋友的姓名和年龄是多少？",
        "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  '丹丹' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  '丽丽'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '丹丹' INTERSECT SELECT T1.<unk> ,   T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '丽丽'"
    },
    {
        "db_id": "institution_sports",
        "question": "有一个或多个冠军的机构的名称是什么？",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
        "mask_query": "SELECT T2.<unk> FROM championship AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >=  1"
    },
    {
        "db_id": "movie_1",
        "question": "所有在最近一部“李安”的电影完成之后再拍摄的电影的名字是什么？",
        "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"李安\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR  >  (SELECT max(YEAR) FROM <mask> WHERE <unk>  =  \"李安\")"
    },
    {
        "db_id": "geo",
        "question": "什么省有最长的河流",
        "query": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( DISTINCT LENGTH ) FROM river );",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( DISTINCT LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "aan_1",
        "question": "凯萨琳麦基镇有多少合作者？",
        "query": "SELECT COUNT (DISTINCT T2.author_id) FROM Author_list AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id AND T1.author_id != T2.author_id JOIN Author AS T3 ON T1.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\"",
        "mask_query": "SELECT COUNT (DISTINCT T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> AND T1.<unk> != T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"%Mckeown ,  Kathleen%\""
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "教授最多课程的老师的详细资料和id是什么？",
        "query": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "loan_1",
        "question": "找出客户数量最多的州。",
        "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY sum(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "销售数量最多的商店的经理姓名和地区是什么？",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "mask_query": "SELECT manager_name ,  district FROM <mask> ORDER BY number_products DESC LIMIT 1"
    },
    {
        "db_id": "roller_coaster",
        "question": "最长过山车的速度是多少？",
        "query": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY LENGTH DESC LIMIT 1"
    },
    {
        "db_id": "insurance_policies",
        "question": "在所有索赔中，哪些索赔的索赔额高于平均索赔额？列出索赔日期和处理日期。",
        "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  ( SELECT avg(<unk>) FROM <mask> )"
    },
    {
        "db_id": "world_1",
        "question": "给出面积大于3000的“北美”洲国家的总人口数和平均表面积。",
        "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"北美\" AND SurfaceArea  >  3000",
        "mask_query": "SELECT sum(<unk>) ,  avg(<unk>) FROM <mask> WHERE <unk>  =  \"北美\" AND <unk>  >  3000"
    },
    {
        "db_id": "bakery_1",
        "question": "顾客购买一件价值超过15美元的商品的日期是那一天？",
        "query": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
        "mask_query": "SELECT DISTINCT T1.date FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.receipt JOIN <mask> AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15"
    },
    {
        "db_id": "singer",
        "question": "显示歌手的不同国籍和每个国籍的歌手人数。",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示所有不同的建筑描述。",
        "query": "SELECT DISTINCT building_description FROM Apartment_Buildings",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "flight_1",
        "question": "显示所有距离超过1000的飞机的ID。",
        "query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "mask_query": "SELECT <unk> FROM Aircraft WHERE <unk>  >  1000"
    },
    {
        "db_id": "headphone_store",
        "question": "找出每个街区的商店数量。",
        "query": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
        "mask_query": "SELECT count(*) ,  neighborhood FROM <mask> GROUP BY neighborhood"
    },
    {
        "db_id": "document_management",
        "question": "查找所有文件的平均访问次数。",
        "query": "SELECT avg(access_count) FROM documents",
        "mask_query": "SELECT avg(<unk>) FROM documents"
    },
    {
        "db_id": "e_commerce",
        "question": "名称中包含“DELL”一词的所有产品的尺寸是多少？",
        "query": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '%Dell%'"
    },
    {
        "db_id": "csu_1",
        "question": "对于每一个“湖北”省的校园，找出其在2000年后学位授予的数量。",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"湖北\" AND T2.year  >=  2000 GROUP BY T1.campus",
        "mask_query": "SELECT T1.campus ,  sum(T2.<mask>) FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"湖北\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    {
        "db_id": "world_1",
        "question": "世界排名前5大面积的国家的名称和国家地区是什么？",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 5"
    },
    {
        "db_id": "allergy_1",
        "question": "哪种过敏类型有最多的过敏反应？",
        "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "dorm_1",
        "question": "找出居住在“大礼堂”的女学生（性别是“F”）",
        "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  '大礼堂' AND T1.sex  =  'F'",
        "mask_query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  '大礼堂' AND T1.sex  =  'F'"
    },
    {
        "db_id": "machine_repair",
        "question": "分配需要修理的价值点大于70的机器的技术人员的姓名是什么？",
        "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.machine_id  =  T2.machine_id JOIN <mask> AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.<unk>  >  70"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "帐户上有哪些不同的结算单的ID和每个结算单的帐户数是什么？",
        "query": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "mask_query": "SELECT STATEMENT_ID ,  count(*) FROM <mask> GROUP BY STATEMENT_ID"
    },
    {
        "db_id": "customers_and_orders",
        "question": "按降价排序的产品名称是什么？",
        "query": "SELECT product_name FROM Products ORDER BY product_price DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "雇员“可可”的角色是什么？",
        "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"可可\";",
        "mask_query": "SELECT T1.<unk> FROM ROLES AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"可可\";"
    },
    {
        "db_id": "region_building",
        "question": "按字母顺序列出地区名称。",
        "query": "SELECT Name FROM region ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "company_employee",
        "question": "显示不同的总部及每个总部公司的数量。",
        "query": "SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "请告诉我顾客“路一鸣”购买的产品的总数量。",
        "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"路一鸣\"",
        "mask_query": "SELECT sum(t3.<unk>) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> JOIN order_items AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"路一鸣\""
    },
    {
        "db_id": "party_people",
        "question": "同时在id为3的政党和在id为1的政党的成员名字是什么？",
        "query": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
        "mask_query": "SELECT member_name FROM <mask> WHERE party_id  =  3 INTERSECT SELECT member_name FROM <mask> WHERE party_id  =  1"
    },
    {
        "db_id": "movie_1",
        "question": "哪位导演只导演了一部电影？",
        "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  =  1"
    },
    {
        "db_id": "store_1",
        "question": "找到在电影播放列表中但不在音乐播放列表中的曲目名称。",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  '电影' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  '音乐'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '电影' EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '音乐'"
    },
    {
        "db_id": "dorm_1",
        "question": "找出不同的宿舍设施的数量。",
        "query": "SELECT count(*) FROM dorm_amenity",
        "mask_query": "SELECT count(*) FROM dorm_amenity"
    },
    {
        "db_id": "geo",
        "question": "“长江”周边省的最高点是什么？",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"长江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" );"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "项目最多的组织发起的项目的细节是什么？",
        "query": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1 )"
    },
    {
        "db_id": "customer_complaints",
        "question": "哪个城市的类型代码是“良好信用评级”的客户数量最少？",
        "query": "SELECT town_city FROM customers WHERE customer_type_code  =  \"良好信用评级\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> FROM customers WHERE <unk>  =  \"良好信用评级\" GROUP BY <unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "network_2",
        "question": "有多少人比每个“摄影师”年纪都大？",
        "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  '摄影师')",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  (SELECT max(<unk>) FROM person WHERE <unk>  =  '摄影师')"
    },
    {
        "db_id": "scholar",
        "question": "谁在ACL 2016有论文？",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "mask_query": "SELECT DISTINCT t1.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.venueid  =  t2.venueid JOIN <mask> AS t1 ON t1.paperid  =  t2.paperid WHERE t2.<unk>  =  2016 AND t3.venuename  =  \"acl\";"
    },
    {
        "db_id": "customers_and_orders",
        "question": "对于数量大于6或包含3个以上产品的订单，订单ID和相应的订单日期是什么？",
        "query": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  6 UNION SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  3;"
    },
    {
        "db_id": "allergy_1",
        "question": "可以食用“大豆”的学生的名字和专业是什么？",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"大豆\")",
        "mask_query": "SELECT fname ,  major FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM Has_allergy WHERE <unk>  =  \"大豆\")"
    },
    {
        "db_id": "bakery_1",
        "question": "购买最贵商品的收据号码和日期是什么？",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.receipt JOIN <mask> AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "entertainment_awards",
        "question": "艺术节观众的平均人数是多少？",
        "query": "SELECT avg(Num_of_Audience) FROM festival_detail",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "查找所有客户和员工的姓名。",
        "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "mask_query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    {
        "db_id": "formula_1",
        "question": "有11次停站并参加过5次以上的比赛车手的姓氏和ID是什么？",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "mask_query": "SELECT T1.<unk> ,  T1.driverid FROM <mask> AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.<unk> ,  T1.driverid FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "store_1",
        "question": "谁是“逆战”的作曲家？",
        "query": "SELECT composer FROM tracks WHERE name = \"逆战\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"逆战\";"
    },
    {
        "db_id": "film_rank",
        "question": "按年份降序的“日本”的电影市场估计年份是多少？",
        "query": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"日本\" ORDER BY T1.Year DESC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"日本\" ORDER BY T1.<unk> DESC"
    },
    {
        "db_id": "academic",
        "question": "把超过60篇包含关键词“关系型数据库”的论文投放的会议返回。",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"关系型数据库\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"关系型数据库\" GROUP BY t2.<unk> HAVING COUNT ( DISTINCT t3.<unk> )  >  60;"
    },
    {
        "db_id": "county_public_safety",
        "question": "人口最多的省叫什么名字？",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "中国所有河流的总长度是多少？",
        "query": "SELECT SUM ( LENGTH ) FROM river;",
        "mask_query": "SELECT SUM ( LENGTH ) FROM <mask>;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "布兰登拥有的所有文档的不同子集名称是什么？",
        "query": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.owner  =  'Braeden'"
    },
    {
        "db_id": "csu_1",
        "question": "2005在校园的平均CSU费用是多少？",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "mask_query": "SELECT avg(campusfee) FROM <mask> WHERE YEAR  =  2005"
    },
    {
        "db_id": "election_representative",
        "question": "什么党派至少有三名代表？",
        "query": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "college_1",
        "question": "教授最少的院系是什么？",
        "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "ID介于10和20之间的客户成为客户的日期是什么时候？",
        "query": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "mask_query": "SELECT <unk> FROM customers WHERE <unk> BETWEEN 10 AND 20"
    },
    {
        "db_id": "match_season",
        "question": "来自“浙江大学”的球员是谁？",
        "query": "SELECT Player FROM match_season WHERE College  =  \"浙江大学\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"浙江大学\""
    },
    {
        "db_id": "car_1",
        "question": "哪些不同的车型在1980年后被生产出来？",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "mask_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.<unk>  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "db_id": "manufactory_1",
        "question": "选择所有价格大于或等于$180的产品的名称和价格，首先按价格（降序）排序，然后按名称（升序）排序。",
        "query": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
        "mask_query": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC"
    },
    {
        "db_id": "game_1",
        "question": "显示每周的总小时数和20岁以下学生玩游戏的数目。",
        "query": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
        "mask_query": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.age  <  20"
    },
    {
        "db_id": "insurance_fnol",
        "question": "查找名字包含“楠”的客户ID。",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"楠\"",
        "mask_query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"楠\""
    },
    {
        "db_id": "flight_4",
        "question": "源机场和目的地机场在“中国”的路线ID是什么？",
        "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  \"中国\") AND src_apid IN (SELECT apid FROM airports WHERE country  =  \"中国\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN (SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国\") AND <unk> IN (SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国\")"
    },
    {
        "db_id": "film_rank",
        "question": "由名字包含“华谊”的电影制片厂制作的电影的片名和制片厂是什么？",
        "query": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"华谊\"",
        "mask_query": "SELECT title ,  <unk> FROM <mask> WHERE <unk> LIKE \"华谊\""
    },
    {
        "db_id": "e_commerce",
        "question": "订单上有多少商品状态？",
        "query": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Order_items"
    },
    {
        "db_id": "academic",
        "question": "返回每一年的“使数据库可用”的引用数量。",
        "query": "SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  \"使数据库可用\" GROUP BY YEAR;",
        "mask_query": "SELECT YEAR  ,  SUM ( <unk> ) FROM <mask> WHERE <unk>  =  \"使数据库可用\" GROUP BY YEAR;"
    },
    {
        "db_id": "allergy_1",
        "question": "每位导师有多少学生？",
        "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
        "mask_query": "SELECT advisor ,  count(*) FROM <mask> GROUP BY advisor"
    },
    {
        "db_id": "chinook_1",
        "question": "找到制作“奇幻旅程”专辑艺术家的名字。",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"奇幻旅程\"",
        "mask_query": "SELECT T2.<unk> FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"奇幻旅程\""
    },
    {
        "db_id": "college_1",
        "question": "查找“信息系统”系所有上课的教授的姓名和学位。",
        "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  '信息系统'",
        "mask_query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM <mask> AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  '信息系统'"
    },
    {
        "db_id": "ship_1",
        "question": "给出拥有两个以上船长的班级。",
        "query": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2",
        "mask_query": "SELECT CLASS FROM <mask> GROUP BY CLASS HAVING count(*)  >  2"
    },
    {
        "db_id": "academic",
        "question": "返回在1995年之后2002年之前“VLDB”会议上发表过论文的作者名字。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"VLDB\" AND t4.<unk>  <  2002 AND t4.<unk>  >  1995;"
    },
    {
        "db_id": "scholar",
        "question": "去年没有发表的论文",
        "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;",
        "mask_query": "SELECT DISTINCT paperid FROM <mask> WHERE YEAR != 2015;"
    },
    {
        "db_id": "geo",
        "question": "主要河流旁边有多少个省",
        "query": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  >  750;",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE LENGTH  >  750;"
    },
    {
        "db_id": "scholar",
        "question": "“大卫·贝尔”发布在AISATS的论文有多少？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"大卫·贝尔\" AND t4.venuename  =  \"<AISTATS>\";",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM <mask> AS t4 JOIN <mask> AS t3 ON t4.venueid  =  t3.venueid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"大卫·贝尔\" AND t4.venuename  =  \"<AISTATS>\";"
    },
    {
        "db_id": "train_station",
        "question": "按火车时刻按降序显示“广州”火车站的所有火车名称和时间。",
        "query": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  \"广州\" ORDER BY T3.time DESC",
        "mask_query": "SELECT T3.name ,  T3.time FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.station_id  =  T2.station_id JOIN <mask> AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  \"广州\" ORDER BY T3.time DESC"
    },
    {
        "db_id": "student_assessment",
        "question": "成绩代码为及格的候选人的ID是什么？",
        "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"通过\"",
        "mask_query": "SELECT <unk> FROM candidate_assessments WHERE <unk> = \"通过\""
    },
    {
        "db_id": "activity_1",
        "question": "我们每个年级有多少教员和性别？",
        "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "mask_query": "SELECT rank ,  sex ,  count(*) FROM <mask> GROUP BY rank ,  sex"
    },
    {
        "db_id": "manufacturer",
        "question": "请查找生产的家具的部件小于6和多于10的公司的名称。",
        "query": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10",
        "mask_query": "SELECT t3.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10"
    },
    {
        "db_id": "academic",
        "question": "返回在2000年以后“李政道”在“VLDB”会议上上发表的论文。",
        "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"VLDB\" AND t4.<unk>  >  2000;"
    },
    {
        "db_id": "game_1",
        "question": "显示所有至少有两个学生的导师。",
        "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
        "mask_query": "SELECT advisor FROM <mask> GROUP BY advisor HAVING count(*)  >=  2"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "返回名称为“罗超的简历”的文档的文档ID、模板id和描述。",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"罗超的简历\"",
        "mask_query": "SELECT document_id ,  template_id ,  <unk> FROM <mask> WHERE document_name  =  \"罗超的简历\""
    },
    {
        "db_id": "restaurants",
        "question": "一个位于“厦门”的饭店",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"厦门\" );",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM <mask> AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"厦门\" );"
    },
    {
        "db_id": "imdb",
        "question": "哪部电影有“喜羊羊”这个角色",
        "query": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"喜羊羊\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN CAST AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"喜羊羊\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "列出“蓝塞姆”拥有过的文档的所属的集合名称。",
        "query": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'"
    },
    {
        "db_id": "tvshow",
        "question": "电视频道最多的国家是什么？它们有多少个频道？",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "scientist_1",
        "question": "被指派的科学家中名字包含“曹”的项目的名字是什么？",
        "query": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE \"%曹%\"",
        "mask_query": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.<unk> WHERE T3.name LIKE \"%曹%\""
    },
    {
        "db_id": "assets_maintenance",
        "question": "在所有参与过的工程师中，哪个工程师的参与次数最少？列出工程师id、名字和姓氏。",
        "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "question": "给我一份按字母顺序排列的考试科目代码。",
        "query": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "insurance_policies",
        "question": "哪些支付是用“信用卡”的？列出付款ID、日期和金额。",
        "query": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  '信用卡'",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  '信用卡'"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "列出所有可能到达景点的方法，以及这些方法可访问的景点数量。",
        "query": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "world_1",
        "question": "“西湖”区有多少人居住？",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"西湖\"",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  \"西湖\""
    },
    {
        "db_id": "dog_kennels",
        "question": "找到在现在不拥有任何狗的主人。",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "年龄类别代码为“60岁以上”的详细说明是什么？",
        "query": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  'Over 60';"
    },
    {
        "db_id": "restaurants",
        "question": "“厦门”有多少吃“四川”餐的地方？",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"厦门\" AND t1.food_type  =  \"四川\";",
        "mask_query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"厦门\" AND t1.food_type  =  \"四川\";"
    },
    {
        "db_id": "geo",
        "question": "哪个省的人数最少？",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> );"
    },
    {
        "db_id": "riding_club",
        "question": "显示既有性别为“男”又有性别为“女”的运动员的住址。",
        "query": "SELECT Residence FROM player WHERE gender  =  \"男\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"女\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE gender  =  \"男\" INTERSECT SELECT <unk> FROM <mask> WHERE gender  =  \"女\""
    },
    {
        "db_id": "climbing",
        "question": "列出前3声望最高山的不同山脉。",
        "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "inn_1",
        "question": "返回房价最高的房间的名称、房价、入住日期和退房日期。",
        "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY T1.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "car_1",
        "question": "找出“1970”年生产汽车的制造商的名字。",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.<unk>  =  T2.<unk> JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.<unk>  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "db_id": "scholar",
        "question": "2015年“熊立文”发的论文是什么？",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"熊立文\" AND t3.year  =  2015;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"熊立文\" AND t3.<unk>  =  2015;"
    },
    {
        "db_id": "poker_player",
        "question": "至少有两个人共同所属的名族有哪些？",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "college_1",
        "question": "有“博士”或“硕士”学位的教授有多少？",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  '博士' OR prof_high_degree  =  '硕士'",
        "mask_query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  '博士' OR prof_high_degree  =  '硕士'"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示所有文档的名称和说明。",
        "query": "SELECT document_name ,  document_description FROM Documents",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "device",
        "question": "计算不同软件平台的数量。",
        "query": "SELECT count(DISTINCT Software_Platform) FROM device",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "作者是“诺亚·史密斯”的文章有多少次引用？",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"诺亚·史密斯\";",
        "mask_query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM <mask> AS t3 JOIN <mask> AS t4 ON t3.paperid  =  t4.citedpaperid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"诺亚·史密斯\";"
    },
    {
        "db_id": "country_language",
        "question": "显示官方语言为“英语”的国家的平均总分。",
        "query": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
        "mask_query": "SELECT avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"English\""
    },
    {
        "db_id": "book_1",
        "question": "图书的平均购买价和平均销售价是多少？",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "mask_query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM <mask>"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "客户“白” “启光”有多少张信用卡？",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"白\" AND T2.customer_last_name  =  \"启光\" AND T1.card_type_code  =  \"信用卡\"",
        "mask_query": "SELECT count(*) FROM Customers_cards AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"白\" AND T2.<unk>  =  \"启光\" AND T1.<unk>  =  \"信用卡\""
    },
    {
        "db_id": "shop_membership",
        "question": "按照级别的降序显示所有成员的卡号、姓名和家乡。",
        "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
        "mask_query": "SELECT card_number ,  name ,  hometown FROM <mask> ORDER BY LEVEL DESC"
    },
    {
        "db_id": "formula_1",
        "question": "拥有单圈时间最长记录的司机的ID和姓氏是什么？",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "mask_query": "SELECT T1.driverid ,  T1.<unk> FROM <mask> AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "什么是最流行的文件格式？",
        "query": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "question": "哪一年授予了最多学位？",
        "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "mask_query": "SELECT YEAR FROM <mask> GROUP BY YEAR ORDER BY sum(<mask>) DESC LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "question": "找出所有产品的名称，其库存号以“2”开头。",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2\"",
        "mask_query": "SELECT <unk> FROM catalog_contents WHERE <unk> LIKE \"2\""
    },
    {
        "db_id": "music_1",
        "question": "返回制作分辨率最低的歌曲的艺术家的性别和姓名。",
        "query": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "哪些城市有配备游泳池的房产？",
        "query": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T4.<unk>  =  T3.<unk> WHERE T4.<unk>  =  'swimming pool';"
    },
    {
        "db_id": "inn_1",
        "question": "找到底价最贵的房间的ID和房间名称。",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "geo",
        "question": "哪些省会不是主要城市",
        "query": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  <=  150000;"
    },
    {
        "db_id": "book_1",
        "question": "数数书的数量。",
        "query": "SELECT count(*) FROM Book",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "哪些联系信道代码使用少于5次？",
        "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
        "mask_query": "SELECT <unk> FROM customer_contact_channels GROUP BY <unk> HAVING count(<unk>)  <  5"
    },
    {
        "db_id": "city_record",
        "question": "哪些城市曾经不止一次作为主办城市？返回其GDP和人口。",
        "query": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "mask_query": "SELECT t1.gdp ,  t1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "ship_mission",
        "question": "以吨位升序的船舶名称是什么？",
        "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "wta_1",
        "question": "赢得比赛最多的赢家的名字是什么？这些球员的排名积分是多少？",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_1",
        "question": "每所学校有多少个不同的地方？",
        "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
        "mask_query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code"
    },
    {
        "db_id": "soccer_2",
        "question": "按字母顺序查找参与选拔赛的不同大学的名称。",
        "query": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "mask_query": "SELECT DISTINCT <unk> FROM tryout ORDER BY <unk>"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "大多数产品使用的特征名称是什么？",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t3.<unk> FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> GROUP BY t3.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "question": "招生最大的学校是什么时候成立的？",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "mask_query": "SELECT founded FROM <mask> ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "shop_membership",
        "question": "不同的会员级别有哪些？",
        "query": "SELECT count(DISTINCT LEVEL) FROM member",
        "mask_query": "SELECT count(DISTINCT LEVEL) FROM <mask>"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示不同投资者的平均交易份额数。",
        "query": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM TRANSACTIONS GROUP BY <unk>"
    },
    {
        "db_id": "scientist_1",
        "question": "查找需要100到300小时工作的项目名称。",
        "query": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300",
        "mask_query": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300"
    },
    {
        "db_id": "wine_1",
        "question": "按字母顺序列出所有不同葡萄酒的名称。",
        "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "mask_query": "SELECT DISTINCT <unk> FROM WINE ORDER BY <unk>"
    },
    {
        "db_id": "book_1",
        "question": "给出乔治·奥威尔的售价最低的书的书名。",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
        "mask_query": "SELECT T1.title FROM <mask> AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN <mask> AS T3 ON T2.<mask>  =  T3.<unk> WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“米莱拉·拉帕塔”引用了多少篇论文？",
        "query": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"米莱拉·拉帕塔\";",
        "mask_query": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"米莱拉·拉帕塔\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "列出不是由名为“中国邮政”运输代理且具有完成状态和“论文”类型运输的文件的文件ID。",
        "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"完结\" AND document_type_code = \"论文\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"中国邮政\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"完结\" AND <unk> = \"论文\" INTERSECT SELECT <unk> FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = \"中国邮政\";"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "返回平均值、最小值、最大值和总交易量。",
        "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "mask_query": "SELECT avg(<unk>) ,  min(<unk>) ,  max(<unk>) ,   sum(<unk>) FROM Financial_transactions"
    },
    {
        "db_id": "college_1",
        "question": "学生平均成绩最高的系的名称和平均成绩是多少？",
        "query": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
        "mask_query": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1"
    },
    {
        "db_id": "department_store",
        "question": "每种产品的最高和最低的产品价格是多少？",
        "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
        "mask_query": "SELECT <unk> ,  max(<unk>) ,  min(<unk>) FROM products GROUP BY <unk>"
    },
    {
        "db_id": "imdb",
        "question": "找出电影“战狼”中的演员",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"战狼\";",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t3.<unk>  =  \"战狼\";"
    },
    {
        "db_id": "college_3",
        "question": "至少有五人参加的课程名称是什么？",
        "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "mask_query": "SELECT T1.<unk> FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >=  5"
    },
    {
        "db_id": "debate",
        "question": "显示处于否定的一面人物的姓名、辩论的日期和地点，按姓名的升序排列。",
        "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk> ASC"
    },
    {
        "db_id": "music_2",
        "question": "唱片书最多的标签是什么？",
        "query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "人口密度最小的省是什么？",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "e_learning",
        "question": "返回两个以上学生注册的课程的描述和名称。",
        "query": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "vehicle_rent",
        "question": "每种动力系统的类型有多少辆车？",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "mask_query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "club_1",
        "question": "“赛车”俱乐部有多少成员年龄小于18岁？",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t3.age  <  18",
        "mask_query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t3.age  <  18"
    },
    {
        "db_id": "dorm_1",
        "question": "找到住在没有“客厅”设施的宿舍的学生的名字和年龄。",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  '客厅')",
        "mask_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> NOT IN (SELECT T3.<unk> FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.<unk>  =  T4.<unk> WHERE T4.<unk>  =  '客厅')"
    },
    {
        "db_id": "college_3",
        "question": "找到居住在“行政”大楼的高级教授的房间。",
        "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"教授\" AND Building  =  \"行政\"",
        "mask_query": "SELECT <unk> FROM FACULTY WHERE <unk>  =  \"教授\" AND <unk>  =  \"行政\""
    },
    {
        "db_id": "geo",
        "question": "“湖南”有多少条河流？",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"湖南\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  \"湖南\";"
    },
    {
        "db_id": "imdb",
        "question": "找出所有由“莫言”写的电影",
        "query": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"莫言\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"莫言\";"
    },
    {
        "db_id": "soccer_3",
        "question": "获胜超过两次的获胜球员的俱乐部叫什么名字？",
        "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  2"
    },
    {
        "db_id": "pets_1",
        "question": "找出没有宠物的学生的平均年龄。",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "mask_query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)"
    },
    {
        "db_id": "e_learning",
        "question": "只有1名学生入学的课程名称是什么？",
        "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  =  1"
    },
    {
        "db_id": "customers_and_orders",
        "question": "给出具有两个或多个产品的产品类型的代码。",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "store_1",
        "question": "以MPEG音频格式存储的所有摇滚曲目的名称是什么？",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"摇滚\" AND T3.name = \"MPEG\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T3.<unk> = T2.<unk> WHERE T1.<unk> = \"摇滚\" AND T3.<unk> = \"MPEG\";"
    },
    {
        "db_id": "institution_sports",
        "question": "机构最常见的隶属关系是什么？",
        "query": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "question": "三个最小ID的路线的起始站和终点站是什么？",
        "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 3"
    },
    {
        "db_id": "institution_sports",
        "question": "机构的名称及其对应的昵称是什么？",
        "query": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM championship AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "car_racing",
        "question": "找到有两个或两个以上司机的车队，并返回其车队经理和车主。",
        "query": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
        "mask_query": "SELECT t1.manager ,  t1.car_owner FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "address_1",
        "question": "住在巴尔的摩的学生的名字和专业是什么？",
        "query": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"Baltimore\""
    },
    {
        "db_id": "ship_mission",
        "question": "最大吨位的船叫什么名字？",
        "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "找出“长沙”的所有“女”演员",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"长沙\" AND gender  =  \"女\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"长沙\" AND <unk>  =  \"女\";"
    },
    {
        "db_id": "government_shift",
        "question": "统计每个客户使用服务的次数，并返回使用服务次数最多的客户的详细信息。",
        "query": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "question": "返回招生人数最低的机构的昵称。",
        "query": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM championship AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "获取管理部门的员工的详细信息。",
        "query": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "mask_query": "SELECT DISTINCT * FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id"
    },
    {
        "db_id": "bike_1",
        "question": "哪一天哪个地区的最小露点低于邮编94107地区中任何一天，这些地区的邮编是什么？",
        "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  <  (SELECT min(<unk>) FROM <mask> WHERE <unk>  =  94107)"
    },
    {
        "db_id": "movie_1",
        "question": "每个评论者对一部电影的平均星级是多少？",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "mask_query": "SELECT T2.<unk> ,  avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "geo",
        "question": "什么省有最高的海拔",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "flight_4",
        "question": "“山东航空公司”有多少条航线？",
        "query": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  \"山东航空公司\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"山东航空公司\""
    },
    {
        "db_id": "dog_kennels",
        "question": "有多少狗经过治疗？",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "icfp_1",
        "question": "统计总论文数。",
        "query": "SELECT count(*) FROM papers",
        "mask_query": "SELECT count(*) FROM papers"
    },
    {
        "db_id": "imdb",
        "question": "找出在“李安”的最新电影中出演的演员",
        "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"李安\" ORDER BY t5.release_year DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t5.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t3.<unk>  =  \"李安\" ORDER BY t5.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "从来没有订购过“拿铁”产品的顾客的姓名是什么。",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  \"拿铁\"",
        "mask_query": "SELECT <unk> FROM customers EXCEPT SELECT t1.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> JOIN order_items AS t3 ON t2.<unk>  =  t3.<unk> JOIN products AS t4 ON t3.<unk>  =  t4.<unk> WHERE t4.<unk>  =  \"拿铁\""
    },
    {
        "db_id": "vehicle_driver",
        "question": "返回驾驶“DJ1”型车辆的驾驶员的姓名和公民身份。",
        "query": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
        "mask_query": "SELECT T1.name ,  T1.citizenship FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.driver_id  =  T2.driver_id JOIN <mask> AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'"
    },
    {
        "db_id": "icfp_1",
        "question": "统计作者的数量。",
        "query": "SELECT count(*) FROM authors",
        "mask_query": "SELECT count(*) FROM authors"
    },
    {
        "db_id": "gymnast",
        "question": "按降序，列出体操运动员的总分。",
        "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "music_1",
        "question": "按体裁的字母顺序排列的每种体裁最短且评分最低的歌曲是什么？",
        "query": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "mask_query": "SELECT min(T1.<unk>) ,  min(T2.<unk>) ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY T2.<unk>"
    },
    {
        "db_id": "academic",
        "question": "返回在2005年之前“VLDB”会议上的论文的总引用。",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" AND t2.<unk>  <  2005;"
    },
    {
        "db_id": "pilot_1",
        "question": "有多少不同的地方有飞机？",
        "query": "SELECT count(DISTINCT LOCATION) FROM hangar",
        "mask_query": "SELECT count(DISTINCT LOCATION) FROM hangar"
    },
    {
        "db_id": "swimming",
        "question": "2005年度开放的体育场的平均容量是多少？",
        "query": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
        "mask_query": "SELECT avg(capacity) FROM <mask> WHERE opening_year  =  2005"
    },
    {
        "db_id": "flight_1",
        "question": "所有员工的姓名和薪水是多少？",
        "query": "SELECT name ,  salary FROM Employee ORDER BY salary",
        "mask_query": "SELECT <unk> ,  <unk> FROM Employee ORDER BY <unk>"
    },
    {
        "db_id": "dog_kennels",
        "question": "列出拥有年纪最小的狗的主人的姓氏。",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  ( SELECT max(<unk>) FROM <mask> )"
    },
    {
        "db_id": "academic",
        "question": "返回所有在“北京理工大学”的研究人员。",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "pilot_1",
        "question": "计算在芝加哥有飞机的飞行员人数。",
        "query": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
        "mask_query": "SELECT \tcount(DISTINCT T1.<unk>) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'Chicago'"
    },
    {
        "db_id": "concert_singer",
        "question": "2014年没有举办音乐会的所有体育场名称是什么？",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "db_id": "car_1",
        "question": "有多少辆车有4个以上的气缸？",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "mask_query": "SELECT count(*) FROM CARS_DATA WHERE <unk>  >  4;"
    },
    {
        "db_id": "bakery_1",
        "question": "平均每件商品花费超过5英镑的顾客的ID是什么？",
        "query": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.item JOIN <mask> AS T3 ON T2.receipt  =  T3.<unk> GROUP BY T3.<unk> HAVING avg(T1.price)  >  5"
    },
    {
        "db_id": "movie_1",
        "question": "返回所有评论者的名字和电影的名字。",
        "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "mask_query": "SELECT <unk> FROM <mask> UNION SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "geo",
        "question": "最大省的面积是多少？",
        "query": "SELECT MAX ( area ) FROM state;",
        "mask_query": "SELECT MAX ( <unk> ) FROM <mask>;"
    },
    {
        "db_id": "government_shift",
        "question": "按字母顺序排列的频道名称列表是什么？",
        "query": "SELECT channel_details FROM channels ORDER BY channel_details",
        "mask_query": "SELECT channel_details FROM channels ORDER BY channel_details"
    },
    {
        "db_id": "vehicle_driver",
        "question": "由两位司机驾驶过或由“紫阳”制造的车辆的id和型号是什么？",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "mask_query": "SELECT T1.vehicle_id ,  T1.model FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "car_racing",
        "question": "找出拥有最多车手的车队的经理和赞助商。",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.manager ,  t1.sponsor FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "数量是1的订单的实际交货日期是多少？",
        "query": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN ORDER_ITEMS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "按照字母顺序倒序列出所有学生的详细资料。",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "planet_1",
        "question": "按名称的字母顺序列出所有行星的名称和坐标。",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "每个城市有多少个戏剧工作团体？返回城市和对应的数量。",
        "query": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "academic",
        "question": "把在“中国北方”机构的数量返回。",
        "query": "SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"中国北方\";",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE <unk>  =  \"中国北方\";"
    },
    {
        "db_id": "tv_shows",
        "question": "按站名的字母升序显示城市频道的城市名和电台名。",
        "query": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "manufacturer",
        "question": "找出最不受欢迎的家具的名称和部件数量。",
        "query": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
        "mask_query": "SELECT name ,  <unk> FROM <mask> ORDER BY market_rate LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "返回格式为“MP3”且分辨率低于1000的歌曲名称。",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"mp3\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  1000"
    },
    {
        "db_id": "sakila_1",
        "question": "统计“澳大利亚”的城市数量。",
        "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  '澳大利亚'",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<mask>  =  '澳大利亚'"
    },
    {
        "db_id": "cinema",
        "question": "计算标题包含“故事”的电影的数量。",
        "query": "SELECT count(*) FROM film WHERE title LIKE \"故事\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE title LIKE \"故事\""
    },
    {
        "db_id": "music_2",
        "question": "声乐类型是“领唱”的歌有多少？",
        "query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"领唱\"",
        "mask_query": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"领唱\""
    },
    {
        "db_id": "college_1",
        "question": "找出每个系提供的所有课程的总学分。",
        "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code",
        "mask_query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN <mask> AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code"
    },
    {
        "db_id": "geo",
        "question": "有多少河流不穿越省会是“郑州”的省",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"郑州\" );",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"郑州\" );"
    },
    {
        "db_id": "course_teach",
        "question": "最年轻的老师来自哪里？",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "每个作者的ACL会议",
        "query": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";",
        "mask_query": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.venueid  =  t2.venueid JOIN <mask> AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";"
    },
    {
        "db_id": "e_learning",
        "question": "统计没有参加任何课程的学生人数。",
        "query": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出从未订购过的客户的姓名。",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "mask_query": "SELECT <unk> FROM customers EXCEPT SELECT t1.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk>"
    },
    {
        "db_id": "headphone_store",
        "question": "找到任何商店都没有存货的耳机型号。",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "mask_query": "SELECT model FROM <mask> WHERE headphone_id NOT IN (SELECT headphone_id FROM <mask>)"
    },
    {
        "db_id": "country_language",
        "question": "按字母顺序排列的语言名称是什么？",
        "query": "SELECT name FROM languages ORDER BY name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "restaurant_bills",
        "question": "显示不同的分支管理器。",
        "query": "SELECT DISTINCT Manager FROM branch",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "马林拥有的文档对象的id是什么？",
        "query": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE OWNER  =  'Marlin'"
    },
    {
        "db_id": "icfp_1",
        "question": "哪些作者属于“百度”机构？显示名和姓氏。",
        "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"百度\"",
        "mask_query": "SELECT DISTINCT t1.<unk> ,  t1.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.<unk>  =  \"百度\""
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "被描述为“布里登集合”的文档对象的所有者是什么？",
        "query": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
        "mask_query": "SELECT OWNER FROM <mask> WHERE <unk>  =  'Braeden Collection'"
    },
    {
        "db_id": "wta_1",
        "question": "找出参加“WTA锦标赛”的左撇子获胜者的数目。",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA 锦标赛' AND winner_hand  =  '左'",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> WHERE <unk>  =  'WTA 锦标赛' AND <unk>  =  '左'"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示交易的所有日期和份额数。",
        "query": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS",
        "mask_query": "SELECT <unk> ,  <unk> FROM TRANSACTIONS"
    },
    {
        "db_id": "orchestra",
        "question": "计算指挥家的数量。",
        "query": "SELECT count(*) FROM conductor",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "返回使用最多的卡的类型代码。",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM Customers_cards GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "“四川”最短的河流是什么？",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river WHERE traverse  =  \"四川\" ) AND traverse  =  \"四川\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM <mask> WHERE <unk>  =  \"四川\" ) AND <unk>  =  \"四川\";"
    },
    {
        "db_id": "gymnast",
        "question": "返回身高最大的人的年龄。",
        "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "question": "按身高的上升顺序列出的人的名字是什么？",
        "query": "SELECT Name FROM People ORDER BY Height ASC",
        "mask_query": "SELECT <unk> FROM People ORDER BY <unk> ASC"
    },
    {
        "db_id": "aircraft",
        "question": "“北京”机场的国内旅客总数是多少？",
        "query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"北京\"",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk> LIKE \"北京\""
    },
    {
        "db_id": "driving_school",
        "question": "名字是“诚”和姓氏是“钟”的顾客是什么时候成为顾客的？",
        "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"诚\" AND last_name = \"钟\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"诚\" AND <unk> = \"钟\";"
    },
    {
        "db_id": "customer_complaints",
        "question": "按电子邮件地址和电话号码排序的所有客户的电子邮件和电话号码是什么？",
        "query": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers ORDER BY <unk> ,  <unk>"
    },
    {
        "db_id": "scholar",
        "question": "2014发表的论文篇数",
        "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
        "mask_query": "SELECT DISTINCT paperid FROM <mask> WHERE YEAR  =  2014;"
    },
    {
        "db_id": "tvshow",
        "question": "按照播出日期排序，所有卡通的名字和导演是什么？",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "mask_query": "SELECT title ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "college_2",
        "question": "参加2009、2010年课程的学生的名字是什么？",
        "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"
    },
    {
        "db_id": "csu_1",
        "question": "有多少个学校？",
        "query": "SELECT count(*) FROM campuses",
        "mask_query": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "baseball_1",
        "question": "找到所有有2到4个公园的城市。",
        "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*) BETWEEN 2 AND 4;"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "对于每个商店，返回在那里工作的雇员人数和店名。",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "mask_query": "SELECT count(*) ,  t2.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "db_id": "bakery_1",
        "question": "最便宜的曲奇的ID和口味是什么？",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "mask_query": "SELECT id ,  flavor FROM <mask> WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "找出“宠物梳理师”评论的用户",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"宠物梳理师\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t2.<unk>  =  \"宠物梳理师\";"
    },
    {
        "db_id": "book_review",
        "question": "书的类型和发行日期是什么？",
        "query": "SELECT TYPE ,  Release FROM book",
        "mask_query": "SELECT TYPE ,  <unk> FROM <mask>"
    },
    {
        "db_id": "world_1",
        "question": "“欧洲”大陆有“80000”人口的国家叫什么名字？",
        "query": "SELECT Name FROM country WHERE continent  =  \"欧洲\" AND Population  =  \"80000\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE continent  =  \"欧洲\" AND <unk>  =  \"80000\""
    },
    {
        "db_id": "aan_1",
        "question": "没有在acl上发表论文的作者的名字是什么？",
        "query": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"ACL\")"
    },
    {
        "db_id": "e_government",
        "question": "“民进党”组织最新联系人的姓氏是什么？",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"民进党\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "mask_query": "SELECT t3.<unk> FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.<unk>  =  t2.<unk> JOIN individuals AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"民进党\" ORDER BY t2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_driver",
        "question": "开车最多的司机的id是什么，他开了多少辆车？",
        "query": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  driver_id FROM <mask> GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”上“李政道”和“杨振宁”合著的的论文。",
        "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"李政道\" AND t1.name  =  \"杨振宁\" AND t4.name  =  \"PVLDB\";",
        "mask_query": "SELECT t6.<unk> FROM <mask> AS t6 JOIN <mask> AS t4 ON t6.<unk>  =  t4.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t6.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t6.<unk> JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<unk>  =  \"杨振宁\" AND t4.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "theme_gallery",
        "question": "每个艺术家都有多少展览？",
        "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "mask_query": "SELECT T2.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id"
    },
    {
        "db_id": "world_1",
        "question": "使用“英语”和“荷兰语”的国家的数量是多少？",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"英语\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"荷兰语\")",
        "mask_query": "SELECT COUNT(*) FROM (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英语\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"荷兰语\")"
    },
    {
        "db_id": "entertainment_awards",
        "question": "艺术节的名称和地点是什么？",
        "query": "SELECT Festival_Name ,  LOCATION FROM festival_detail",
        "mask_query": "SELECT <unk> ,  LOCATION FROM <mask>"
    },
    {
        "db_id": "institution_sports",
        "question": "按字母升序列出机构名称。",
        "query": "SELECT Name FROM institution ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "government_shift",
        "question": "查找所有名字中包含“库驰”的客户。",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
        "mask_query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\""
    },
    {
        "db_id": "browser_web",
        "question": "网络加速器“CACHEbox”和浏览器“IE浏览器”什么时候兼容的？",
        "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'IE浏览器'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN web_client_accelerator AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  =  'CACHEbox' AND T2.<unk>  =  'IE浏览器'"
    },
    {
        "db_id": "bakery_1",
        "question": "给出价格比任何馅饼产品都低的商品的ID。",
        "query": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
        "mask_query": "SELECT DISTINCT id FROM <mask> WHERE price  <  (SELECT max(price) FROM <mask> WHERE food  =  \"Tart\")"
    },
    {
        "db_id": "planet_1",
        "question": "在火星号上没有许可证的雇员人数是多少？",
        "query": "SELECT count(*) FROM Employee WHERE Name NOT IN ( SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\" );",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T1.<mask> = T3.<unk> WHERE T3.<unk> = \"Mars\" );"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”所在的机构。",
        "query": "SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "music_4",
        "question": "仪式的日期和所有音乐节的结果是什么？",
        "query": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "mask_query": "SELECT <unk> ,  RESULT FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "按预算从大到小列出所有部门的名称和建筑。",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "college_1",
        "question": "所有上“美术”课而且拿到成绩是“C”的学生的名字是什么？",
        "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  '美术' AND T2.enroll_grade  =  'C'",
        "mask_query": "SELECT T3.stu_fname FROM <mask> AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  '美术' AND T2.enroll_grade  =  'C'"
    },
    {
        "db_id": "tracking_orders",
        "question": "给我一张在“1975-01-01”和“1976-01-01”之间下订单的不同的产品ID的清单。",
        "query": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM orders AS T1 JOIN order_items AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> >= \"1975-01-01\" AND T1.<unk> <= \"1976-01-01\""
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "名为“最佳”的集合中的文档数是多少？",
        "query": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"Best\";"
    },
    {
        "db_id": "gymnast",
        "question": "列出5个最老的人的名字。",
        "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
        "mask_query": "SELECT <unk> FROM People ORDER BY <unk> DESC LIMIT 5"
    },
    {
        "db_id": "perpetrator",
        "question": "国家是“中国”或“日本”的犯罪者姓名是什么？",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"中国\" OR T2.Country  =  \"日本\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"中国\" OR T2.<unk>  =  \"日本\""
    },
    {
        "db_id": "company_employee",
        "question": "显示公司名称和员工姓名。",
        "query": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "哪些产品颜色不是“白色”，并且不以“一把”为单位进行测量？",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"白色\" AND t2.unit_of_measure != \"一把\"",
        "mask_query": "SELECT t1.<unk> FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.<unk>  =  t2.<unk> JOIN ref_colors AS t3 ON t1.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"白色\" AND t2.<unk> != \"一把\""
    },
    {
        "db_id": "dog_kennels",
        "question": "哪一位主人为他或她的狗支付了最多的治疗费？列出主人的ID和姓氏。",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "question": "俱乐部名称是什么，按字母升序排列？",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "performance_attendance",
        "question": "按照名字的字母升序显示会员姓名和演出地点。",
        "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T2.<unk> ASC"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”发表了最多数量论文的会议。",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" GROUP BY t2.<unk> ORDER BY COUNT ( DISTINCT t4.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "wine_1",
        "question": "“王朝葡萄酒厂”生产多少葡萄酒？",
        "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"王朝葡萄酒厂\"",
        "mask_query": "SELECT count(*) FROM WINE WHERE <unk>  =  \"王朝葡萄酒厂\""
    },
    {
        "db_id": "game_1",
        "question": "哪种游戏类型有最多的游戏？",
        "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "department_management",
        "question": "那些正在代理的负责人有哪些不同的年龄？",
        "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  '是'",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T2 JOIN <mask> AS T1 ON T1.head_id  =  T2.head_id WHERE T2.<unk>  =  '是'"
    },
    {
        "db_id": "document_management",
        "question": "查找没有任何图像的文档的名称。",
        "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
        "mask_query": "SELECT <unk> FROM documents EXCEPT SELECT t1.<unk> FROM documents AS t1 JOIN document_sections AS t2 ON t1.<unk>  =  t2.<unk> JOIN document_sections_images AS t3 ON t2.<unk>  =  t3.<unk>"
    },
    {
        "db_id": "flight_1",
        "question": "我们有多少架飞机？",
        "query": "SELECT count(*) FROM Aircraft",
        "mask_query": "SELECT count(*) FROM Aircraft"
    },
    {
        "db_id": "wedding",
        "question": "显示在2014年后的所有婚礼的一对男女的名字。",
        "query": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014",
        "mask_query": "SELECT T2.name ,  T3.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.male_id  =  T2.people_id JOIN <mask> AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014"
    },
    {
        "db_id": "voter_2",
        "question": "有主席选票但不是“2192”担任导师的学生有哪些不同的姓氏？",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT <unk> FROM STUDENT WHERE <unk>  =  \"2192\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示带有“临时”和“确认”状态代码的预订的公寓的公寓编号。",
        "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"确认\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"临时\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"确认\" INTERSECT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"临时\""
    },
    {
        "db_id": "academic",
        "question": "把引用最多的论文返回。",
        "query": "SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "voter_2",
        "question": "对于每位导师，报告接受其辅导的学生总数。",
        "query": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor",
        "mask_query": "SELECT <unk> ,  count(*) FROM STUDENT GROUP BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "把由“李政道”、“杨振宁”和“丁肇中”写的论文的号码返回。",
        "query": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"丁肇中\" AND t1.name  =  \"李政道\" AND t3.name  =  \"杨振宁\";",
        "mask_query": "SELECT COUNT ( DISTINCT t7.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t7 ON t4.<unk>  =  t7.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t7.<unk> JOIN <mask> AS t6 ON t6.<unk>  =  t7.<unk> JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t6.<unk>  =  t3.<unk> WHERE t2.<unk>  =  \"丁肇中\" AND t1.<unk>  =  \"李政道\" AND t3.<unk>  =  \"杨振宁\";"
    },
    {
        "db_id": "aan_1",
        "question": "有麦基翁、凯萨琳或兰博、欧文在作者名单上的论文标题和论文编号是什么？",
        "query": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE  T3.<unk> LIKE \"%Mckeown ,  Kathleen%\" OR T3.<unk> LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "sakila_1",
        "question": "返回最大的支付的金额。",
        "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "组织细节为“运动”的组织类型描述是什么？",
        "query": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  '运动'",
        "mask_query": "SELECT T1.<unk> FROM organisation_Types AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '运动'"
    },
    {
        "db_id": "dorm_1",
        "question": "找出所有宿舍中最常见的设施的名字。",
        "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "question": "给出比赛最多的类别。",
        "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT CLASS FROM <mask> GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示不带流程的所有文档的ID。",
        "query": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM Documents_processes"
    },
    {
        "db_id": "driving_school",
        "question": "昵称包含字“子”的职员“温”“子君” ，她教的所有职员的ID是什么？",
        "query": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"子君\" AND T2.last_name = \"温\" AND nickname LIKE \"%子%\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"子君\" AND T2.<unk> = \"温\" AND <unk> LIKE \"%子%\";"
    },
    {
        "db_id": "college_2",
        "question": "所有教过课程的老师的姓名以及相应的课程ID？",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "voter_2",
        "question": "报告所有指导超过2名学生的导师。",
        "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2",
        "mask_query": "SELECT <unk> FROM STUDENT GROUP BY <unk> HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "hr_1",
        "question": "找到平均工资在8000以上的职位的职位ID。",
        "query": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "mask_query": "SELECT job_id FROM <mask> GROUP BY job_id HAVING AVG(salary) > 8000"
    },
    {
        "db_id": "phone_market",
        "question": "显示每种手机的名称和总库存量。",
        "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
        "mask_query": "SELECT T2.<unk> ,  sum(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "imdb",
        "question": "“冯小刚”导演的电影流派是什么？",
        "query": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"冯小刚\";",
        "mask_query": "SELECT t3.<mask> FROM <mask> AS t5 JOIN <mask> AS t2 ON t5.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t5.<unk>  =  \"冯小刚\";"
    },
    {
        "db_id": "scholar",
        "question": "去年出版的论文",
        "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper );",
        "mask_query": "SELECT DISTINCT paperid FROM <mask> WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM <mask> );"
    },
    {
        "db_id": "company_office",
        "question": "按公司名称升序排列的每个公司的名称和资产是什么？",
        "query": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "pilot_1",
        "question": "找出比拥有单翼飞机最年轻的飞行员年龄都大的所有飞行员的数量。",
        "query": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
        "mask_query": "SELECT count(<unk>) FROM pilotskills WHERE <unk>  >  (SELECT min(<unk>) FROM pilotskills WHERE <unk>  =  'Piper Cub')"
    },
    {
        "db_id": "warehouse_1",
        "question": "每个地点的仓库的总容量、平均容量和最大容量是多少？",
        "query": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
        "mask_query": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "不同的产品尺寸是什么？",
        "query": "SELECT DISTINCT product_size FROM Products",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "party_host",
        "question": "显示主持人数大于20的聚会的主持人名字。",
        "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN HOST AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  >  20"
    },
    {
        "db_id": "address_1",
        "question": "显示至少有三名学生居住的所有城市的名称。",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  3"
    },
    {
        "db_id": "network_2",
        "question": "网络中性别是“女”的人数有多少？",
        "query": "SELECT count(*) FROM Person WHERE gender  =  '女'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '女'"
    },
    {
        "db_id": "headphone_store",
        "question": "按门店开放日期对所有门店名称进行排序。",
        "query": "SELECT name FROM store ORDER BY date_opened",
        "mask_query": "SELECT name FROM <mask> ORDER BY date_opened"
    },
    {
        "db_id": "epinions_1",
        "question": "找到没有写任何评论的用户的数量。",
        "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "body_builder",
        "question": "有多少人不是健美运动员？",
        "query": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE people_id NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "singer",
        "question": "显示歌曲名和歌手的名字。",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "car_road_race",
        "question": "列出制造商不是布加迪的司机的名字。",
        "query": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE CONSTRUCTOR != \"Bugatti\""
    },
    {
        "db_id": "device",
        "question": "列出没有设备库存的设备的载体。",
        "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "school_player",
        "question": "教派教不是“天主教”的学校的入学人数是什么？",
        "query": "SELECT Enrollment FROM school WHERE Denomination != \"天主教\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"天主教\""
    },
    {
        "db_id": "world_1",
        "question": "“亚洲”的总人口数和最大GNP是多少？",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"亚洲\"",
        "mask_query": "SELECT sum(<unk>) ,  max(<unk>) FROM <mask> WHERE <unk>  =  \"亚洲\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "告诉我最昂贵产品的名称。",
        "query": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM PRODUCTS ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "car_1",
        "question": "哪家汽车制造商生产至少2种型号的汽车和3种以上的汽车品牌？列出ID和制造商。",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2 INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.<unk>  =  T2.<unk> JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.<unk> HAVING count(*)  >  3;"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "有多少游客没有去参观？",
        "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "store_1",
        "question": "按照曲目数列出前5的流派。列出流派名称和总曲目。",
        "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
        "mask_query": "SELECT T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 5;"
    },
    {
        "db_id": "wrestler",
        "question": "展示那些既有被“大志”淘汰的摔跤选手，又有被“一龙”淘汰的摔跤选手的队伍。",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"大志\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"一龙\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"大志\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"一龙\""
    },
    {
        "db_id": "film_rank",
        "question": "有多少部电影？",
        "query": "SELECT count(*) FROM film",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "不同的卡片类型代码有哪些？",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "按字母顺序列出服务的类型。",
        "query": "SELECT service_type_code FROM services ORDER BY service_type_code",
        "mask_query": "SELECT service_type_code FROM services ORDER BY service_type_code"
    },
    {
        "db_id": "movie_1",
        "question": "在1980年之前制作的或者由“姜文”导演的电影的名字是什么？",
        "query": "SELECT title FROM Movie WHERE director  =  \"姜文\" OR YEAR   <  1980",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"姜文\" OR YEAR   <  1980"
    },
    {
        "db_id": "sakila_1",
        "question": "查找金额大于10而且由姓氏为“严”的工作人员处理的付款的日期。",
        "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  '严'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  10 UNION SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '严'"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "返回最低版本号及其对应的模板类型代码。",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "mask_query": "SELECT min(<unk>) ,  template_type_code FROM <mask>"
    },
    {
        "db_id": "dog_kennels",
        "question": "列出居住在“台湾”省或“福建”省的专家的电子邮件。",
        "query": "SELECT email_address FROM Professionals WHERE state  =  \"台湾\" OR state  =  \"福建\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"台湾\" OR <unk>  =  \"福建\""
    },
    {
        "db_id": "customers_and_orders",
        "question": "数一数地址的数目。",
        "query": "SELECT count(*) FROM Addresses",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "baseball_1",
        "question": "哪位球员有最多的全明星比赛经验？给出球员的名字，姓氏和id，以及其参与全明星比赛的次数。",
        "query": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> , T1.<unk> ,  T1.<unk> ,   count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "yelp",
        "question": "在“四川”“成都”找出所有“代客服务”的“餐厅”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"成都\" AND t1.state  =  \"四川\" AND t2.category_name  =  \"代客服务\" AND t3.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"成都\" AND t1.<unk>  =  \"四川\" AND t2.<unk>  =  \"代客服务\" AND t3.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "perpetrator",
        "question": "哪些国家至少有两个犯罪者？",
        "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "flight_4",
        "question": "“冰岛”所有机场的最大海拔是多少？",
        "query": "SELECT max(elevation) FROM airports WHERE country  =  \"冰岛\"",
        "mask_query": "SELECT max(<unk>) FROM <mask> WHERE <unk>  =  \"冰岛\""
    },
    {
        "db_id": "tracking_orders",
        "question": "找出最多两个订单的客户的名字。",
        "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "mask_query": "SELECT T2.<unk> FROM orders AS T1 JOIN customers AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk> HAVING count(*)  <=  2"
    },
    {
        "db_id": "music_2",
        "question": "哪种声乐的类型最常见？",
        "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "match_season",
        "question": "返回具有前锋位置的球员以及后卫位置的球员的国家名称。",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"前锋\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"后卫\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"前锋\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"后卫\""
    },
    {
        "db_id": "bike_racing",
        "question": "列出所有骑自行车的人的热度、名字和国家。",
        "query": "SELECT heat ,  name ,  nation FROM cyclist",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "art_1",
        "question": "最长寿的艺术家的名字和年龄是多少？",
        "query": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
        "mask_query": "SELECT <unk>  ,  <unk> - <unk> FROM artists ORDER BY <unk> - <unk> DESC LIMIT 1"
    },
    {
        "db_id": "college_3",
        "question": "统计超过2学分的课程数。",
        "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
        "mask_query": "SELECT count(*) FROM COURSE WHERE <unk>  >  2"
    },
    {
        "db_id": "school_player",
        "question": "按学校数量的降序排列教派。返回每个教派及其对应学校的数量。",
        "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "e_learning",
        "question": "没有参加任何课程的学生姓名是什么？",
        "query": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "browser_web",
        "question": "哪个加速器名称包含子字符串“Opera”？",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"Opera\"",
        "mask_query": "SELECT <unk> FROM web_client_accelerator WHERE <unk> LIKE \"Opera\""
    },
    {
        "db_id": "art_1",
        "question": "226号画廊所有雕塑的名字是什么？",
        "query": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
        "mask_query": "SELECT <unk> FROM sculptures WHERE LOCATION  =  \"Gallery 226\""
    },
    {
        "db_id": "allergy_1",
        "question": "不同专业有哪些？",
        "query": "SELECT DISTINCT Major FROM Student",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回包含“用户研究”关键词的“李政道”编写的论文。",
        "query": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"李政道\" AND t1.keyword  =  \"用户研究\";",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t3.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<mask>  =  \"用户研究\";"
    },
    {
        "db_id": "academic",
        "question": "把那些“李政道”和“杨振宁”写的被引用次数最多的论文返回。",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"杨振宁\" AND t1.name  =  \"李政道\" ORDER BY t5.citation_num DESC LIMIT 1;",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"杨振宁\" AND t1.<unk>  =  \"李政道\" ORDER BY t5.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "university_basketball",
        "question": "在比赛中ACC得分比最低的学校的初级会议是什么？",
        "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"
    },
    {
        "db_id": "music_2",
        "question": "找出歌曲“冰雨”中的声乐演唱类型的数量",
        "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"冰雨\"",
        "mask_query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"冰雨\""
    },
    {
        "db_id": "college_2",
        "question": "给出预算大于平均预算的部门的名称和建筑。",
        "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  (SELECT avg(<unk>) FROM <mask>)"
    },
    {
        "db_id": "gas_company",
        "question": "银行业中至少有两家公司的公司总部是什么？",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  '银行业' GROUP BY headquarters HAVING count(*)  >=  2",
        "mask_query": "SELECT headquarters FROM <mask> WHERE main_industry  =  '银行业' GROUP BY headquarters HAVING count(*)  >=  2"
    },
    {
        "db_id": "aircraft",
        "question": "飞机的描述是什么？",
        "query": "SELECT Description FROM aircraft",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "sakila_1",
        "question": "所有付款的总额是多少？",
        "query": "SELECT sum(amount) FROM payment",
        "mask_query": "SELECT sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "music_1",
        "question": "持续时间为“3”分钟的歌曲的最大分辨率和最小分辨率是什么？",
        "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "mask_query": "SELECT max(T2.<unk>) ,  min(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> LIKE \"3:%\""
    },
    {
        "db_id": "university_basketball",
        "question": "所有学校最大的招生人数是多少？",
        "query": "SELECT max(Enrollment) FROM university",
        "mask_query": "SELECT max(<unk>) FROM <mask>"
    },
    {
        "db_id": "institution_sports",
        "question": "显示既在1920年之前建立机构又在1950年之后建立机构的省份。",
        "query": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  1920 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  >  1950"
    },
    {
        "db_id": "network_2",
        "question": "“丹丹”的朋友有多少个？",
        "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  '丹丹'",
        "mask_query": "SELECT count(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '丹丹'"
    },
    {
        "db_id": "allergy_1",
        "question": "找到有“食物”类型过敏的男性(性别是“男”)的数量。",
        "query": "SELECT count(*) FROM Student WHERE sex  =  \"男\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"食物\")",
        "mask_query": "SELECT count(*) FROM <mask> WHERE sex  =  \"男\" AND <unk> IN (SELECT <unk> FROM Has_allergy AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.allergytype  =  \"食物\")"
    },
    {
        "db_id": "theme_gallery",
        "question": "显示按加入年份排序的所有艺术家的姓名，年龄和国家。",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "mask_query": "SELECT name ,  age ,  country FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "student_1",
        "question": "“沈”“丽雅”教了多少学生？",
        "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"沈\" AND T2.lastname  =  \"丽雅\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"沈\" AND T2.lastname  =  \"丽雅\""
    },
    {
        "db_id": "solvency_ii",
        "question": "显示不同的产品类型代码以及每个类型代码的产品数量。",
        "query": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "sing_contest",
        "question": "用“英语”演唱过一首歌的不同参与者的名字是什么？",
        "query": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  'English'"
    },
    {
        "db_id": "small_bank_1",
        "question": "按照字母序列出所有客户的名字。",
        "query": "SELECT name FROM accounts ORDER BY name",
        "mask_query": "SELECT <unk> FROM accounts ORDER BY <unk>"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "计算具有“热”特性的产品的数量。",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"热\"",
        "mask_query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"热\""
    },
    {
        "db_id": "cre_Theme_park",
        "question": "哪一个旅游景点与照片“游戏1”有关？返回它的名字。",
        "query": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"游戏1\"",
        "mask_query": "SELECT T2.<unk> FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"游戏1\""
    },
    {
        "db_id": "allergy_1",
        "question": "最小的学生的姓是什么？",
        "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE age  =  (SELECT min(age) FROM <mask>)"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "有多少事件没有参与者？",
        "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
        "mask_query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM <mask>)"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "请告诉我负责这个名字叫“故宫博物院”的景点的工作人员的名字。",
        "query": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"故宫博物院\"",
        "mask_query": "SELECT T1.<unk> FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"故宫博物院\""
    },
    {
        "db_id": "shop_membership",
        "question": "按注册年份排序的注册会员和分支机构的名称是什么？",
        "query": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
        "mask_query": "SELECT T3.name ,  T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id JOIN <mask> AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year"
    },
    {
        "db_id": "headphone_store",
        "question": "附近哪里没有耳机存货？",
        "query": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "员工人数最多的角色代码是什么？",
        "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT role_code FROM <mask> GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "苹果味商品的ID是什么？",
        "query": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
        "mask_query": "SELECT id FROM <mask> WHERE flavor  =  \"Apple\""
    },
    {
        "db_id": "soccer_3",
        "question": "列出没有球员的俱乐部的名称。",
        "query": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "ID 7的文件的邮寄日期是什么？",
        "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = 7;"
    },
    {
        "db_id": "dorm_1",
        "question": "找出不同性别学生的平均年龄和最高年龄。",
        "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
        "mask_query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"
    },
    {
        "db_id": "hr_1",
        "question": "显示所有名字中包含“安”字或“文”的所有员工的所有信息，并将结果按工资降序排列。",
        "query": "SELECT * FROM employees WHERE first_name LIKE '安' OR first_name LIKE 'S' ORDER BY salary DESC",
        "mask_query": "SELECT * FROM <mask> WHERE first_name LIKE '安' OR first_name LIKE 'S' ORDER BY salary DESC"
    },
    {
        "db_id": "dorm_1",
        "question": "按字母顺序对结果进行排序列出“礼堂”的所有设施的名称。",
        "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  '礼堂' ORDER BY T1.amenity_name",
        "mask_query": "SELECT T1.<unk> FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.<unk>  =  T1.<unk> JOIN dorm AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '礼堂' ORDER BY T1.<unk>"
    },
    {
        "db_id": "tvshow",
        "question": "按字母顺序列出所有卡通的标题。",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY title"
    },
    {
        "db_id": "student_1",
        "question": "对于每个年级，返回其年级号、使用的教室数量以及年级的学生总数。",
        "query": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "mask_query": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM <mask> GROUP BY grade"
    },
    {
        "db_id": "city_record",
        "question": "给我一张3月份气温低于7月份或高于10月份的城市名单。",
        "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "mask_query": "SELECT T1.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id  =  T2.city_id WHERE T2.<unk>  <  T2.<unk> OR T2.<unk>  >  T2.<unk>"
    },
    {
        "db_id": "customers_and_orders",
        "question": "价格高于硬件产品平均价格的硬件产品的名称是什么？",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Hardware\" AND <unk>  >  (SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  \"Hardware\")"
    },
    {
        "db_id": "car_1",
        "question": "1974年所生产的8缸汽车的最小重量是多少？",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM CARS_DATA WHERE <unk>  =  4 AND YEAR  =  1974 ORDER BY <unk> ASC LIMIT 1;"
    },
    {
        "db_id": "formula_1",
        "question": "2008年“摩纳哥大奖赛”比赛最快圈速是多少？",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"摩纳哥大奖赛\"",
        "mask_query": "SELECT max(T2.fastestlapspeed) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid WHERE T1.<unk> = 2008 AND T1.<unk> = \"摩纳哥大奖赛\""
    },
    {
        "db_id": "real_estate_rentals",
        "question": "最常见的房产类型的描述是什么？列出其说明和代码。",
        "query": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "program_share",
        "question": "哪些频道不属于“央视”？返回频道的名字。",
        "query": "SELECT name FROM channel WHERE OWNER != '央视'",
        "mask_query": "SELECT name FROM <mask> WHERE OWNER != '央视'"
    },
    {
        "db_id": "scientist_1",
        "question": "没有被指派的项目名称是什么？",
        "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "每个问题的日志ID和条目描述是什么？",
        "query": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
        "mask_query": "SELECT <unk> ,  <unk> FROM problem_log"
    },
    {
        "db_id": "scholar",
        "question": "提到ImageNet的会议",
        "query": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";",
        "mask_query": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";"
    },
    {
        "db_id": "art_1",
        "question": "最古老的画的名称和位置是什么？",
        "query": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1",
        "mask_query": "SELECT <unk> ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "找出所有在“厦门”的“海鲜”“餐厅”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"厦门\" AND t2.category_name  =  \"海鲜\" AND t3.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"厦门\" AND t2.<unk>  =  \"海鲜\" AND t3.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "baseball_1",
        "question": "列出1998年参加全明星赛的球员的名字和姓氏。",
        "query": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE YEAR  =  1998"
    },
    {
        "db_id": "customers_and_orders",
        "question": "杰若米的客户地址、客户电话和客户电子邮件是什么？",
        "query": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"Jeromy\""
    },
    {
        "db_id": "architecture",
        "question": "桥的平均长度是多少？",
        "query": "SELECT avg(length_feet) FROM bridge",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "列出研究人员的细节，并按升序排列。",
        "query": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "dog_kennels",
        "question": "被遗弃的狗的名字、年龄和体重是多少？注意在表中1表示是，0表示不。",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  1"
    },
    {
        "db_id": "wine_1",
        "question": "生产年份早于所有“张裕葡萄酒厂”的生产年份的葡萄酒名字是什么？",
        "query": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"张裕葡萄酒厂\")",
        "mask_query": "SELECT <unk> FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE <unk>  =  \"张裕葡萄酒厂\")"
    },
    {
        "db_id": "scholar",
        "question": "“克里斯·戴尔”没有写的“句法分析”论文是什么？",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"克里斯·戴尔\" AND t5.keyphrasename  =  \"句法分析\";",
        "mask_query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"克里斯·戴尔\" AND t5.keyphrasename  =  \"句法分析\";"
    },
    {
        "db_id": "club_1",
        "question": "找到“金” “洋”拥有的俱乐部成员的数量。",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"金\" AND t3.lname  =  \"洋\"",
        "mask_query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"金\" AND t3.lname  =  \"洋\""
    },
    {
        "db_id": "college_2",
        "question": "找出课程数量最多的一年。",
        "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "region_building",
        "question": "显示建筑物的地址和所在地区的首府。",
        "query": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "pilot_1",
        "question": "找出驾驶每种类型飞机最老飞行员的姓名，并按飞机名称排序结果。",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
        "mask_query": "SELECT <unk> ,  <unk> ,  max(<unk>) FROM pilotskills GROUP BY <unk> ORDER BY <unk>"
    },
    {
        "db_id": "entrepreneur",
        "question": "统计企业家人数。",
        "query": "SELECT count(*) FROM entrepreneur",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示所有发票的日期和订单ID和细节。",
        "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "university_rank",
        "question": "找出声誉得分在前3名及以上的大学的名称和引用分数。",
        "query": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.<unk> DESC LIMIT 3"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "模板类型描述是“书本”的模板类型代码是什么？",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"书本\"",
        "mask_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"书本\""
    },
    {
        "db_id": "phone_1",
        "question": "每种认证类型有多少手机？",
        "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "movie_1",
        "question": "曾经给出3星级和4星级评价的评价者的名字是什么？",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  3 INTERSECT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  4"
    },
    {
        "db_id": "loan_1",
        "question": "不同的银行分行的名称是什么，它们的贷款总额是多少？",
        "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "mask_query": "SELECT sum(<unk>) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.<unk>"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示作者名字是比安卡卡明斯的所有文档的ID和名称。",
        "query": "SELECT document_id ,  document_name FROM Documents WHERE author_name  =  \"Bianka Cummings\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"Bianka Cummings\""
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "上两门课程的学生的id和详细资料是什么？",
        "query": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  =  2"
    },
    {
        "db_id": "swimming",
        "question": "将所有事件名称按从最新到最老的年份列出。",
        "query": "SELECT name FROM event ORDER BY YEAR DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY YEAR DESC"
    },
    {
        "db_id": "farm",
        "question": "列出没有比赛的城市的官方名称。",
        "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "e_learning",
        "question": "每门课程的名称和相应的招生人数是多少？",
        "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "mask_query": "SELECT T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "显示邮件最多的客户的名字。",
        "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "question": "按申请资金的降序列出企业家及其公司的名字。",
        "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk>"
    },
    {
        "db_id": "music_1",
        "question": "列出所有有“4”分钟持续时间或语言是“英文”的歌曲的名字。",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"英文\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> LIKE \"4:%\" UNION SELECT <unk> FROM <mask> WHERE <unk>  =  \"英文\""
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "列出出现在文档id为1的流通文件上的员工的姓名。",
        "query": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
        "mask_query": "SELECT <mask>.<unk> FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = 1;"
    },
    {
        "db_id": "singer",
        "question": "在1945年之前和1955年之后出生的歌手所共有的国籍是什么？",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  1945 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  >  1955"
    },
    {
        "db_id": "station_weather",
        "question": "一周每一天的平均气温是多少？",
        "query": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "imdb",
        "question": "找出“杨幂”出演电影的导演",
        "query": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"杨幂\";",
        "mask_query": "SELECT t3.<unk> FROM CAST AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t5.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"杨幂\";"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出有多个发言人的地区的名称。",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "music_2",
        "question": "在演奏过最多数歌曲的乐队的成员的名字是什么？",
        "query": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.firstname FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.bandmate  =  t2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> GROUP BY firstname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "party_host",
        "question": "哪些聚会有的年龄超过50岁的主持人？给出聚会的地点。",
        "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN HOST AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  >  50"
    },
    {
        "db_id": "club_1",
        "question": "统计俱乐部“网球俱乐部”的成员数。",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"网球俱乐部\"",
        "mask_query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"网球俱乐部\""
    },
    {
        "db_id": "college_3",
        "question": "在DNO 140系辅修的学生的名字和姓氏是什么？",
        "query": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  140"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "每个员工的id和销毁的文件数量是多少？",
        "query": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "mask_query": "SELECT <unk> ,  count(*) FROM Documents_to_be_destroyed GROUP BY <unk>"
    },
    {
        "db_id": "book_press",
        "question": "哪家出版社的月利润最大？给出其名字。",
        "query": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
        "mask_query": "SELECT name FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "question": "身高大于200的健美运动员平均总分是多少？",
        "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
        "mask_query": "SELECT avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  200"
    },
    {
        "db_id": "flight_2",
        "question": "列出“拉萨”市的机场代码和名称。",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"拉萨\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM AIRPORTS WHERE city  =  \"拉萨\""
    },
    {
        "db_id": "allergy_1",
        "question": "对“牛奶”和“猫”过敏的学生的姓氏和年龄是多少？",
        "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"牛奶\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"猫\")",
        "mask_query": "SELECT lname ,  age FROM <mask> WHERE <unk> IN (SELECT <unk> FROM Has_allergy WHERE <unk>  =  \"牛奶\" INTERSECT SELECT <unk> FROM Has_allergy WHERE <unk>  =  \"猫\")"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "药品有多少种不同的FDA批准状态？",
        "query": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "book_press",
        "question": "找出出版图书最多的作者的姓名和性别。",
        "query": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.name ,  t1.gender FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "那个省与最小地区接壤",
        "query": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "imdb",
        "question": "“姜文”的最新电影是什么？",
        "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"姜文\" ORDER BY t3.release_year DESC LIMIT 1;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"姜文\" ORDER BY t3.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "geo",
        "question": "哪些省的资本是国家的最高点？",
        "query": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital  =  t2.highest_point;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk>;"
    },
    {
        "db_id": "online_exams",
        "question": "列出性别不是“M”的学生的姓氏。",
        "query": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"M\""
    },
    {
        "db_id": "hospital_1",
        "question": "处方量最高的医生叫什么名字？",
        "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "mask_query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
    },
    {
        "db_id": "activity_1",
        "question": "显示所有活动名称和参与每个活动的教职工人数。",
        "query": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"
    },
    {
        "db_id": "academic",
        "question": "返回与“李政道”相关的关键词的数量。",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"李政道\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<mask> ) FROM <mask> AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "country_language",
        "question": "按总分降序显示国家名称。",
        "query": "SELECT name FROM countries ORDER BY overall_score DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "university_rank",
        "question": "所有不同的家庭会议有哪些？",
        "query": "SELECT DISTINCT home_conference FROM University",
        "mask_query": "SELECT DISTINCT home_conference FROM University"
    },
    {
        "db_id": "geo",
        "question": "什么省没有河流",
        "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> );"
    },
    {
        "db_id": "program_share",
        "question": "哪些频道既在“早上”时间又在“晚上”时间播出？把频道的名字给我。",
        "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  '早上' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  '晚上'",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  '早上' INTERSECT SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  '晚上'"
    },
    {
        "db_id": "film_rank",
        "question": "1995年度不同市场预估的电影导演是谁？",
        "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  1995"
    },
    {
        "db_id": "race_track",
        "question": "列出有至少两个比赛的比赛类别。",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "mask_query": "SELECT CLASS FROM <mask> GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "college_1",
        "question": "按照名字顺序列出所有院系的名称。",
        "query": "SELECT dept_name FROM department ORDER BY dept_name",
        "mask_query": "SELECT dept_name FROM department ORDER BY dept_name"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "计算帐号的数量。",
        "query": "SELECT count(*) FROM Accounts",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "network_2",
        "question": "没有朋友的人的名字是什么？",
        "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "mask_query": "SELECT <unk> FROM person EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "company_office",
        "question": "哪家公司拥有最多的公司办公室？给出建筑物名称。",
        "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "“李安”在2010之前导演了多少部电影？",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"李安\" AND t3.release_year  <  2010;",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk>  ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李安\" AND t3.<unk>  <  2010;"
    },
    {
        "db_id": "sakila_1",
        "question": "给出有两个或两个以上地址的地区。",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "显示预算描述类型为“政府”的所有文件的ID。",
        "query": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"政府\"",
        "mask_query": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN <mask> AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"政府\""
    },
    {
        "db_id": "student_1",
        "question": "4年级使用哪些教室？",
        "query": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "mask_query": "SELECT DISTINCT classroom FROM <mask> WHERE grade  =  4"
    },
    {
        "db_id": "scholar",
        "question": "谁在NIPS上出版过论文？",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "mask_query": "SELECT DISTINCT t1.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.venueid  =  t2.venueid JOIN <mask> AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";"
    },
    {
        "db_id": "customers_and_orders",
        "question": "计算购买显示器产品的不同客户的数量。",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "mask_query": "SELECT count(DISTINCT T3.<unk>) FROM Order_items AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Customer_orders AS T3 ON T3.<unk>  =  T1.<unk> WHERE T2.<unk>  =  \"Monitor\""
    },
    {
        "db_id": "address_1",
        "question": "告诉我波士顿和纽瓦克之间的距离。",
        "query": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"Boston\" AND T3.<unk>  =  \"Newark\""
    },
    {
        "db_id": "csu_1",
        "question": "2000年度的\"厦门大学\"的学费金额是多少？",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"厦门大学\" AND t1.year  =  2000",
        "mask_query": "SELECT t1.campusfee FROM <mask> AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"厦门大学\" AND t1.year  =  2000"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "大多数订单使用的付款方法代码是什么？",
        "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM INVOICES GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "所有花费少于5000英镑的且是医师“文翰”执行的手术有哪些？",
        "query": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\"",
        "mask_query": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\""
    },
    {
        "db_id": "scholar",
        "question": "TACL 2014最好的论文是什么？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM <mask> AS t1 JOIN <mask> AS t3 ON t1.paperid  =  t3.citedpaperid JOIN <mask> AS t2 ON t2.venueid  =  t1.venueid WHERE t1.<unk>  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”的发表过论文的期刊。。",
        "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "pilot_1",
        "question": "驾驶单翼飞机最年轻的飞行员是谁？",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "mask_query": "SELECT <unk> FROM pilotskills WHERE <unk>  =  'Piper Cub' ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "住址的月租金最低的学生的手机号码是多少？",
        "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "question": "哪些州至少有两个城市？",
        "query": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "book_1",
        "question": "显示所有图书ISBN和每个图书的订单数量。",
        "query": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
        "mask_query": "SELECT isbn ,  count(*) FROM <mask> GROUP BY isbn"
    },
    {
        "db_id": "bike_1",
        "question": "八月份出发次数最多的那个出发站的名称和ID是什么？",
        "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"八月\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> LIKE \"八月\" GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_3",
        "question": "俱乐部的经理和队长是谁？",
        "query": "SELECT Manager ,  Captain FROM club",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "e_learning",
        "question": "有多少测试的结果是“失败”？",
        "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"失败\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"失败\""
    },
    {
        "db_id": "driving_school",
        "question": "所有客户的名字和名字是什么？",
        "query": "SELECT first_name ,  last_name FROM Customers;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>;"
    },
    {
        "db_id": "epinions_1",
        "question": "查找具有最低平均评分的项目的名称。",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY avg(T2.<unk>) LIMIT 1"
    },
    {
        "db_id": "dorm_1",
        "question": "既有“客厅”又有“自习室”的宿舍叫什么名字？",
        "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  '客厅' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  '自习室'",
        "mask_query": "SELECT T1.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '客厅' INTERSECT SELECT T1.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '自习室'"
    },
    {
        "db_id": "sakila_1",
        "question": "哪部电影的出租率最高？比率是多少？",
        "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "名为“军”的老师的性别是什么？",
        "query": "SELECT gender FROM TEACHERS WHERE last_name  =  \"军\"",
        "mask_query": "SELECT <unk> FROM TEACHERS WHERE <unk>  =  \"军\""
    },
    {
        "db_id": "chinook_1",
        "question": "找到爵士乐曲目的平均单价。",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"爵士\"",
        "mask_query": "SELECT AVG(<unk>) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"爵士\""
    },
    {
        "db_id": "phone_1",
        "question": "“小米”生产的手机最大和最小RAM尺寸是多少？",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"小米\";",
        "mask_query": "SELECT max(T1.<unk>) ,  min(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<mask> WHERE T2.<unk> = \"小米\";"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "每一个订单所订购的物品的平均数量是多少？",
        "query": "SELECT avg(order_quantity) FROM order_items",
        "mask_query": "SELECT avg(<unk>) FROM order_items"
    },
    {
        "db_id": "online_exams",
        "question": "哪些学生的答案同时收到“正常”和“缺席”作为评论？",
        "query": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Normal\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"Absent\""
    },
    {
        "db_id": "geo",
        "question": "“浙江”有多少居民居住",
        "query": "SELECT population FROM state WHERE state_name  =  \"浙江\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"浙江\";"
    },
    {
        "db_id": "election_representative",
        "question": "按投票率的降序排列，代表的有效期是什么？",
        "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY <unk> DESC"
    },
    {
        "db_id": "university_basketball",
        "question": "统计有篮球比赛的学校的数量。",
        "query": "SELECT count(DISTINCT school_id) FROM basketball_match",
        "mask_query": "SELECT count(DISTINCT school_id) FROM <mask>"
    },
    {
        "db_id": "advertising_agencies",
        "question": "每个SIC代码对应有多少个客户？",
        "query": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "club_1",
        "question": "找出“赛车”俱乐部成员的平均年龄。",
        "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\"",
        "mask_query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\""
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "不是父文档的文档的ID是什么？",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "voter_2",
        "question": "哪个专业的学生最多？",
        "query": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "school_finance",
        "question": "列出入学人数最少的学校的名字。",
        "query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1",
        "mask_query": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"
    },
    {
        "db_id": "farm",
        "question": "按照升序排列，每一个农场的马的总数是什么？",
        "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "tvshow",
        "question": "列出所有由“黄伟明”导演的卡通。",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"黄伟明\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"黄伟明\";"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "ID为9的流程的下一个流程的流程名是什么？",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "mask_query": "SELECT <unk> FROM Business_processes WHERE <unk>  =  (SELECT <unk> FROM Business_processes WHERE <unk>  =  9)"
    },
    {
        "db_id": "vehicle_rent",
        "question": "显示2014年和2013年的车辆的动力系统类型。",
        "query": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
        "mask_query": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013"
    },
    {
        "db_id": "sakila_1",
        "question": "付款总额最低的客户的全名和id是什么？",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY sum(<unk>) ASC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "与“新疆”接壤的哪个省的人口最多？",
        "query": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"新疆\" ) ORDER BY population DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"新疆\" ) ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "university_rank",
        "question": "按声誉点数升序排列的所有大学的名称是什么？",
        "query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
        "mask_query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出名为“国家艺术馆”的地址。",
        "query": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"国家艺术馆\"",
        "mask_query": "SELECT <unk> FROM LOCATIONS WHERE <unk>  =  \"国家艺术馆\""
    },
    {
        "db_id": "film_rank",
        "question": "显示与导演“姜文”和“李安”一起制作电影的制片厂。",
        "query": "SELECT Studio FROM film WHERE Director  =  \"姜文\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"李安\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"姜文\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"李安\""
    },
    {
        "db_id": "wta_1",
        "question": "找出每个国家的球员数量。",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "返回拥有“李政道”的论文的会议的数量。",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "yelp",
        "question": "找出所有拥有“南京大牌档”“餐厅”的城市",
        "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"南京大牌档\" AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"南京大牌档\" AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "scholar",
        "question": "“实例分类”相关的期刊论文",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"实例分类\" AND t3.journalid  >=  0;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"实例分类\" AND t3.journalid  >=  0;"
    },
    {
        "db_id": "warehouse_1",
        "question": "每个存储物的总价值和箱子数目是多少？",
        "query": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "mask_query": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "perpetrator",
        "question": "有着最大死亡人数的犯罪者地点是什么？",
        "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "mask_query": "SELECT LOCATION FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "中国的平均人口是多少？",
        "query": "SELECT AVG ( population ) FROM state;",
        "mask_query": "SELECT AVG ( <unk> ) FROM <mask>;"
    },
    {
        "db_id": "college_1",
        "question": "找出gpa低于所有学生平均gpa的学生的名字和gpa。",
        "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
        "mask_query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)"
    },
    {
        "db_id": "pets_1",
        "question": "每一个1岁以上的宠物的ID和体重是多少？",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "mask_query": "SELECT petid ,  <unk> FROM pets WHERE <unk>  >  1"
    },
    {
        "db_id": "flight_4",
        "question": "查找“广州”市机场的名称、城市、国家和海拔高度。",
        "query": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  \"广州\"",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"广州\""
    },
    {
        "db_id": "yelp",
        "question": "“成都”的“星巴克”附近有多少家企业？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"成都\" AND t2.neighbourhood_name  =  \"星巴克\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"成都\" AND t2.<unk>  =  \"星巴克\";"
    },
    {
        "db_id": "customer_deliveries",
        "question": "找出订单的ID，其状态是“成功”。",
        "query": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  '成功'",
        "mask_query": "SELECT <unk> FROM actual_orders WHERE <unk>  =  '成功'"
    },
    {
        "db_id": "scholar",
        "question": "列出与“时态数据”有关的期刊",
        "query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"时态数据\" GROUP BY t3.journalid;",
        "mask_query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"时态数据\" GROUP BY t3.journalid;"
    },
    {
        "db_id": "world_1",
        "question": "面积最大的“亚洲”国家的名称、人口和预期寿命是什么？",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"亚洲\" ORDER BY SurfaceArea DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"亚洲\" ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "返回具有最高总金额的交易类型。",
        "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM Financial_transactions GROUP BY <unk> ORDER BY sum(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "找出“黄渤”表演最新的电影",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"黄渤\" ORDER BY t3.release_year DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"黄渤\" ORDER BY t3.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "question": "返回每个房间的名字和被预定的次数。",
        "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "mask_query": "SELECT T2.<unk> ,  count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "boat_1",
        "question": "预定红色和蓝色船只的水手的名字和id是什么？",
        "query": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
        "mask_query": "SELECT DISTINCT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON  T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  'red' INTERSECT SELECT DISTINCT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON  T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  \"blue\""
    },
    {
        "db_id": "customer_complaints",
        "question": "对于“产品故障”类型代码的投诉，每个不同的状态代码有多少个？",
        "query": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"产品故障\" GROUP BY complaint_status_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM complaints WHERE <unk>  =  \"产品故障\" GROUP BY <unk>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "返回具有最少文档的项目ID。",
        "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT project_id FROM <mask> GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "列出没有出现在任何流通文件上的员工的姓名。",
        "query": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <mask>.<unk> FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk>"
    },
    {
        "db_id": "headphone_store",
        "question": "列出泰山附近的商店的名称和停车信息。",
        "query": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
        "mask_query": "SELECT name ,  parking FROM <mask> WHERE neighborhood  =  'Tarzana'"
    },
    {
        "db_id": "advertising_agencies",
        "question": "有多少员工没有参加任何会议？",
        "query": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM Staff_in_meetings )"
    },
    {
        "db_id": "club_1",
        "question": "统计在俱乐部“赛车”的不同位置的数量。",
        "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"赛车\"",
        "mask_query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"赛车\""
    },
    {
        "db_id": "academic",
        "question": "返回“PVLDB”会议中的关键字个数。",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<mask> ) FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t4.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "world_1",
        "question": "讲“西班牙语”的人口比例最大的国家的代码是什么？",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"西班牙语\" GROUP BY CountryCode",
        "mask_query": "SELECT <unk> ,  max(<unk>) FROM <mask> WHERE LANGUAGE  =  \"西班牙语\" GROUP BY <unk>"
    },
    {
        "db_id": "hospital_1",
        "question": "找出在111号病房住院的病人用药的名称。",
        "query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
        "mask_query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.<mask>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<mask>  =  T2.<unk> JOIN <mask> AS T4 ON T3.<mask>  =  T4.<unk> WHERE room  =  111"
    },
    {
        "db_id": "imdb",
        "question": "“让子弹飞”的预算是多少？",
        "query": "SELECT budget FROM movie WHERE title  =  \"让子弹飞\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"让子弹飞\";"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "哪些学生报名参加任何项目的次数最多？列出id、名字、中间名、姓氏、参加次数和学生id。",
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> ,  T1.<unk> ,  count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "boat_1",
        "question": "不是最年轻的水手的所有不同的id是什么？",
        "query": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  (SELECT min(<unk>) FROM <mask>);"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "所有章节的名称和描述是什么？",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "inn_1",
        "question": "那些底价低于160美元并包含两张床的现代风格的房间叫什么名字？",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  '现代化';",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  160 AND <unk> =  2 AND <unk>  =  '现代化';"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "有多少种不同的索赔结果代码？",
        "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "mask_query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing"
    },
    {
        "db_id": "aan_1",
        "question": "有一篇论文的作者叫什么名字？",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  =  1"
    },
    {
        "db_id": "program_share",
        "question": "按字母顺序排列的节目来源列表是什么？",
        "query": "SELECT origin FROM program ORDER BY origin",
        "mask_query": "SELECT origin FROM <mask> ORDER BY origin"
    },
    {
        "db_id": "apartment_rentals",
        "question": "每个公寓的公寓号和房间数量是多少？",
        "query": "SELECT apt_number ,  room_count FROM Apartments",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "poker_player",
        "question": "扑克玩家的平均收入是多少？",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "baseball_1",
        "question": "给出赢得了经理奖的经理的名字、姓氏和id。",
        "query": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "谁是文档名是“巴西之行”的作者？",
        "query": "SELECT author_name FROM Documents WHERE document_name  =  \"Travel to Brazil\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Travel to Brazil\""
    },
    {
        "db_id": "conference",
        "question": "对于每个机构ID，1800年后成立的每个机构有多少工作人员？",
        "query": "SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id",
        "mask_query": "SELECT T1.institution_name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id"
    },
    {
        "db_id": "college_1",
        "question": "课程编号为“美术”的学生的平均gpa是多少？",
        "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  '美术'",
        "mask_query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN <mask> AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  '美术'"
    },
    {
        "db_id": "hr_1",
        "question": "管理超过3名员工的经理所在部门的部门id是什么？",
        "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "mask_query": "SELECT DISTINCT department_id FROM <mask> GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "查找所有角色名称为“编辑”的雇员的姓名。",
        "query": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"编辑\"",
        "mask_query": "SELECT T1.employee_name FROM <mask> AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"编辑\""
    },
    {
        "db_id": "network_2",
        "question": "有多少“摄影师”的年龄超过30岁？",
        "query": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  '摄影师'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  30 AND <unk>  =  '摄影师'"
    },
    {
        "db_id": "mountain_photos",
        "question": "有多少种不同的相机镜头被用来拍摄“华山”的山脉？",
        "query": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  '华山'",
        "mask_query": "SELECT count(DISTINCT T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.country  =  '华山'"
    },
    {
        "db_id": "boat_1",
        "question": "每一个等级超过2级并预定了一艘船的水手的名字和id是什么？",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE  T1.<unk>  >  2"
    },
    {
        "db_id": "warehouse_1",
        "question": "查找价值高于所有箱子的平均值的所有箱子的存储物。",
        "query": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
        "mask_query": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "名字是“梁”的员工报告了哪些问题？显示问题的描述。",
        "query": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"梁\"",
        "mask_query": "SELECT T1.<unk> FROM problems AS T1 JOIN staff AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"梁\""
    },
    {
        "db_id": "academic",
        "question": "返回在2005年后由“李政道”和“杨振宁”撰写的论文。",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"李政道\" AND t1.name  =  \"杨振宁\" AND t5.year  >  2005;",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<unk>  =  \"杨振宁\" AND t5.<unk>  >  2005;"
    },
    {
        "db_id": "network_1",
        "question": "没有朋友的学生的名字是什么？",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "列出在名为2000最佳的文档子集和名为“最佳”的集合中的文档的ID。",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk> WHERE T2.<unk> = \"Best for 2000\" AND T4.<unk> = \"Best\";"
    },
    {
        "db_id": "advertising_agencies",
        "question": "返回至少有两张发票的客户的客户ID。",
        "query": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "debate",
        "question": "最年轻的人的党派是什么？",
        "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "car_1",
        "question": "汽车制造商最多的国家叫什么名字？",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "academic",
        "question": "把在“VLDB”会议上拥有最多论文的作者返回。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"VLDB\" GROUP BY t1.<unk> ORDER BY COUNT ( DISTINCT t4.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "flight_4",
        "question": "“山东航空公司”目的地的不同机场的数量是多少？",
        "query": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  \"山东航空公司\"",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"山东航空公司\""
    },
    {
        "db_id": "headphone_store",
        "question": "查找不包含两个以上耳机的耳机类。",
        "query": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
        "mask_query": "SELECT CLASS FROM <mask> GROUP BY CLASS HAVING count(*)  >  2"
    },
    {
        "db_id": "aan_1",
        "question": "哪个地点的出版物最少？",
        "query": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> FROM paper GROUP BY <unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“丹·克莱因”在EMNLP论文中使用的关键词",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"丹·克莱因\" AND t4.venuename  =  \"emnlp\";",
        "mask_query": "SELECT DISTINCT t2.keyphraseid FROM <mask> AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid JOIN <mask> AS t5 ON t5.paperid  =  t3.paperid JOIN <mask> AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"丹·克莱因\" AND t4.venuename  =  \"emnlp\";"
    },
    {
        "db_id": "scholar",
        "question": "谁在2005之后发表了最多数量的“语义分析”论文？",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"语义分析\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN <mask> AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t1.paperid JOIN <mask> AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"语义分析\" AND t4.<unk>  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "db_id": "advertising_agencies",
        "question": "返回付款数最多的发票的发票ID、状态和详细信息。",
        "query": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "“珠江”经历了多少个省？",
        "query": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"珠江\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  \"珠江\";"
    },
    {
        "db_id": "csu_1",
        "question": "“武汉”所有校区的名称是什么？",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"武汉\"",
        "mask_query": "SELECT campus FROM campuses WHERE LOCATION  =  \"武汉\""
    },
    {
        "db_id": "museum_visit",
        "question": "查找工作人员人数超过2010年后开馆的博物馆的最少工作人员人数的博物馆的名称。",
        "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "mask_query": "SELECT name FROM <mask> WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM <mask> WHERE open_year  >  2010)"
    },
    {
        "db_id": "department_management",
        "question": "大多数部门在哪一年成立？",
        "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT creation FROM <mask> GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "question": "哪些国家有高于5600的山和低于5200的山？",
        "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  5600 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  5200"
    },
    {
        "db_id": "chinook_1",
        "question": "找到没有任何专辑的艺术家的名字。",
        "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "mask_query": "SELECT <unk> FROM ARTIST EXCEPT SELECT T2.<unk> FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "dog_kennels",
        "question": "每个治疗的费用和治疗类型描述是什么？",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN treatment_types AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "swimming",
        "question": "找出“胜利”1次以上比赛的游泳运动员的姓名和国籍。",
        "query": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  '胜利' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
        "mask_query": "SELECT t1.<unk> ,  t1.nationality FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  '胜利' GROUP BY t2.swimmer_id HAVING count(*)  >  1"
    },
    {
        "db_id": "ship_1",
        "question": "没有“中尉”级别的船长指挥的船名和标志是什么？",
        "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  \"中尉\")",
        "mask_query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM <mask> WHERE rank  =  \"中尉\")"
    },
    {
        "db_id": "dog_kennels",
        "question": "每个收费类型要多少钱？列出费用类型及其金额。",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "county_public_safety",
        "question": "显示一个白人比例超过90的城市的犯罪率。",
        "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  90"
    },
    {
        "db_id": "musical",
        "question": "每个被提名者有多少音乐剧被提名？",
        "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "请列出参加两个或两个以上课程的学生和有过两次以下拘留的学生的简历和学生id。",
        "query": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2 UNION SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  <  2"
    },
    {
        "db_id": "art_1",
        "question": "列出所有画作的标题和位置。",
        "query": "SELECT title ,  LOCATION FROM paintings",
        "mask_query": "SELECT <unk> ,  LOCATION FROM paintings"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "哪些组织不是其他组织的父组织？列出组织ID。",
        "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "mask_query": "SELECT <unk> FROM organizations EXCEPT SELECT <unk> FROM organizations"
    },
    {
        "db_id": "geo",
        "question": "“昆明”在哪里",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"昆明\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"昆明\";"
    },
    {
        "db_id": "bakery_1",
        "question": "ID上写着“70”的商品的ID和价格是多少？",
        "query": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
        "mask_query": "SELECT id ,  price FROM <mask> WHERE id LIKE \"%70%\""
    },
    {
        "db_id": "formula_1",
        "question": "按年份排序，在2004年按比赛名称分组举办的比赛平均最快圈速是多少？",
        "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "mask_query": "SELECT avg(T2.fastestlapspeed) ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid WHERE T1.<unk> > 2014 GROUP BY T1.<unk> ORDER BY T1.<unk>"
    },
    {
        "db_id": "book_1",
        "question": "谁是《傲慢与偏见》一书的作者？",
        "query": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
        "mask_query": "SELECT T3.name FROM <mask> AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN <mask> AS T3 ON T2.<mask>  =  T3.<unk> WHERE T1.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "在没有任何邮件的情况下显示客户的姓名和电话。",
        "query": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers WHERE <unk> NOT IN (SELECT <unk> FROM mailshot_customers)"
    },
    {
        "db_id": "academic",
        "question": "把“PVLDB”所有论文的总引用返回。",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "imdb",
        "question": "2015年关于“伊拉克战争”有多少电影？",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"伊拉克战争\" AND t3.release_year  =  2015;",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk>  ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<mask>  =  \"伊拉克战争\" AND t3.<unk>  =  2015;"
    },
    {
        "db_id": "apartment_rentals",
        "question": "返回所有客人的名字和姓氏。",
        "query": "SELECT guest_first_name ,  guest_last_name FROM Guests",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "concert_singer",
        "question": "显示体育场的名称和每个体育场举办音乐会的数量。",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "mask_query": "SELECT T2.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "db_id": "world_1",
        "question": "返回那些不讲“英语”且没有“共和制”政府的国家的代码。",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"共和制\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"英语\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"共和制\" EXCEPT SELECT <unk> FROM <mask> WHERE LANGUAGE  =  \"英语\""
    },
    {
        "db_id": "pilot_1",
        "question": "按飞机名称排序的不同飞机的位置是什么？",
        "query": "SELECT LOCATION FROM hangar ORDER BY plane_name",
        "mask_query": "SELECT LOCATION FROM hangar ORDER BY <unk>"
    },
    {
        "db_id": "student_assessment",
        "question": "注册课程但不参加课程的学生都有哪些信息？",
        "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "mask_query": "SELECT * FROM student_course_registrations WHERE <unk> NOT IN (SELECT <unk> FROM student_course_attendance)"
    },
    {
        "db_id": "geo",
        "question": "“山东”哪个城市人口最多",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"山东\" ) AND state_name  =  \"山东\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk>  =  \"山东\" ) AND <unk>  =  \"山东\";"
    },
    {
        "db_id": "musical",
        "question": "谁是被提名音乐剧最多的的被提名人？",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_orders",
        "question": "列出所有订单状态为“打包”的不同客户的名称。",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"打包\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"打包\""
    },
    {
        "db_id": "e_learning",
        "question": "按姓氏的字母顺序排序的学生的名字和姓氏是什么？",
        "query": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "找出所有由“赵毅”评论的至少有3颗星的“酒吧”。",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"酒吧\" AND t4.name  =  \"赵毅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t1.<unk>  >=  3 AND t2.<unk>  =  \"酒吧\" AND t4.<unk>  =  \"赵毅\";"
    },
    {
        "db_id": "college_1",
        "question": "找出所有教过某门课的教师的姓名和办公室，并找到课程描述。",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",
        "mask_query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM <mask> AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num"
    },
    {
        "db_id": "bakery_1",
        "question": "买柠檬味蛋糕的顾客有哪些不同的ID？",
        "query": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
        "mask_query": "SELECT DISTINCT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  \"Lemon\" AND T1.<unk>  =  \"Cake\""
    },
    {
        "db_id": "phone_1",
        "question": "查找硬件型号为“LG-P760”的电话屏幕的Char单元、像素和硬件颜色。",
        "query": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<mask> WHERE T2.<unk> = \"LG-P760\";"
    },
    {
        "db_id": "college_2",
        "question": "查找每学期和一年提供的课程数量。",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "mask_query": "SELECT count(*) ,  <unk> ,  YEAR FROM SECTION GROUP BY <unk> ,  YEAR"
    },
    {
        "db_id": "product_catalog",
        "question": "所有目录项名称是什么？",
        "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "mask_query": "SELECT distinct(<unk>) FROM catalog_contents"
    },
    {
        "db_id": "riding_club",
        "question": "拥有最多教练的俱乐部有多少枚金牌？",
        "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.club_id ,  T1.gold FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示SIC代码为“错误”的所有客户ID及其详细信息。",
        "query": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"Bad\";"
    },
    {
        "db_id": "soccer_3",
        "question": "山姆·阿勒代斯管理的俱乐部的球员叫什么名字？",
        "query": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"Sam Allardyce\""
    },
    {
        "db_id": "art_1",
        "question": "在240号画廊最古老的画之前创作的每一幅画的ID是多少？",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "mask_query": "SELECT <unk> FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "car_1",
        "question": "所有4缸汽车每加仑汽油能行驶的平均英里数是多少？",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "mask_query": "SELECT avg(mpg) FROM CARS_DATA WHERE <unk>  =  4;"
    },
    {
        "db_id": "college_2",
        "question": "查找在2009“秋季”但不在2010“春季”的课程。",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  '秋季' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  '春季' AND YEAR  =  2010",
        "mask_query": "SELECT <unk> FROM SECTION WHERE <unk>  =  '秋季' AND YEAR  =  2009 EXCEPT SELECT <unk> FROM SECTION WHERE <unk>  =  '春季' AND YEAR  =  2010"
    },
    {
        "db_id": "store_1",
        "question": "这张“奇幻旅程”专辑中的所有歌曲的名字是什么？",
        "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"奇幻旅程\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"奇幻旅程\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "文档对象的对象ID是什么？",
        "query": "SELECT Document_Object_ID FROM Document_Objects;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "protein_institute",
        "question": "显示蛋白质名称和机构名称。",
        "query": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "mask_query": "SELECT T2.<unk> ,  T1.institution FROM institution AS T1 JOIN <mask> AS T2 ON T1.institution_id  =  T2.institution_id"
    },
    {
        "db_id": "bike_1",
        "question": "从“重庆”的一个车站到“西安”的一个车站，总共有多少次旅行？",
        "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"重庆\" AND T3.city  =  \"西安\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 JOIN <mask> AS T3 JOIN <mask> AS T4 ON T1.<unk>  =  T2.<unk> AND T2.<unk>  =  T4.<unk> AND T3.<unk>  =  T4.<unk> WHERE T1.<unk>  =  \"重庆\" AND T3.<unk>  =  \"西安\""
    },
    {
        "db_id": "e_learning",
        "question": "哪个课程的作者教两个或更多课程？给出他们的地址和作者id。",
        "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING Count(*)  >=  2"
    },
    {
        "db_id": "yelp",
        "question": "列出在“成都”的“意大利”“餐厅”的街区",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"成都\" AND t3.category_name  =  \"意大利\" AND t4.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"成都\" AND t3.<unk>  =  \"意大利\" AND t4.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "election",
        "question": "哪些人当监查官的次数最多？给我这个人的名字和次数。",
        "query": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "最小省的面积是多少？",
        "query": "SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "music_2",
        "question": "在歌曲“江南”中，名字为“俊杰”的音乐家所演奏的声乐类型是什么？",
        "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"俊杰\" AND T2.title  =  \"江南\"",
        "mask_query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"俊杰\" AND T2.title  =  \"江南\""
    },
    {
        "db_id": "device",
        "question": "列出没有库存设备的商店名称。",
        "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "对于每个药物ID，可以与一种以上酶相互作用的药物的名称是什么？",
        "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.Name FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "wta_1",
        "question": "在2013年或2016年中有多少场比赛？",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "mask_query": "SELECT count(*) FROM <mask> WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "db_id": "district_spokesman",
        "question": "查找所有发言人的姓名和演讲标题。",
        "query": "SELECT name ,  speach_title FROM spokesman",
        "mask_query": "SELECT name ,  speach_title FROM <mask>"
    },
    {
        "db_id": "tracking_orders",
        "question": "对于每个至少有两个订单的客户，查找客户名字和订单数量。",
        "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "college_1",
        "question": "“哲学”的描述是什么，它有多少学分？",
        "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  '哲学'",
        "mask_query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  '哲学'"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "每个订单ID对应多少个不同的产品？",
        "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "mask_query": "SELECT <unk> ,  count(DISTINCT <unk>) FROM Order_items GROUP BY <unk>"
    },
    {
        "db_id": "match_season",
        "question": "什么官方的母语包含字符串\"英语\"？",
        "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"英语\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"英语\""
    },
    {
        "db_id": "network_1",
        "question": "显示所有高中生的年级。",
        "query": "SELECT grade FROM Highschooler",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "theme_gallery",
        "question": "我们有多少艺术家？",
        "query": "SELECT count(*) FROM artist",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回里包含关键字“关系型数据库”的论文最多的期刊。",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"关系型数据库\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t4.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<mask>  =  \"关系型数据库\" GROUP BY t3.<unk> ORDER BY COUNT ( DISTINCT t2.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "store_1",
        "question": "“卢” “军”的电子邮件和电话号码是多少？",
        "query": "SELECT email ,  phone FROM customers WHERE first_name = \"卢\" AND last_name = \"军\";",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> = \"卢\" AND <unk> = \"军\";"
    },
    {
        "db_id": "e_commerce",
        "question": "所有客户的名字、中间名缩写、姓氏和付款方式是什么？",
        "query": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> ,  T2.Payment_method_code FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "conference",
        "question": "列出所有会议名称、年份和地点。",
        "query": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
        "mask_query": "SELECT conference_name ,  YEAR ,  LOCATION FROM <mask>"
    },
    {
        "db_id": "tvshow",
        "question": "包含了连续剧“潜伏”的电视频道有哪些套餐选择？",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"潜伏\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"潜伏\";"
    },
    {
        "db_id": "customers_and_orders",
        "question": "给出订单最多的客户对应的ID、姓名、电话和电子邮件。",
        "query": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  T2.<unk> ,  T2.<unk> FROM Customer_orders AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "question": "返回柏拉图著作的销售价格。",
        "query": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
        "mask_query": "SELECT saleprice FROM <mask> AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN <mask> AS T3 ON T2.<mask>  =  T3.<unk> WHERE T3.name  =  \"Plato\""
    },
    {
        "db_id": "warehouse_1",
        "question": "找出存储在芝加哥或纽约仓库中箱子的总价值。",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "mask_query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'"
    },
    {
        "db_id": "imdb",
        "question": "找出所有在“武汉”出生的演员",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"武汉\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"武汉\";"
    },
    {
        "db_id": "driving_school",
        "question": "叫 “温”“子君” 的员工什么时候加入公司的？",
        "query": "SELECT date_joined_staff FROM Staff WHERE first_name = \"子君\" AND last_name = \"温\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"子君\" AND <unk> = \"温\";"
    },
    {
        "db_id": "headphone_store",
        "question": "哪些耳机类别既有带“碗”耳塞的耳机，也有带“舒适垫”耳塞的耳机？",
        "query": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
        "mask_query": "SELECT CLASS FROM <mask> WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM <mask> WHERE earpads  =  'Comfort Pads'"
    },
    {
        "db_id": "race_track",
        "question": "没有“GT”类别比赛的赛道名称是什么？",
        "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"
    },
    {
        "db_id": "hr_1",
        "question": "找到那些在经理手下工作的员工的薪水和经理号码。",
        "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"空\"",
        "mask_query": "SELECT salary ,  manager_id FROM <mask> WHERE manager_id != \"空\""
    },
    {
        "db_id": "music_1",
        "question": "来自“英国”的“男”艺术家的名字是什么？",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"英国\" AND gender  =  \"男\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"英国\" AND <unk>  =  \"男\""
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "颜色描述为“黄色”的产品名字是什么？",
        "query": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  '黄色'",
        "mask_query": "SELECT T1.<unk> FROM products AS T1 JOIN ref_colors AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '黄色'"
    },
    {
        "db_id": "program_share",
        "question": "计算一天中每个时间段播放节目的数量。",
        "query": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",
        "mask_query": "SELECT count(*) ,  time_of_day FROM <mask> GROUP BY time_of_day"
    },
    {
        "db_id": "art_1",
        "question": "找到最古老的画的ID。",
        "query": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
        "mask_query": "SELECT <unk> FROM paintings ORDER BY YEAR LIMIT 1"
    },
    {
        "db_id": "flight_4",
        "question": "哪一个国家是海拔最高的机场的所在地？",
        "query": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "“袁” “熙”的电话号码是多少？",
        "query": "SELECT phone FROM employees WHERE first_name = \"袁\" AND last_name = \"熙\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"袁\" AND <unk> = \"熙\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "哪份文件的草稿最多？列出其文件ID和草稿的数量。",
        "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "mask_query": "SELECT <unk> , count(<unk>) FROM <mask> GROUP BY <unk> ORDER BY count(<unk>) DESC LIMIT 1;"
    },
    {
        "db_id": "poker_player",
        "question": "列出按升序排列的决赛牌桌的扑克玩家的姓名。",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk>"
    },
    {
        "db_id": "conference",
        "question": "哪一年的会议最少？",
        "query": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT YEAR FROM <mask> GROUP BY YEAR ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "machine_repair",
        "question": "那里有多少技术人员？",
        "query": "SELECT count(*) FROM technician",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "college_1",
        "question": "找到所有教过某些课程的讲师的名字和办公室以及课程描述和院系名称。",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "mask_query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM <mask> AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code"
    },
    {
        "db_id": "book_1",
        "question": "返回收到的傲慢和偏见的订单数量。",
        "query": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "book_review",
        "question": "评论的平均评分是多少？",
        "query": "SELECT avg(Rating) FROM review",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "performance_attendance",
        "question": "演出的日期和地点是什么？",
        "query": "SELECT Date ,  LOCATION FROM performance",
        "mask_query": "SELECT <unk> ,  LOCATION FROM <mask>"
    },
    {
        "db_id": "school_bus",
        "question": "列出“苏州”且40岁以下司机的名字。",
        "query": "SELECT name FROM driver WHERE home_city  =  \"苏州\" AND age  <  40",
        "mask_query": "SELECT name FROM <mask> WHERE home_city  =  \"苏州\" AND age  <  40"
    },
    {
        "db_id": "academic",
        "question": "返回发表了“使数据库可用”的会议。",
        "query": "SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"使数据库可用\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "每个父文档的唯一描述是什么？",
        "query": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk>"
    },
    {
        "db_id": "candidate_poll",
        "question": "按不确定率升序排列的每个候选人的支持率、考虑率和反对率是多少？",
        "query": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY unsure_rate"
    },
    {
        "db_id": "school_player",
        "question": "球员有多少不同的位置？",
        "query": "SELECT count(DISTINCT POSITION) FROM player",
        "mask_query": "SELECT count(DISTINCT POSITION) FROM <mask>"
    },
    {
        "db_id": "tracking_orders",
        "question": "在“1989-09-03”年之前或“2007-12-25”年之后创建的发票号码的不同细节是什么？",
        "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "mask_query": "SELECT DISTINCT <unk> FROM invoices WHERE <unk> < \"1989-09-03\" OR <unk> > \"2007-12-25\""
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "显示拘留的开始时间和结束时间。",
        "query": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "candidate_poll",
        "question": "找出获得最高支持率的候选人的姓名和性别。",
        "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "mask_query": "SELECT t1.name ,  t1.sex FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
    },
    {
        "db_id": "inn_1",
        "question": "每种不同床类型的房间的平均底价是多少？",
        "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM <mask> GROUP BY <unk>;"
    },
    {
        "db_id": "university_basketball",
        "question": "查找最新的非公立学校成立年。",
        "query": "SELECT founded FROM university WHERE affiliation != '公立' ORDER BY founded DESC LIMIT 1",
        "mask_query": "SELECT founded FROM <mask> WHERE affiliation != '公立' ORDER BY founded DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回2000年以后的论文。",
        "query": "SELECT title FROM publication WHERE YEAR  >  2000;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR  >  2000;"
    },
    {
        "db_id": "academic",
        "question": "把“PVLDB”的关键词返回。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t4.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "network_2",
        "question": "比所有朋友中平均年龄小的朋友的不同名字是什么？",
        "query": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  <  (SELECT avg(<unk>) FROM person)"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "返回“屋顶”特征的描述。",
        "query": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  'rooftop';"
    },
    {
        "db_id": "address_1",
        "question": "显示所有有5个以上学生居住的州。",
        "query": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  5"
    },
    {
        "db_id": "document_management",
        "question": "按名称的顺序列出所有的图像名称和URL。",
        "query": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "mask_query": "SELECT <unk> ,  <unk> FROM images ORDER BY <unk>"
    },
    {
        "db_id": "match_season",
        "question": "对于每个球员，他们的名字、赛季和所来自的国家是什么？",
        "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "book_1",
        "question": "给出图书的最高和最低售价。",
        "query": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
        "mask_query": "SELECT max(saleprice) ,  min(saleprice) FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "“历史”系总学分最高的学生叫什么名字？",
        "query": "SELECT name FROM student WHERE dept_name  =  '历史' ORDER BY tot_cred DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '历史' ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2",
        "question": "按大学名称排序，列出招生人数超过18000人的大学的名称。",
        "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  18000 ORDER BY <unk>"
    },
    {
        "db_id": "hospital_1",
        "question": "计算总共有多少预约。",
        "query": "SELECT count(*) FROM appointment",
        "mask_query": "SELECT count(*) FROM appointment"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "我们有多少作者？",
        "query": "SELECT count(*) FROM Authors",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "storm_record",
        "question": "按字母顺序排列的地区名称是什么？",
        "query": "SELECT region_name FROM region ORDER BY region_name",
        "mask_query": "SELECT region_name FROM <mask> ORDER BY region_name"
    },
    {
        "db_id": "yelp",
        "question": "“成都”哪个街区的企业最多？",
        "query": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"成都\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"成都\" GROUP BY t1.<unk> ORDER BY COUNT ( DISTINCT t2.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "art_1",
        "question": "找到所有比帆布上的画有更长高度的画的不同标题。",
        "query": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
        "mask_query": "SELECT DISTINCT <unk> FROM paintings WHERE <unk>  >  (SELECT min(<unk>) FROM paintings WHERE <unk>  =  \"canvas\")"
    },
    {
        "db_id": "college_1",
        "question": "上“美术”课程的学生总数是多少？",
        "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  '美术'",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  '美术'"
    },
    {
        "db_id": "car_racing",
        "question": "按年龄按升序对司机姓名进行排序。",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "school_finance",
        "question": "有多少捐赠者捐助名为“理工大学”的学校？",
        "query": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"理工大学\"",
        "mask_query": "SELECT count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"理工大学\""
    },
    {
        "db_id": "hospital_1",
        "question": "找出开出药物的品牌是“X”的医生的名字和位置？",
        "query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "mask_query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.<unk>  =  \"X\""
    },
    {
        "db_id": "insurance_policies",
        "question": "按日期的升序列出所有付款的方法、日期和数额。",
        "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "tracking_orders",
        "question": "列出曾经购买产品“食物”的顾客的名字。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"食物\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.<unk> = T2.<unk> AND T2.<unk> = T3.<unk> AND T3.<unk> = T4.<unk> WHERE T4.<unk> = \"食物\" GROUP BY T1.<unk> HAVING count(*)  >=  1"
    },
    {
        "db_id": "culture_company",
        "question": "显示所有不同的图书出版商。",
        "query": "SELECT DISTINCT publisher FROM book_club",
        "mask_query": "SELECT DISTINCT publisher FROM <mask>"
    },
    {
        "db_id": "institution_sports",
        "question": "返回不在温哥华市的附属机构。",
        "query": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"Vancouver\""
    },
    {
        "db_id": "gymnast",
        "question": "哪个家乡有23岁以上和20岁以下的人？",
        "query": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  23 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  20"
    },
    {
        "db_id": "wedding",
        "question": "1850年之前有多少教堂开放？",
        "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850",
        "mask_query": "SELECT count(*) FROM Church WHERE <unk>  <  1850"
    },
    {
        "db_id": "aan_1",
        "question": "我们有多少结构？",
        "query": "SELECT count(*) FROM Affiliation",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "school_bus",
        "question": "显示没有校车的学校名称和学校类型。",
        "query": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
        "mask_query": "SELECT <mask> ,  TYPE FROM <mask> WHERE school_id NOT IN (SELECT school_id FROM <mask>)"
    },
    {
        "db_id": "loan_1",
        "question": "查找没有“存储”账户的客户的名字。",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  '存储'",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask> WHERE <unk>  =  '存储'"
    },
    {
        "db_id": "bakery_1",
        "question": "给出购买次数最多的客户的客户id，以及购买次数。",
        "query": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "question": "列出“黄伟明”或“姜文”导演的所有卡通片的标题。",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"黄伟明\" OR Directed_by = \"姜文\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"黄伟明\" OR <unk> = \"姜文\";"
    },
    {
        "db_id": "bike_1",
        "question": "位于最南边的火车站的名称、纬度和城市是什么？",
        "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "sports_competition",
        "question": "哪些国家参加了“友谊型”和“锦标赛”类型的比赛？",
        "query": "SELECT country FROM competition WHERE competition_type  =  '友谊型' INTERSECT SELECT country FROM competition WHERE competition_type  =  '锦标赛'",
        "mask_query": "SELECT country FROM <mask> WHERE competition_type  =  '友谊型' INTERSECT SELECT country FROM <mask> WHERE competition_type  =  '锦标赛'"
    },
    {
        "db_id": "musical",
        "question": "最老演员的持续时间是多少？",
        "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "预约病人的姓名是什么？",
        "query": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "mask_query": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "代码是“org”的预算类型描述是什么？",
        "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"org\"",
        "mask_query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"org\""
    },
    {
        "db_id": "wine_1",
        "question": "哪3家酒庄生产的“白”葡萄酒最多？",
        "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"白\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T2.<unk> FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.<unk>  =  \"白\" GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "查询那些既有卖不到3000件产品的商店又有卖超过1000件产品的商店的地区。",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "mask_query": "SELECT district FROM <mask> WHERE <unk>  <  3000 INTERSECT SELECT district FROM <mask> WHERE <unk>  >  10000"
    },
    {
        "db_id": "election_representative",
        "question": "列出没有参加这里列出的选举的代表的姓名。",
        "query": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "hr_1",
        "question": "名字里没有“男”字的雇员是在什么日期被雇用的？",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '男'",
        "mask_query": "SELECT hire_date FROM <mask> WHERE first_name NOT LIKE '男'"
    },
    {
        "db_id": "department_store",
        "question": "每种产品的平均价格是多少？",
        "query": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM products GROUP BY <unk>"
    },
    {
        "db_id": "hr_1",
        "question": "所有员工的名字和部门名称是什么？",
        "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "mask_query": "SELECT T1.first_name ,  T2.department_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id"
    },
    {
        "db_id": "match_season",
        "question": "不同的球员是谁，他们参与什么赛季，他们所在的球队叫什么名字？",
        "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "bakery_1",
        "question": "返货价格最低的芝士口味的商品。",
        "query": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
        "mask_query": "SELECT min(price) FROM <mask> WHERE flavor  =  \"Cheese\""
    },
    {
        "db_id": "customers_card_transactions",
        "question": "有没有这个叫“338”的账号的其他信息？",
        "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"338\""
    },
    {
        "db_id": "real_estate_rentals",
        "question": "按搜索字符串降序排序返回所有用户搜索的搜索字符串和相应的时间。",
        "query": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC;"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示每个客户的会议类型代码和会议次数。",
        "query": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "document_management",
        "question": "给出具有超过2个对应文档的文档类型的代码。",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
        "mask_query": "SELECT <unk> FROM documents GROUP BY <unk> HAVING count(*)  >  2"
    },
    {
        "db_id": "student_1",
        "question": "对于每个“0”年级的教室，返回教室号码和学生人数。",
        "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "mask_query": "SELECT classroom ,  count(*) FROM <mask> WHERE grade  =  \"0\" GROUP BY classroom"
    },
    {
        "db_id": "voter_2",
        "question": "报告不同的主席投票和副主席的投票。",
        "query": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "mask_query": "SELECT DISTINCT <unk> ,  VICE_President_Vote FROM VOTING_RECORD"
    },
    {
        "db_id": "flight_4",
        "question": "返回由名为“山东航空公司”运营的以“意大利”机场为目的地的航线数。",
        "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  \"Italy\" AND T3.name  =  \"American Airlines\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"Italy\" AND T3.<unk>  =  \"American Airlines\""
    },
    {
        "db_id": "department_management",
        "question": "部门的最高预算和最低预算是多少？",
        "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
        "mask_query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM <mask>"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "哪种服务ID和类型的参与者最少？",
        "query": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T3.service_id ,  T4.<unk> FROM participants AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN EVENTS AS T3 ON T2.<unk>   =  T3.<unk> JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "film_rank",
        "question": "在所有市场中，城市的最大和最小数量是多少？",
        "query": "SELECT max(Number_cities) ,  min(Number_cities) FROM market",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "department_store",
        "question": "查找所有在“取消”某些订单后又有订购的不同客户的ID。",
        "query": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"取消\")",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  (SELECT min(<unk>) FROM <mask> WHERE <unk>  =  \"取消\")"
    },
    {
        "db_id": "orchestra",
        "question": "返回所有表演的平均出席率。",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "mask_query": "SELECT avg(<unk>) FROM SHOW"
    },
    {
        "db_id": "candidate_poll",
        "question": "对于每个性别，反对率最低的候选人的姓名和性别是什么？",
        "query": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "mask_query": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
    },
    {
        "db_id": "wta_1",
        "question": "在所有比赛中得分最高的选手的名字、国家代码和生日是什么？",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "question": "加拿大有多少城市？",
        "query": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"CANADA\""
    },
    {
        "db_id": "aan_1",
        "question": "凯萨琳，麦基翁有多少引用？",
        "query": "SELECT count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"%Mckeown ,  Kathleen%\""
    },
    {
        "db_id": "conference",
        "question": "显示至少举行过两个会议的地点。",
        "query": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
        "mask_query": "SELECT LOCATION FROM <mask> GROUP BY LOCATION HAVING count(*)  >=  2"
    },
    {
        "db_id": "world_1",
        "question": "“阿鲁巴”主要讲什么语言？",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"阿鲁巴\" ORDER BY Percentage DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"阿鲁巴\" ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "question": "哪个国家的犯罪分子最多？",
        "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "查找位于“便宜坊”附近的企业评论的数量",
        "query": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"便宜坊\";",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk> ) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"便宜坊\";"
    },
    {
        "db_id": "boat_1",
        "question": "查找预订红色或蓝色船只的水手的姓名和ID。",
        "query": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "mask_query": "SELECT DISTINCT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON  T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  'red' OR T1.<unk>  =  \"blue\""
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示代理ID和每个代理的客户数。",
        "query": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "显示所有文档ID、名称和每个文档中的段落数。",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "mask_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "db_id": "bakery_1",
        "question": "按价格顺序列出商品的ID、味道和食品类型是什么？",
        "query": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
        "mask_query": "SELECT id ,  flavor ,  food FROM <mask> ORDER BY price"
    },
    {
        "db_id": "journal_committee",
        "question": "请显示编辑中最常见的年龄。",
        "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "question": "列出所有售价高于平均水平的书名。",
        "query": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
        "mask_query": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)"
    },
    {
        "db_id": "baseball_1",
        "question": "2008年参观人数最多的公园是哪一个？",
        "query": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> = 2008 ORDER BY T1.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "restaurant_1",
        "question": "学生“李” “琳”的性别是什么？",
        "query": "SELECT Sex FROM Student WHERE Fname = \"李\" AND Lname = \"琳\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"李\" AND Lname = \"琳\";"
    },
    {
        "db_id": "boat_1",
        "question": "预订了一艘名为“甜瓜”的船的水手的名字是什么？",
        "query": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  'Melon'"
    },
    {
        "db_id": "store_1",
        "question": "加拿大有多少员工？",
        "query": "SELECT count(*) FROM employees WHERE country = \"加拿大\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"加拿大\";"
    },
    {
        "db_id": "game_1",
        "question": "“韩”“江城”每次工作的总小时数和玩游戏的次数是多少？",
        "query": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"江城\" AND T2.Lname  =  \"韩\"",
        "mask_query": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"江城\" AND T2.Lname  =  \"韩\""
    },
    {
        "db_id": "vehicle_rent",
        "question": "列出所有不同的车辆动力系统类型。",
        "query": "SELECT DISTINCT type_of_powertrain FROM vehicles",
        "mask_query": "SELECT DISTINCT type_of_powertrain FROM vehicles"
    },
    {
        "db_id": "movie_1",
        "question": "评论者的名字中包括'佳佳'这个词的ID是什么？",
        "query": "SELECT rID FROM Reviewer WHERE name LIKE \"佳佳\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"佳佳\""
    },
    {
        "db_id": "poker_player",
        "question": "收入在300000以上的扑克玩家的名字是什么？",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  300000"
    },
    {
        "db_id": "geo",
        "question": "“辽宁”有什么山",
        "query": "SELECT mountain_name FROM mountain WHERE state_name  =  \"辽宁\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"辽宁\";"
    },
    {
        "db_id": "assets_maintenance",
        "question": "列出每个资产的资产ID、细节、制作和模型。",
        "query": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "按字母顺序列出2008年所有课程名称及其老师姓名。",
        "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.<unk>"
    },
    {
        "db_id": "art_1",
        "question": "每种材料有多少作品？",
        "query": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
        "mask_query": "SELECT count(*) ,  <unk> FROM paintings GROUP BY <unk>"
    },
    {
        "db_id": "college_3",
        "question": "查找住在“行政”大楼的男性（性别是“男”）教职员工的名字和姓氏。",
        "query": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"男\" AND Building  =  \"行政\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM FACULTY WHERE sex  =  \"男\" AND <unk>  =  \"行政\""
    },
    {
        "db_id": "customers_and_invoices",
        "question": "有多少客户开户？",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "product_catalog",
        "question": "查找目录内容的总数。",
        "query": "SELECT count(*) FROM catalog_contents",
        "mask_query": "SELECT count(*) FROM catalog_contents"
    },
    {
        "db_id": "network_2",
        "question": "谁是最老的人？",
        "query": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  (SELECT max(<unk>) FROM person)"
    },
    {
        "db_id": "driving_school",
        "question": "客户数量最少的状态代码是什么？",
        "query": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "academic",
        "question": "把那些有包含关键词“关系型数据库”的论文的作者返回。",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"关系型数据库\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"关系型数据库\";"
    },
    {
        "db_id": "music_1",
        "question": "按语言字母顺序排列的每种语言的所有歌曲的最大持续时间和分辨率是多少？",
        "query": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "mask_query": "SELECT max(T1.<unk>) ,  max(T2.<unk>) ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY T2.<unk>"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示至少有两个交易的投资者的ID。",
        "query": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "film_rank",
        "question": "返回所有电影的平均总销售额。",
        "query": "SELECT avg(Gross_in_dollar) FROM film",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "yelp",
        "question": "找出在“四月”最多的商业评论",
        "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"四月\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"四月\" GROUP BY t1.<unk> ORDER BY COUNT ( DISTINCT t2.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "pets_1",
        "question": "女学生养了多少只宠物狗？",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  '女' AND T3.pettype  =  '狗'",
        "mask_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  '女' AND T3.pettype  =  '狗'"
    },
    {
        "db_id": "college_1",
        "question": "姓“李”的学生所上的每堂课的课程代码是什么？",
        "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  '李'",
        "mask_query": "SELECT T1.crs_code FROM <mask> AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  '李'"
    },
    {
        "db_id": "college_1",
        "question": "在代码为10018的课上获得成绩为“A”的学生的姓氏是什么？",
        "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018",
        "mask_query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018"
    },
    {
        "db_id": "club_leader",
        "question": "列出不是俱乐部领导的会员的姓名。",
        "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "e_learning",
        "question": "找出学生名字中有“孙”一词的学生数。",
        "query": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"孙\"",
        "mask_query": "SELECT COUNT(*) FROM <mask> WHERE <unk> LIKE \"孙\""
    },
    {
        "db_id": "entrepreneur",
        "question": "返回名字是“马化腾”或“李彦宏”的企业家的出生日期。",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"马化腾\" OR T1.Investor  =  \"李彦宏\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"马化腾\" OR T1.<unk>  =  \"李彦宏\""
    },
    {
        "db_id": "wedding",
        "question": "展示1830至1840年间开办的教堂的组织者和姓名。",
        "query": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "mask_query": "SELECT organized_by ,  name FROM <mask> WHERE open_date BETWEEN 1830 AND 1840"
    },
    {
        "db_id": "wine_1",
        "question": "给出葡萄产地是“张家口”的葡萄酒的最高价格和分数。",
        "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"张家口\"",
        "mask_query": "SELECT max(<unk>) ,  max(<unk>) FROM WINE WHERE <unk>  =  \"张家口\""
    },
    {
        "db_id": "coffee_shop",
        "question": "所有商店的平均分和平均员工数是多少？",
        "query": "SELECT avg(num_of_staff) ,  avg(score) FROM shop",
        "mask_query": "SELECT avg(num_of_staff) ,  avg(score) FROM <mask>"
    },
    {
        "db_id": "vehicle_rent",
        "question": "找出不同动力系统类型的汽车的平均燃油经济性比率和公路燃油经济性比率。",
        "query": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) , <unk> FROM vehicles GROUP BY <unk>"
    },
    {
        "db_id": "car_1",
        "question": "最早生产汽车的制造商是什么，在哪一年？",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "db_id": "yelp",
        "question": "返回给有“复兴号”的城市。",
        "query": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"复兴号\";",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE <unk>  =  \"复兴号\";"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "查找具有颜色描述“红色”并且具有特征名称是“快速”的产品名称。",
        "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"红色\" AND t3.characteristic_name  =  \"快速\"",
        "mask_query": "SELECT <unk> FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> JOIN ref_colors AS t4 ON t1.<unk>  =  t4.<unk> WHERE t4.<unk>  =  \"红色\" AND t3.<unk>  =  \"快速\""
    },
    {
        "db_id": "online_exams",
        "question": "有多少考试？",
        "query": "SELECT count(*) FROM Exams",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "candidate_poll",
        "question": "身高大于200或小于190的人的名字是什么？",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "mask_query": "SELECT name FROM <mask> WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "insurance_fnol",
        "question": "那些名字中有“楠”的客户使用的所有保险单的开始和结束日期是什么？",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"楠\"",
        "mask_query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"楠\""
    },
    {
        "db_id": "wine_1",
        "question": "给出2000年或2010年后葡萄酒的独特名称。",
        "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "mask_query": "SELECT DISTINCT <unk> FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "哪些国家有列出超过四个不同的地址？",
        "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "mask_query": "SELECT <unk> FROM addresses GROUP BY <unk> HAVING count(<unk>)  >  4"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "计算名为“夏日游览”的文件的段落数。",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  '夏日游览'",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  '夏日游览'"
    },
    {
        "db_id": "tracking_orders",
        "question": "最新订单的ID是什么？",
        "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM orders ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "question": "显示所有拥有“波音”和“空客”证书的员工的姓名。",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"波音\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"空客\"",
        "mask_query": "SELECT T1.<unk> FROM Employee AS T1 JOIN Certificate AS T2 ON T1.<unk>  =  T2.<unk> JOIN Aircraft AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"波音\" INTERSECT SELECT T1.<unk> FROM Employee AS T1 JOIN Certificate AS T2 ON T1.<unk>  =  T2.<unk> JOIN Aircraft AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"空客\""
    },
    {
        "db_id": "car_racing",
        "question": "有多少司机每次得分超过150分？显示品牌和数量。",
        "query": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
        "mask_query": "SELECT make ,  count(*) FROM <mask> WHERE points  >  150 GROUP BY make"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "哪三种产品有最多的问题？",
        "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T2.<unk> FROM problems AS T1 JOIN product AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "store_1",
        "question": "列出所有播放列表的名称。",
        "query": "SELECT name FROM playlists;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "soccer_1",
        "question": "所有球员的最大和最小高度是多少？",
        "query": "SELECT max(weight) ,  min(weight) FROM Player",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "university_basketball",
        "question": "返回最早成立的学校的球队名称和在常规赛期间的ACC。",
        "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "mask_query": "SELECT t2.team_name ,  t2.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    {
        "db_id": "loan_1",
        "question": "统计银行分行的数量。",
        "query": "SELECT count(*) FROM bank",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出在“云南”“大理”或在“银川”“宁夏”的所有的地址。",
        "query": "SELECT address_content FROM addresses WHERE city  =  \"大理\" AND state_province_county  =  \"云南\" UNION SELECT address_content FROM addresses WHERE city  =  \"银川\" AND state_province_county  =  \"宁夏\"",
        "mask_query": "SELECT <unk> FROM addresses WHERE <unk>  =  \"大理\" AND <unk>  =  \"云南\" UNION SELECT <unk> FROM addresses WHERE <unk>  =  \"银川\" AND <unk>  =  \"宁夏\""
    },
    {
        "db_id": "art_1",
        "question": "1900年以前在不同地方创作的绘画作品有多少？",
        "query": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
        "mask_query": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION"
    },
    {
        "db_id": "bike_1",
        "question": "ID为636的自行车的路线的总时间和最大持续时间是多少？",
        "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "mask_query": "SELECT sum(<unk>) ,  max(<unk>) FROM <mask> WHERE <unk>  =  636"
    },
    {
        "db_id": "hr_1",
        "question": "每个雇员的全名、部门、城市和所在省份是那些？",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "mask_query": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id JOIN <mask> AS T3 ON T2.location_id  =  T3.location_id"
    },
    {
        "db_id": "mountain_photos",
        "question": "有多少照相机的镜头焦距大于15毫米？",
        "query": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  15"
    },
    {
        "db_id": "twitter_1",
        "question": "查找追随者数量大于名为“蔡依林”的用户的用户名称。",
        "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  '蔡依林')",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >  (SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '蔡依林')"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "名字是“维华”或“安然”的游客的参观的景点名称和参观日期是什么？",
        "query": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"维华\" OR T2.Tourist_Details  =  \"安然\"",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.<unk>  =  T3.<unk> AND T2.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"维华\" OR T2.<unk>  =  \"安然\""
    },
    {
        "db_id": "ship_1",
        "question": "既由“少尉”级别的船长也由“中尉”级别的船长驾驶的船名是什么？",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  \"少尉\" INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  \"中尉\"",
        "mask_query": "SELECT t1.name FROM ship AS t1 JOIN <mask> AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  \"少尉\" INTERSECT SELECT t1.name FROM ship AS t1 JOIN <mask> AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  \"中尉\""
    },
    {
        "db_id": "course_teach",
        "question": "每个老师的年龄和家乡是什么？",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "riding_club",
        "question": "每个俱乐部有多少教练？列出教练员的ID、姓名和教练员数量。",
        "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
        "mask_query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id"
    },
    {
        "db_id": "address_1",
        "question": "每个国家有多少个城市？",
        "query": "SELECT country ,  count(*) FROM City GROUP BY country",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "flight_1",
        "question": "ID是12的飞机的名称和距离是多少？",
        "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "mask_query": "SELECT <unk> ,  <unk> FROM Aircraft WHERE <unk>  =  12"
    },
    {
        "db_id": "college_2",
        "question": "那些比“生物”系至少一个教员工资高的教员叫什么名字？",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  '生物学')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT min(<unk>) FROM <mask> WHERE <unk>  =  '生物学')"
    },
    {
        "db_id": "e_commerce",
        "question": "电话号码前缀为“+12”的客户的登录名和密码是什么？",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> LIKE '+12%'"
    },
    {
        "db_id": "culture_company",
        "question": "以百万计的预算订购的所有电影的片名、年限和导演都有哪些？",
        "query": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million",
        "mask_query": "SELECT title ,  YEAR ,  director FROM <mask> ORDER BY budget_million"
    },
    {
        "db_id": "customers_and_orders",
        "question": "每种类型的产品的平均价格是多少？",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "formula_1",
        "question": "“12:00:00”之后或“09:00:00”之前的比赛名称是什么？",
        "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示每个性别的顾客数量。",
        "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "college_2",
        "question": "统计一下“教学”的教室数量。",
        "query": "SELECT count(*) FROM classroom WHERE building  =  '教学'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '教学'"
    },
    {
        "db_id": "college_1",
        "question": "找到描述包含“统计”一词的课程所属的院系。",
        "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '统计'",
        "mask_query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '统计'"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "哪些城市至少有一个客户，但没有表演者？",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "哪一个客户在单一索赔中提出的索赔数额最大？返回客户详细信息。",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "mask_query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)"
    },
    {
        "db_id": "restaurant_bills",
        "question": "对于每个订单，返回客户名称和菜名。",
        "query": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "bakery_1",
        "question": "羊角面包的口味有那些？",
        "query": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
        "mask_query": "SELECT flavor FROM <mask> WHERE food  =  \"Croissant\""
    },
    {
        "db_id": "music_2",
        "question": "在标签是“环球音乐公司”下的专辑中的歌曲是什么？",
        "query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"环球音乐公司\"",
        "mask_query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"环球音乐公司\""
    },
    {
        "db_id": "network_1",
        "question": "针对每个学生ID，统计其对应的喜欢数量。",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "aan_1",
        "question": "被引用次数最多的作者的姓名和被引用次数是多少？",
        "query": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T3.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "人口密度最小的省面积是多少？",
        "query": "SELECT area FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "institution_sports",
        "question": "招生人数最多的院校的体育场是什么？",
        "query": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "每种食物的平均价格是多少？",
        "query": "SELECT avg(price) ,  food FROM goods GROUP BY food",
        "mask_query": "SELECT avg(price) ,  food FROM <mask> GROUP BY food"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "统计产品的数量。",
        "query": "SELECT count(*) FROM products",
        "mask_query": "SELECT count(*) FROM products"
    },
    {
        "db_id": "aan_1",
        "question": "我们有多少作者？",
        "query": "SELECT count(*) FROM Author",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "address_1",
        "question": "离芝加哥最近的城市叫什么名字？",
        "query": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"Chicago\" ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "movie_2",
        "question": "查找在奥登和帝国电影院放映的电影的名称。",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "mask_query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'"
    },
    {
        "db_id": "soccer_2",
        "question": "在“河北”省的平均入学率是多少？",
        "query": "SELECT avg(enr) FROM College WHERE state  =  '河北'",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  '河北'"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "ID为4的文件的邮寄地址是什么？",
        "query": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
        "mask_query": "SELECT <mask>.<unk> FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <unk> = 4;"
    },
    {
        "db_id": "soccer_2",
        "question": "找出一些大学生在“中场”位置打球，但“守门员”位置不打球的所在学校的省名。",
        "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  '中场' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  '守门员'",
        "mask_query": "SELECT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '中场' EXCEPT SELECT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '守门员'"
    },
    {
        "db_id": "soccer_1",
        "question": "列出总得分高于平均水平的球员的名字。",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk>  >  ( SELECT avg(<unk>) FROM <mask> )"
    },
    {
        "db_id": "swimming",
        "question": "找出有最多数量记录的游泳者的名字。",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_1",
        "question": "找到“文学”课程的描述和学分。",
        "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  '文学'",
        "mask_query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  '文学'"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "所有的文档类型代码和文档类型名称是什么？",
        "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types",
        "mask_query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"
    },
    {
        "db_id": "geo",
        "question": "中国有多少条的河流",
        "query": "SELECT COUNT ( river_name ) FROM river;",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask>;"
    },
    {
        "db_id": "storm_record",
        "question": "显示区域名称和每个区域的风暴数量。",
        "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "mask_query": "SELECT T1.region_name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
    },
    {
        "db_id": "election",
        "question": "对于每个县，查找该县的名称和对应县的代表人数。",
        "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "mask_query": "SELECT T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.County_id  =  T2.<unk> GROUP BY T1.County_id"
    },
    {
        "db_id": "college_1",
        "question": "找出所有教过某些课程的老师的名字和课程代码。",
        "query": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
        "mask_query": "SELECT T2.emp_fname ,  T1.crs_code FROM <mask> AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num"
    },
    {
        "db_id": "customer_deliveries",
        "question": "列出每个州的名字和居住人数。",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "mask_query": "SELECT t2.<unk> ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk>"
    },
    {
        "db_id": "insurance_policies",
        "question": "返回索赔金额不超过平均金额的索赔开始日期",
        "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <=  ( SELECT avg(<unk>) FROM <mask> )"
    },
    {
        "db_id": "music_4",
        "question": "返回著名艺术家的名字叫做“徐悲鸿”的称号。",
        "query": "SELECT Famous_Title FROM artist WHERE Artist  =  \"徐悲鸿\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"徐悲鸿\""
    },
    {
        "db_id": "club_1",
        "question": "找到俱乐部“文学”的位置。",
        "query": "SELECT clublocation FROM club WHERE clubname  =  \"文学\"",
        "mask_query": "SELECT clublocation FROM club WHERE clubname  =  \"文学\""
    },
    {
        "db_id": "ship_1",
        "question": "最年轻的船长指挥的那艘船叫什么名字？",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
        "mask_query": "SELECT t1.name FROM ship AS t1 JOIN <mask> AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.<unk> LIMIT 1"
    },
    {
        "db_id": "scientist_1",
        "question": "找出每个项目名称涉及的科学家数量。",
        "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name",
        "mask_query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name"
    },
    {
        "db_id": "customer_complaints",
        "question": "负责投诉产品价格最低的工作人员的姓氏是什么？",
        "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM staff AS t1 JOIN complaints AS t2 ON t1.<unk>  =  t2.<unk> JOIN products AS t3 ON t2.<unk>  =  t3.<unk> ORDER BY t3.<unk> LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "哪个省有一条河",
        "query": "SELECT traverse FROM river;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "“337”号账户有多少交易？",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "mask_query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"337\""
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "显示每个建筑物类型和该类型的建筑物数。",
        "query": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type",
        "mask_query": "SELECT <unk> ,  count(*) FROM premises GROUP BY <unk>"
    },
    {
        "db_id": "art_1",
        "question": "最长寿的艺术家画了多少幅画？",
        "query": "SELECT count(*) ,  T2.painterID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID ORDER BY T1.deathYear - T1.birthYear DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  T2.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY T1.<unk> - T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "school_player",
        "question": "统计学校的数量。",
        "query": "SELECT count(*) FROM school",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "college_1",
        "question": "找到办公室在“102号”的教授的姓氏和聘用日期。",
        "query": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  '102号'",
        "mask_query": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  '102号'"
    },
    {
        "db_id": "store_1",
        "question": "“姜” “子玉”住在哪个国家？",
        "query": "SELECT country FROM customers WHERE first_name = \"姜\" AND last_name = \"子玉\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"姜\" AND <unk> = \"子玉\";"
    },
    {
        "db_id": "gas_company",
        "question": "公司的总数是多少？",
        "query": "SELECT count(*) FROM company",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "country_language",
        "question": "列出不是任何国家官方语言的语言名称。",
        "query": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "customers_and_orders",
        "question": "我们有多少种产品？",
        "query": "SELECT count(*) FROM Products",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "college_3",
        "question": "根据字母顺序找出在“行政楼”建筑中机构工作的工作人员的姓氏。",
        "query": "SELECT Lname FROM FACULTY WHERE Building  =  \"行政楼\" ORDER BY Lname",
        "mask_query": "SELECT <unk> FROM FACULTY WHERE <unk>  =  \"行政楼\" ORDER BY <unk>"
    },
    {
        "db_id": "flight_company",
        "question": "在“中国”或“宝安机场”飞行的不同的飞行员的名字是什么？",
        "query": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  \"中国\" OR T1.name  =  \"宝安机场\"",
        "mask_query": "SELECT DISTINCT T2.pilot FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.country  =  \"中国\" OR T1.<unk>  =  \"宝安机场\""
    },
    {
        "db_id": "geo",
        "question": "“北京”“大兴区”的人口是多少",
        "query": "SELECT population FROM city WHERE city_name  =  \"大兴区\" AND state_name  =  \"北京\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"大兴区\" AND <unk>  =  \"北京\";"
    },
    {
        "db_id": "dorm_1",
        "question": "找出每个城市男生（性别是“男”）的平均年龄和数量。",
        "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  '男' GROUP BY city_code",
        "mask_query": "SELECT count(*) ,  avg(age) ,  <unk> FROM student WHERE sex  =  '男' GROUP BY <unk>"
    },
    {
        "db_id": "car_racing",
        "question": "哪个国家的司机得分最高？返回其国家的首都。",
        "query": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Country_ID  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "driving_school",
        "question": "顾客“钟”“诚”支付的总金额是多少？",
        "query": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"诚\" AND T2.last_name = \"钟\"",
        "mask_query": "SELECT sum(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"诚\" AND T2.<unk> = \"钟\""
    },
    {
        "db_id": "yelp",
        "question": "列出所有相关餐厅少于1个的评论",
        "query": "SELECT text FROM review WHERE rating  <  1;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  1;"
    },
    {
        "db_id": "company_employee",
        "question": "显示公司最常见的总部。",
        "query": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "department_store",
        "question": "最昂贵的“硬件”产品的名称是什么？",
        "query": "SELECT product_name FROM products WHERE product_type_code  =  '硬件' ORDER BY product_price DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM products WHERE <unk>  =  '硬件' ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "e_learning",
        "question": "姓“韩”和姓“佳明”的学生的入学和毕业日期是什么？",
        "query": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"韩\" AND T2.personal_name  =  \"佳明\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"韩\" AND T2.<unk>  =  \"佳明\""
    },
    {
        "db_id": "voter_2",
        "question": "找出有学生会主席选票的学生的不同姓氏。",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  T2.CLASS_President_VOTE"
    },
    {
        "db_id": "boat_1",
        "question": "找出每艘船的预订数量。",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "store_1",
        "question": "列出每一张专辑的标题。",
        "query": "SELECT title FROM albums;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "aircraft",
        "question": "请显示与“北京南苑”机场有关的飞机的名称。",
        "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"北京南苑\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"北京南苑\""
    },
    {
        "db_id": "manufactory_1",
        "question": "选择产品平均价格高于或等于$150的制造商的名称。",
        "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "mask_query": "SELECT avg(T1.<unk>) ,  T2.name FROM products AS T1 JOIN <mask> AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
    },
    {
        "db_id": "scholar",
        "question": "作者是“亚当斯·乔杜里”的论文",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"亚当斯·乔杜里\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"亚当斯·乔杜里\";"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "至少有三个文件的位置代码是什么？",
        "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "mask_query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "flight_2",
        "question": "在“哈尔滨”的机场名称是什么？",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"哈尔滨\"",
        "mask_query": "SELECT <unk> FROM AIRPORTS WHERE <unk> = \"哈尔滨\""
    },
    {
        "db_id": "movie_2",
        "question": "没有任何分级的电影叫什么名字？",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "mask_query": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "列出具有最高成果计数的组织ID和及其成果计数。",
        "query": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN Project_outcomes AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "question": "除了导演为“空”之外，那些只拍了一部电影的导演叫什么名字？",
        "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"null\" GROUP BY <unk> HAVING count(*)  =  1"
    },
    {
        "db_id": "document_management",
        "question": "查找所有文件中无任何章节的文件的名称。",
        "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
        "mask_query": "SELECT <unk> FROM documents WHERE <unk> NOT IN (SELECT <unk> FROM document_sections)"
    },
    {
        "db_id": "aan_1",
        "question": "给出拥有最多作者的论文的题目。",
        "query": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_press",
        "question": "最畅销的三本书是什么？显示他们的书名、作者姓名和出版商名称。",
        "query": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
        "mask_query": "SELECT t1.name ,  t2.title ,  t3.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.author_id  =  t2.author_id JOIN <mask> AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3"
    },
    {
        "db_id": "pilot_1",
        "question": "计算所有飞行员的不同飞机名称。",
        "query": "SELECT count(DISTINCT plane_name) FROM pilotskills",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM pilotskills"
    },
    {
        "db_id": "storm_record",
        "question": "返回受风暴影响的地区的名称，这些地区的死亡人数至少为10。",
        "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "mask_query": "SELECT T2.region_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.region_id  =  T2.region_id JOIN <mask> AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10"
    },
    {
        "db_id": "e_commerce",
        "question": "哪些客户没有下订单？列出名字、中间名缩写和姓氏。",
        "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "列出可以与酶进行“抑制剂”和“催化剂”相互作用药物名称和商标名称。",
        "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  '抑制剂' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  '催化剂'",
        "mask_query": "SELECT T1.<unk> ,  T1.trade_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> WHERE <unk>  =  '抑制剂' INTERSECT SELECT T1.<unk> ,  T1.trade_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> WHERE <unk>  =  '催化剂'"
    },
    {
        "db_id": "imdb",
        "question": "列出2010发布的所有“科幻”电影",
        "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"科幻\" AND t3.release_year  =  2010;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<mask>  =  \"科幻\" AND t3.<unk>  =  2010;"
    },
    {
        "db_id": "perpetrator",
        "question": "体重最大的犯罪者的名字是什么？",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "question": "找出有一只3岁猫的学生的姓氏。",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  '猫'",
        "mask_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.<unk>  =  3 AND T3.pettype  =  '猫'"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "有哪些不同类型的交易？",
        "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "company_employee",
        "question": "显示至少有两家公司的总部。",
        "query": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "match_season",
        "question": "显示位置是后卫的球员的选秀号码和选秀类别。",
        "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"后卫\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE POSITION  =  \"后卫\""
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出旅游景点的名称，可以乘坐“公共汽车”或地址在 “长江路292号” 。",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"长江路292号\" OR T2.How_to_Get_There  =  \"公共汽车\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"长江路292号\" OR T2.<unk>  =  \"公共汽车\""
    },
    {
        "db_id": "company_employee",
        "question": "显示既有“银行”的公司也有“天然气”行业的公司的总部。",
        "query": "SELECT Headquarters FROM company WHERE Industry  =  \"银行业\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"天然气\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"银行业\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"天然气\""
    },
    {
        "db_id": "program_share",
        "question": "“央视”拥有的所有频道的总份额（占总数的百分比）是多少？",
        "query": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  '央视'",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE OWNER  =  '央视'"
    },
    {
        "db_id": "address_1",
        "question": "按纬度排序显示所有美国城市的名称。",
        "query": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"USA\" ORDER BY <unk>"
    },
    {
        "db_id": "university_rank",
        "question": "报名人数最少的家庭会议是什么？",
        "query": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
        "mask_query": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "那种可以与最多的药物进行“催化剂”相互作用的酶的ID和名称是什么？",
        "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  '催化剂' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '催化剂' GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "金额大于平均交易金额的交易的ID是什么？",
        "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "mask_query": "SELECT <unk> FROM Financial_transactions WHERE <unk>  >  (SELECT avg(<unk>) FROM Financial_transactions)"
    },
    {
        "db_id": "academic",
        "question": "返回论文“使数据库可用”的参考资料数量。",
        "query": "SELECT reference_num FROM publication WHERE title  =  \"使数据库可用\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "car_racing",
        "question": "按分数的降序列出所有司机的名字。",
        "query": "SELECT Driver FROM driver ORDER BY Points DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "customer_complaints",
        "question": "对产品投诉最多的客户的电子邮件是什么？",
        "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM customers AS t1 JOIN complaints AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "game_1",
        "question": "我们提供多少种不同类型的运动？",
        "query": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
        "mask_query": "SELECT count(DISTINCT sportname) FROM Sportsinfo"
    },
    {
        "db_id": "college_2",
        "question": "预算大于平均的部门的名称和预算是什么？",
        "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  (SELECT avg(<unk>) FROM <mask>)"
    },
    {
        "db_id": "e_learning",
        "question": "列出所有作者和导师的登录名和姓氏。",
        "query": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "phone_1",
        "question": "列出屏幕模式中使用的KB的最大、最小和平均数。",
        "query": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;",
        "mask_query": "SELECT max(<unk>) , min(<unk>) , avg(<unk>) FROM <mask>;"
    },
    {
        "db_id": "geo",
        "question": "与“陕西”接壤的省数",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"陕西\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  \"陕西\";"
    },
    {
        "db_id": "dorm_1",
        "question": "“大礼堂”按字母顺序有哪些设施？",
        "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  '大礼堂' ORDER BY T3.amenity_name",
        "mask_query": "SELECT T3.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  '大礼堂' ORDER BY T3.<unk>"
    },
    {
        "db_id": "culture_company",
        "question": "在2000年之前，所有电影的平均、最大和最小预算是多少？",
        "query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",
        "mask_query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM <mask> WHERE YEAR  <  2000"
    },
    {
        "db_id": "loan_1",
        "question": "针对不同的账户类型，信用评分低于50的客户的平均账户余额是多少？",
        "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM <mask> WHERE <unk>  <  50 GROUP BY <unk>"
    },
    {
        "db_id": "device",
        "question": "哪些设备的运营商软件平台不是“安卓”？",
        "query": "SELECT Carrier FROM device WHERE Software_Platform != '安卓'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != '安卓'"
    },
    {
        "db_id": "music_1",
        "question": "列出在“三月”发布歌曲的所有艺人的姓名和性别。",
        "query": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"三月\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE \"三月\""
    },
    {
        "db_id": "insurance_policies",
        "question": "哪种政策类型是大多数客户选择的？",
        "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "有一种名为“氨磺必利”的能起到“抑制剂”的作用的药物，其中酶的名称是什么？",
        "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  '氨磺必利' AND T2.interaction_type  =  '抑制剂'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '氨磺必利' AND T2.<unk>  =  '抑制剂'"
    },
    {
        "db_id": "network_2",
        "question": "找到“丹丹”或“丽丽”的朋友的姓名和年龄。",
        "query": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  '丹丹' OR T2.friend  =  '丽丽'",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '丹丹' OR T2.<unk>  =  '丽丽'"
    },
    {
        "db_id": "geo",
        "question": "中国最小的省内的最大的城市是什么？",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "world_1",
        "question": "讲2种以上语言的国家的名称是什么，以及它们讲多少种语言？",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "mask_query": "SELECT COUNT(T2.<unk>) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "查找所有商店的最小和最大产品数量。",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "mask_query": "SELECT min(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "在FDA记录中有“是”的药物的名称和商标名称是什么？",
        "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  '是'",
        "mask_query": "SELECT <unk> ,  trade_name FROM <mask> WHERE <unk>  =  '是'"
    },
    {
        "db_id": "game_injury",
        "question": "造成至少两起伤害事故的比赛的ID、分数和日期是多少？",
        "query": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.score ,  T1.date FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "dorm_1",
        "question": "名字中包含“慧”字段的宿舍中学生的能力和性别是什么？",
        "query": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '慧'",
        "mask_query": "SELECT <unk> ,  <unk> FROM dorm WHERE <unk> LIKE '慧'"
    },
    {
        "db_id": "activity_1",
        "question": "显示所有教员等级和每个等级指导的学生人数。",
        "query": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "mask_query": "SELECT T1.rank ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.advisor GROUP BY T1.rank"
    },
    {
        "db_id": "planet_1",
        "question": "那些薪水在5000到10000之间的员工叫什么名字？",
        "query": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "每个参与者参加了多少活动？列出参与者的ID、类型和数量。",
        "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "advertising_agencies",
        "question": "数一数代理机构的数目。",
        "query": "SELECT count(*) FROM Agencies",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "flight_4",
        "question": "找出在“中国”航线数量最多的最繁忙的来源机场。",
        "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  \"中国\" GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"中国\" GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "singer",
        "question": "销售超过300000的歌手的不同的名字是什么？",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  300000"
    },
    {
        "db_id": "book_press",
        "question": "哪些作者从未在“雅高”出版社出版过图书？给出他们的名字。",
        "query": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.author_id  =  t2.author_id JOIN <mask> AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'"
    },
    {
        "db_id": "e_learning",
        "question": "以计数的递减顺序列出每个测试结果及其计数。",
        "query": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "e_commerce",
        "question": "订购和装运的物品的状态代码是什么，以及它们的装运跟踪号是什么？",
        "query": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> FROM Order_items AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "college_1",
        "question": "所有“会计学”系上课的教授的姓氏是什么？他们上的课程的教室是什么？",
        "query": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  '会计学'",
        "mask_query": "SELECT T2.emp_fname ,  T1.class_room FROM <mask> AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  '会计学'"
    },
    {
        "db_id": "college_1",
        "question": "找出上过课的所有学生的姓名以及课程描述。",
        "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
        "mask_query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN <mask> AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code"
    },
    {
        "db_id": "ship_mission",
        "question": "涉及的船舶的任务代码、命运和名称是什么？",
        "query": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "对于任何文档使用过的模板，都有哪些不同的模板类型描述？",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "mask_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN <mask> AS T2 ON T1.template_type_code  = T2.template_type_code JOIN <mask> AS T3 ON T2.<unk>  =  T3.template_ID"
    },
    {
        "db_id": "video_game",
        "question": "列出不玩任何游戏的玩家的名字。",
        "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出访问日期和访客细节是“维华”的游客",
        "query": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"维华\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"维华\""
    },
    {
        "db_id": "scholar",
        "question": "“杰米·卡兰”每一年的论文数",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"杰米·卡兰\" GROUP BY t3.year;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"杰米·卡兰\" GROUP BY t3.<unk>;"
    },
    {
        "db_id": "icfp_1",
        "question": "找到包含“机械”一词的论文标题。",
        "query": "SELECT title FROM papers WHERE title LIKE \"机械\"",
        "mask_query": "SELECT <unk> FROM papers WHERE <unk> LIKE \"机械\""
    },
    {
        "db_id": "soccer_2",
        "question": "没有“守门员”就读的学校的总入学人数是多少？",
        "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"守门员\")",
        "mask_query": "SELECT sum(<unk>) FROM college WHERE <unk> NOT IN (SELECT <unk> FROM tryout WHERE <unk>  =  \"守门员\")"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "返回所有产品的细节。",
        "query": "SELECT DISTINCT product_details FROM products",
        "mask_query": "SELECT DISTINCT <unk> FROM products"
    },
    {
        "db_id": "region_building",
        "question": "哪些地区有多栋建筑？给我地区的名字。",
        "query": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "game_1",
        "question": "生活在“慧园”中的所有学生的ID是什么？",
        "query": "SELECT StuID FROM Student WHERE city_code  =  \"慧园\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"慧园\""
    },
    {
        "db_id": "pilot_record",
        "question": "飞行员的职位和队伍是什么？",
        "query": "SELECT POSITION ,  Team FROM pilot",
        "mask_query": "SELECT POSITION ,  <unk> FROM <mask>"
    },
    {
        "db_id": "institution_sports",
        "question": "不同类型的机构隶属关系及相应的机构数量是什么？",
        "query": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "railway",
        "question": "按等级升序排列经理的姓名是什么？",
        "query": "SELECT Name FROM manager ORDER BY LEVEL ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY LEVEL ASC"
    },
    {
        "db_id": "singer",
        "question": "没有任何歌曲的歌手的名字是什么？",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "cinema",
        "question": "给我每个电影的片名和最高价格。",
        "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
        "mask_query": "SELECT T2.title ,  max(T1.price) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"
    },
    {
        "db_id": "bakery_1",
        "question": "给出不包含馅饼口味的所有蛋糕的口味。",
        "query": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
        "mask_query": "SELECT DISTINCT flavor FROM <mask> WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM <mask> WHERE food  =  \"Tart\""
    },
    {
        "db_id": "icfp_1",
        "question": "哪些作者写过标题包含“单细胞”的论文？返回他们的姓氏。",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"单细胞\"",
        "mask_query": "SELECT t1.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.<unk> LIKE \"单细胞\""
    },
    {
        "db_id": "scholar",
        "question": "“穆罕默德·拉斯特加里”的期刊论文",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"穆罕默德·拉斯特加里\" AND t3.journalid  >=  0;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"穆罕默德·拉斯特加里\" AND t3.journalid  >=  0;"
    },
    {
        "db_id": "store_1",
        "question": "给我一个发票数量前5的国家的列表。列出国家名称和发票数量。",
        "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 5;"
    },
    {
        "db_id": "election",
        "question": "在选举中没有代表的政党名称是什么？",
        "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "sing_contest",
        "question": "用克罗地亚语和英语演唱过歌曲的参与者的名字和受欢迎程度如何？",
        "query": "SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  'Croatian' INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  'English'"
    },
    {
        "db_id": "advertising_agencies",
        "question": "每个客户的客户详细信息是什么，以及他们的代理机构的相应详细信息是什么？",
        "query": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "imdb",
        "question": "找出所有来自“阿富汗”的导演",
        "query": "SELECT name FROM director WHERE nationality  =  \"阿富汗\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"阿富汗\";"
    },
    {
        "db_id": "scholar",
        "question": "给我2012年以前“李素音”写的论文。",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"李素音\" AND t3.year  <  2012;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"李素音\" AND t3.<unk>  <  2012;"
    },
    {
        "db_id": "manufactory_1",
        "question": "每个创始人创办的公司的总收益是多少？",
        "query": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",
        "mask_query": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder"
    },
    {
        "db_id": "decoration_competition",
        "question": "显示与来自国家“加拿大”的成员相关的大学的不同领导者的名字。",
        "query": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"加拿大\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"加拿大\""
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "有多少有参与者的活动的详细信息中包含子串'博士'。",
        "query": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '博士'",
        "mask_query": "SELECT count(*) FROM participants AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.participant_details LIKE '博士'"
    },
    {
        "db_id": "college_2",
        "question": "教过“C编程”课程的老师的名字是什么？",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C语言'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.id JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  'C语言'"
    },
    {
        "db_id": "customers_and_orders",
        "question": "每种付款方式有多少客户使用？",
        "query": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "car_road_race",
        "question": "除了拥有詹姆斯·辛奇克利夫杆位之外的其他司机叫什么名字？",
        "query": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"James Hinchcliffe\""
    },
    {
        "db_id": "museum_visit",
        "question": "查找会员级别高于4的游客的姓名，并将结果按级别从高到低排序。",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "mask_query": "SELECT name FROM <mask> WHERE <unk>  >  4 ORDER BY <unk> DESC"
    },
    {
        "db_id": "sakila_1",
        "question": "电影“暗战”使用的是哪种语言？列出语言名称。",
        "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  '暗战'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN LANGUAGE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '暗战'"
    },
    {
        "db_id": "geo",
        "question": "“广东”主要河流有哪些",
        "query": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"广东\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  >  750 AND <unk>  =  \"广东\";"
    },
    {
        "db_id": "wedding",
        "question": "以开放日期的降序列出所有教堂名称。",
        "query": "SELECT name FROM church ORDER BY open_date DESC",
        "mask_query": "SELECT name FROM <mask> ORDER BY open_date DESC"
    },
    {
        "db_id": "storm_record",
        "question": "受暴风雨影响死亡人数最多的地区叫什么名字？",
        "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "mask_query": "SELECT T2.region_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.region_id  =  T2.region_id JOIN <mask> AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "question": "有多少健美运动员？",
        "query": "SELECT count(*) FROM body_builder",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "dorm_1",
        "question": "找到住在“大礼堂”的学生的名字。",
        "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  '大礼堂'",
        "mask_query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  '大礼堂'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "与名为最佳的集合相关的集合的名称是什么？",
        "query": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
        "mask_query": "SELECT DISTINCT T4.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T1.<unk> = T3.<unk> JOIN <mask> AS T4 ON T2.<unk> = T4.<unk> WHERE T3.<unk> = \"Best\";"
    },
    {
        "db_id": "inn_1",
        "question": "每个不同装修风格的房间平均最低价格是多少？",
        "query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",
        "mask_query": "SELECT <unk> , avg(<unk>) ,  min(<unk>) FROM <mask> GROUP BY <unk>;"
    },
    {
        "db_id": "formula_1",
        "question": "按字典反序顺序列出所有不同比赛的名字？",
        "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "居住在自己拥有的房产的用户的名字、中间名和姓氏是什么？",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  T2.<unk>;"
    },
    {
        "db_id": "browser_web",
        "question": "查找每个操作系统的网络加速器的数量。",
        "query": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system",
        "mask_query": "SELECT <unk> ,  count(*) FROM web_client_accelerator GROUP BY <unk>"
    },
    {
        "db_id": "college_2",
        "question": "找出平均工资高于所有教师平均工资的院系的最低工资。",
        "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
        "mask_query": "SELECT min(<unk>) ,  <unk> FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  >  (SELECT avg(<unk>) FROM <mask>)"
    },
    {
        "db_id": "insurance_fnol",
        "question": "查找超过4个客户使用的保险单类型。",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
        "mask_query": "SELECT <unk> FROM available_policies GROUP BY <unk> HAVING count(*)  >  4"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "显示交易类型的数目。",
        "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "按课程名称排序，“心理学”系的课程的建筑、房间号码、学期和年份是什么？",
        "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  '心理学' ORDER BY T1.title",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN SECTION AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '心理学' ORDER BY T1.<unk>"
    },
    {
        "db_id": "planet_1",
        "question": "计算奥格登·沃恩斯特罗姆寄出且王里奥接收的包裹数量。",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
        "mask_query": "SELECT T1.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> = \"Ogden Wernstrom\" INTERSECT SELECT T1.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> = \"Leo Wong\""
    },
    {
        "db_id": "student_1",
        "question": "哪个教室的学生最多？",
        "query": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT classroom FROM <mask> GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "driving_school",
        "question": "所有超过2次付款的客户的名字和姓氏是什么？",
        "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  2;"
    },
    {
        "db_id": "apartment_rentals",
        "question": "找到所有公寓的平均卧室数。",
        "query": "SELECT avg(bedroom_count) FROM Apartments",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "买的最多产品的名字和ID是什么？",
        "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
        "mask_query": "SELECT t2.<unk> ,  t2.<unk> FROM order_items AS t1 JOIN products AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY sum(t1.<unk>) LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "question": "20岁以下和30岁以上车手使用的制造商是什么？",
        "query": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
        "mask_query": "SELECT CONSTRUCTOR FROM <mask> WHERE <unk>  <  20 INTERSECT SELECT CONSTRUCTOR FROM <mask> WHERE <unk>  >  30"
    },
    {
        "db_id": "soccer_2",
        "question": "有多少学生担任“守门员”的角色？",
        "query": "SELECT count(*) FROM tryout WHERE pPos  =  '守门员'",
        "mask_query": "SELECT count(*) FROM tryout WHERE <unk>  =  '守门员'"
    },
    {
        "db_id": "inn_1",
        "question": "能容纳人数最多的房间叫什么名字？",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "club_1",
        "question": "“天天”“帅”属于多少家俱乐部？",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"天天\" AND t3.lname  =  \"帅\"",
        "mask_query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"天天\" AND t3.lname  =  \"帅\""
    },
    {
        "db_id": "scholar",
        "question": "2016年关于“问答”的话题写了哪些论文？",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"问答\" AND t3.year  =  2016;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"问答\" AND t3.<unk>  =  2016;"
    },
    {
        "db_id": "scientist_1",
        "question": "有多少不同的科学家被指派给任何项目？",
        "query": "SELECT count(DISTINCT scientist) FROM assignedto",
        "mask_query": "SELECT count(DISTINCT scientist) FROM assignedto"
    },
    {
        "db_id": "wta_1",
        "question": "在“WTA锦标赛”和“澳大利亚公开赛”中都取胜的球员的国家代码和名字是什么？",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA 锦标赛' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  '澳网'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'WTA 锦标赛' INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '澳网'"
    },
    {
        "db_id": "driving_school",
        "question": "姓氏为“齐”或名字为“彬斌”的客户的状态码、手机号码和电子邮件地址是什么？",
        "query": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"彬斌\" OR last_name  =  \"齐\"",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk> = \"彬斌\" OR <unk>  =  \"齐\""
    },
    {
        "db_id": "address_1",
        "question": "给出两个城市之间的平均距离、最小距离和最大距离。",
        "query": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
        "mask_query": "SELECT avg(<unk>) ,  min(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示所有作者姓名。",
        "query": "SELECT author_name FROM Authors",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "flight_2",
        "question": "有多少航空公司来自美国？",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"美国\"",
        "mask_query": "SELECT count(*) FROM AIRLINES WHERE <unk>  =  \"美国\""
    },
    {
        "db_id": "flight_2",
        "question": "哪个城市的机场中起飞航班是最频繁的？",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "wedding",
        "question": "展示所有的开放年和在那一年开办的教堂数量。",
        "query": "SELECT open_date ,  count(*) FROM church GROUP BY open_date",
        "mask_query": "SELECT open_date ,  count(*) FROM <mask> GROUP BY open_date"
    },
    {
        "db_id": "body_builder",
        "question": "以抓举分数升序列出健美运动员的抓举得分和挺举得分。",
        "query": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "region_building",
        "question": "哪个地区的人口最多？把这个地区的首府给我。",
        "query": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "activity_1",
        "question": "参加至少一项活动的20岁以下学生的ID是什么？",
        "query": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "mask_query": "SELECT <unk> FROM <mask> INTERSECT SELECT <unk> FROM <mask> WHERE age  <  20"
    },
    {
        "db_id": "college_2",
        "question": "预算最大的部门的部门名称和相应的建筑是什么？",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "device",
        "question": "“苹果”店的开店日期和年份是多少？",
        "query": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"苹果\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"苹果\""
    },
    {
        "db_id": "cre_Theme_park",
        "question": "三家价格范围最低的旅馆的细节和星级标准是什么？",
        "query": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "mask_query": "SELECT <unk> ,  <unk> FROM HOTELS ORDER BY <unk> ASC LIMIT 3"
    },
    {
        "db_id": "flight_2",
        "question": "找到航班最少的航空公司的缩写和国家。",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "driving_school",
        "question": "列出没有支付历史记录的客户数量。",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> );"
    },
    {
        "db_id": "loan_1",
        "question": "查找贷款总额超过5000的客户的姓名和账户余额。",
        "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.<unk> HAVING sum(T2.<unk>)  >  5000"
    },
    {
        "db_id": "car_1",
        "question": "没有汽车制造商的国家的名字是什么？",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.<unk>;"
    },
    {
        "db_id": "government_shift",
        "question": "查找与频道“15ij”交互过的所有服务。",
        "query": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\"",
        "mask_query": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\""
    },
    {
        "db_id": "planet_1",
        "question": "菲利普·J·弗莱管理的每一批货的发货ID是多少？",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"Phillip J. Fry\";"
    },
    {
        "db_id": "dorm_1",
        "question": "找出每个城市学生的平均年龄。",
        "query": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
        "mask_query": "SELECT avg(age) ,  <unk> FROM student GROUP BY <unk>"
    },
    {
        "db_id": "car_1",
        "question": "每个制造商生产的车型数量是多少？每个制造商的ID和全名是什么？",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "mask_query": "SELECT Count(*) ,  T2.<unk> ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.id;"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示订单ID和每个订单中的项目数量。",
        "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM Order_items GROUP BY <unk>"
    },
    {
        "db_id": "solvency_ii",
        "question": "按照产品名称字母升序显示至少包含两个事件中的产品名称。",
        "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  2 ORDER BY T1.<unk>"
    },
    {
        "db_id": "geo",
        "question": "最大省中的人口密度是多少？",
        "query": "SELECT density FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "以“白色”作为其颜色描述的产品名称是什么？",
        "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"白色\"",
        "mask_query": "SELECT t1.<unk> FROM products AS t1 JOIN ref_colors AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"白色\""
    },
    {
        "db_id": "store_product",
        "question": "每分钟颜色的平均页数的数量是多少？",
        "query": "SELECT avg(pages_per_minute_color) FROM product",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "wta_1",
        "question": "找出那些排名积分最高的并且参加过“澳大利亚公开赛”的获胜者的名字。",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  '澳网' ORDER BY winner_rank_points DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '澳网' ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "河流最长的省的省会是什么？",
        "query": "SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> ) );"
    },
    {
        "db_id": "dog_kennels",
        "question": "哪些专家居住在一个包含“西”字的城市？列出他或她的角色，街道，城市和州。",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE \"%西%\"",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM professionals WHERE <unk> LIKE \"%西%\""
    },
    {
        "db_id": "allergy_1",
        "question": "过敏类型有哪些？每种类型有多少种过敏反应？",
        "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
        "mask_query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "哪些员工报告“内存”产品而不是“硬盘”产品的问题？给出他们的名字和姓氏。",
        "query": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"内存\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"硬盘\"",
        "mask_query": "SELECT T3.<unk> ,  T3.<unk> FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.<unk> = T2.<unk> AND T1.<unk> = T3.<unk> WHERE T2.<unk> = \"内存\" EXCEPT SELECT T3.<unk> ,  T3.<unk> FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.<unk> = T2.<unk> AND T1.<unk> = T3.<unk> WHERE T2.<unk> = \"硬盘\""
    },
    {
        "db_id": "imdb",
        "question": "“吴彦祖”每年表演的电影数量是多少？",
        "query": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"吴彦祖\" GROUP BY t2.release_year;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk>  )  ,  t2.<unk> FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"吴彦祖\" GROUP BY t2.<unk>;"
    },
    {
        "db_id": "movie_1",
        "question": "对于每个导演，他们导演过的所有电影的片名和评级是多少？",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  T2.<unk> ,  max(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk> != \"null\" GROUP BY <unk>"
    },
    {
        "db_id": "network_1",
        "question": "“小军”在几年级？",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"小军\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"小军\""
    },
    {
        "db_id": "poker_player",
        "question": "列出决赛牌桌和扑克玩家的最佳表现。",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "network_2",
        "question": "不同工作职称的平均年龄是多少？",
        "query": "SELECT avg(age) ,  job FROM Person GROUP BY job",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "advertising_agencies",
        "question": "每个客户ID有多少个会议？",
        "query": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "flight_2",
        "question": "给出缩写为“UAL”的航空公司。",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "mask_query": "SELECT <unk> FROM AIRLINES WHERE <unk>  =  \"UAL\""
    },
    {
        "db_id": "battle_death",
        "question": "当保加利亚的指挥官不是“博瑞尔”时，战争的名称和结果是什么？",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != '博瑞尔'",
        "mask_query": "SELECT <unk> ,  RESULT FROM <mask> WHERE <unk> != '博瑞尔'"
    },
    {
        "db_id": "e_commerce",
        "question": "列出的所有发货的跟踪号和日期。",
        "query": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "climbing",
        "question": "返回高度大于5000的山的国家。",
        "query": "SELECT Country FROM mountain WHERE Height  >  5000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  5000"
    },
    {
        "db_id": "e_learning",
        "question": "找到测试结果为“通过”的日期。",
        "query": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"通过\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"通过\""
    },
    {
        "db_id": "geo",
        "question": "“四川”省会有多少人",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"四川\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" );"
    },
    {
        "db_id": "academic",
        "question": "请将“VLDB”会议包含关键字“信息检索”的论文数量返回。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"信息检索\";",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"VLDB\" AND t1.<mask>  =  \"信息检索\";"
    },
    {
        "db_id": "address_1",
        "question": "说出名为琳达的学生所住的州。",
        "query": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"Linda\""
    },
    {
        "db_id": "bbc_channels",
        "question": "查找汉克巴斯克特没有指导过的频道的ID和名称。",
        "query": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\"",
        "mask_query": "SELECT t1.name ,  t1.channel_id FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id JOIN <mask> AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\""
    },
    {
        "db_id": "insurance_fnol",
        "question": "查找同时使用服务“取消保单”和服务“新开保单”的客户的名称。",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"取消保单\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"新开保单\"",
        "mask_query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"取消保单\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"新开保单\""
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示所有不同批次的细节。",
        "query": "SELECT DISTINCT lot_details FROM LOTS",
        "mask_query": "SELECT DISTINCT <unk> FROM LOTS"
    },
    {
        "db_id": "college_1",
        "question": "姓“孙”的教授总共有多少门课？",
        "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  '孙'",
        "mask_query": "SELECT count(*) FROM employee AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '孙'"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "显示具有配送方法是“顺丰快递”和订单状态“付款”的订单客户的名称。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  '顺丰快递' AND order_status_code  =  '付款'",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  '顺丰快递' AND <unk>  =  '付款'"
    },
    {
        "db_id": "company_1",
        "question": "返回工资超过3万的员工的名字和姓氏。",
        "query": "SELECT fname ,  lname FROM employee WHERE salary  >  30000",
        "mask_query": "SELECT fname ,  lname FROM <mask> WHERE salary  >  30000"
    },
    {
        "db_id": "planet_1",
        "question": "医生的级别是多少？",
        "query": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> WHERE T2.position  =  \"Physician\";"
    },
    {
        "db_id": "ship_1",
        "question": "没有在“第三级船的线路类”的船长的级别是什么？",
        "query": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  \"第三级船的线路类\"",
        "mask_query": "SELECT rank FROM <mask> EXCEPT SELECT rank FROM <mask> WHERE CLASS  =  \"第三级船的线路类\""
    },
    {
        "db_id": "bbc_channels",
        "question": "有多少不同的数字地面频道？",
        "query": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "entrepreneur",
        "question": "那些投资者不是““马云””的企业家的名字是什么？",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"马云\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> != \"马云\""
    },
    {
        "db_id": "academic",
        "question": "返回“数据库”领域中引用最多的论文。",
        "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"数据库\" ORDER BY t3.citation_num DESC LIMIT 1;",
        "mask_query": "SELECT t3.<unk> FROM DOMAIN AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"数据库\" ORDER BY t3.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "game_1",
        "question": "显示所有视频游戏类型。",
        "query": "SELECT DISTINCT gtype FROM Video_games",
        "mask_query": "SELECT DISTINCT gtype FROM Video_games"
    },
    {
        "db_id": "book_review",
        "question": "最常见的书是什么？",
        "query": "SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE FROM <mask> GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "question": "所有附属机构的名称和地址是什么？",
        "query": "SELECT DISTINCT name ,  address FROM Affiliation",
        "mask_query": "SELECT DISTINCT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "race_track",
        "question": "显示所有轨道的名称和位置。",
        "query": "SELECT name ,  LOCATION FROM track",
        "mask_query": "SELECT name ,  LOCATION FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "查找所有客户的姓名。",
        "query": "SELECT customer_name FROM customers",
        "mask_query": "SELECT <unk> FROM customers"
    },
    {
        "db_id": "car_racing",
        "question": "哪个品牌有多个团队？",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "mask_query": "SELECT make FROM <mask> GROUP BY <mask> HAVING count(*)  >  1"
    },
    {
        "db_id": "loan_1",
        "question": "拥有一笔以上贷款的客户的姓名是什么？",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "academic",
        "question": "返回“VLDB”会议论文的数量。",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "hospital_1",
        "question": "给出一些有可用房间的不同的区块代码。",
        "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "mask_query": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0"
    },
    {
        "db_id": "geo",
        "question": "有多少河流流经“贵州”接壤的省",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"贵州\" );",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"贵州\" );"
    },
    {
        "db_id": "book_1",
        "question": "显示所有客户名称及其地址。",
        "query": "SELECT name ,  address FROM Client",
        "mask_query": "SELECT name ,  address FROM <mask>"
    },
    {
        "db_id": "baseball_1",
        "question": "历史上“广州恒大队”在季后赛每年的获胜次数是多少？",
        "query": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  '广州恒大队' GROUP BY T1.year",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '广州恒大队' GROUP BY T1.<unk>"
    },
    {
        "db_id": "swimming",
        "question": "找出所有200米和300米游泳成绩且国籍是“澳大利亚”的游泳运动员。",
        "query": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  '澳大利亚'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE nationality  =  '澳大利亚'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "列出所有学生的简历和成绩单日期。",
        "query": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "region_building",
        "question": "显示20层以上建筑和15层以下建筑共有的竣工年份。",
        "query": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  20 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  15"
    },
    {
        "db_id": "store_product",
        "question": "对于每种类型的商店，有多少种？",
        "query": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE",
        "mask_query": "SELECT TYPE ,  count(*) FROM <mask> GROUP BY TYPE"
    },
    {
        "db_id": "musical",
        "question": "按照年龄降序，演员的角色是什么？",
        "query": "SELECT Character FROM actor ORDER BY age DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "boat_1",
        "question": "年龄最大的水手叫什么名字，年龄是多少？",
        "query": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  ( SELECT max(<unk>) FROM <mask> )"
    },
    {
        "db_id": "aan_1",
        "question": "计算哥伦比亚大学在2009年或之前的论文数量。",
        "query": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  <=  2009 AND T3.name LIKE \"Columbia University\"",
        "mask_query": "SELECT count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  <=  2009 AND T3.<unk> LIKE \"Columbia University\""
    },
    {
        "db_id": "musical",
        "question": "列出音乐剧最常见的结局。",
        "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT RESULT FROM <mask> GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "question": "显示所有男生的学生ID。",
        "query": "SELECT StuID FROM Student WHERE Sex  =  '男'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '男'"
    },
    {
        "db_id": "network_2",
        "question": "所有人的平均年龄是多少？",
        "query": "SELECT avg(age) FROM Person",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出住在“河北”的客户的名字？",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"河北\"",
        "mask_query": "SELECT t1.<unk> FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.<unk>  =  t2.<unk> JOIN addresses AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"河北\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "被授予超过100美元的文件且描述类型为“常规”的文件回复日期是什么？",
        "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  '常规' OR T3.grant_amount  >  100",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  '常规' OR T3.<unk>  >  100"
    },
    {
        "db_id": "train_station",
        "question": "显示没有任何火车的车站名称。",
        "query": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
        "mask_query": "SELECT name FROM <mask> WHERE station_id NOT IN (SELECT station_id FROM <mask>)"
    },
    {
        "db_id": "hospital_1",
        "question": "列出一些医生的主要隶属的部门的名称。",
        "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "mask_query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE <unk>  =  1"
    },
    {
        "db_id": "aan_1",
        "question": "我们在NAACL2000有多少篇论文？",
        "query": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"NAACL\" AND YEAR  =  2000"
    },
    {
        "db_id": "scholar",
        "question": "“丹·克莱因”的论文中引用了多少“迈克尔·乔丹”的论文？",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"迈克尔·乔丹\" AND t1.authorname  =  \"丹·克莱因\";",
        "mask_query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.authorid  =  t2.authorid JOIN <mask> AS t5 ON t3.paperid  =  t5.citedpaperid JOIN <mask> AS t4 ON t4.paperid  =  t5.citingpaperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"迈克尔·乔丹\" AND t1.authorname  =  \"丹·克莱因\";"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "给出单身母亲或学生拥有的房产的最高总价。",
        "query": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
        "mask_query": "SELECT sum(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'Single Mother' OR T2.<unk>  =  'Student';"
    },
    {
        "db_id": "academic",
        "question": "返回在2000年后在“PVLDB”这个会议上“李政道”发表的论文数。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"PVLDB\" AND t4.<unk>  >  2000;"
    },
    {
        "db_id": "hr_1",
        "question": "显示员工的全名（姓名和姓氏），ID和当前工作所在国家的名称。",
        "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "mask_query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id JOIN <mask> AS T3 ON T2.location_id  =  T3.location_id JOIN <mask> AS T4 ON T3.country_id  =  T4.country_id"
    },
    {
        "db_id": "student_assessment",
        "question": "那些注册301课程的学生的ID是什么？",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "mask_query": "SELECT <unk> FROM student_course_attendance WHERE <unk>  =  301"
    },
    {
        "db_id": "scholar",
        "question": "“达尼拉·科埃略”发表了什么会议？",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"达尼拉·科埃略\";",
        "mask_query": "SELECT DISTINCT t3.venueid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"达尼拉·科埃略\";"
    },
    {
        "db_id": "store_1",
        "question": "“唐山”市有多少顾客？",
        "query": "SELECT count(*) FROM customers WHERE city = \"唐山\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"唐山\";"
    },
    {
        "db_id": "yelp",
        "question": "找出“云南”“星巴克”的所有评论。",
        "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"星巴克\" AND t1.state  =  \"云南\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"星巴克\" AND t1.<unk>  =  \"云南\";"
    },
    {
        "db_id": "climbing",
        "question": "在“乌干达”，爬山的登山者使用的时间是多少？",
        "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"乌干达\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"乌干达\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "哪一个客户在一个索赔中做出了最小的索赔额？返回客户详细信息。",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "mask_query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "有多少种不同的状态代码？",
        "query": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "insurance_fnol",
        "question": "在首次丢失通知中，哪些服务已经使用了两次以上？返回服务名称。",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
        "mask_query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
    },
    {
        "db_id": "game_1",
        "question": "不同游戏类型的计数是多少？",
        "query": "SELECT count(DISTINCT gtype) FROM Video_games",
        "mask_query": "SELECT count(DISTINCT gtype) FROM Video_games"
    },
    {
        "db_id": "customers_and_orders",
        "question": "按价格升序排列的所有硬件产品的名称是什么？",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Hardware\" ORDER BY <unk> ASC"
    },
    {
        "db_id": "restaurant_bills",
        "question": "按成员级别按升序对所有客户进行排序，并返回客户名称。",
        "query": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "inn_1",
        "question": "返回由“田” “智”于2010年9月21日预订并登记入住的房间的孩子数量。",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"田\" AND LastName  =  \"智\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"2010-09-21\" AND <unk>  =  \"田\" AND <unk>  =  \"智\";"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "总共列出了多少门课程？",
        "query": "SELECT count(*) FROM Courses",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "hospital_1",
        "question": "每个牌子可开处方的药有多少？",
        "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "mask_query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"
    },
    {
        "db_id": "product_catalog",
        "question": "找到属性值为0的属性定义的名称和属性ID。",
        "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "mask_query": "SELECT t1.<unk> ,  t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  0"
    },
    {
        "db_id": "academic",
        "question": "把“PVLDB”中论文包含的最多数量的关键词返回。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t4.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\" GROUP BY t1.<mask> ORDER BY COUNT ( DISTINCT t2.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "planet_1",
        "question": "列出前3轻包裹的包裹编号和重量。",
        "query": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
        "mask_query": "SELECT <unk> ,  <unk> FROM PACKAGE ORDER BY <unk> ASC LIMIT 3;"
    },
    {
        "db_id": "dorm_1",
        "question": "住在\"天津\"市的20至25岁学生的名字是什么？",
        "query": "SELECT fname FROM student WHERE city_code  =  '天津' AND age BETWEEN 20 AND 25",
        "mask_query": "SELECT fname FROM student WHERE <unk>  =  '天津' AND age BETWEEN 20 AND 25"
    },
    {
        "db_id": "climbing",
        "question": "不是来自“瑞士”国家的登山者的名字是什么？",
        "query": "SELECT Name FROM climber WHERE Country != \"瑞士\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"瑞士\""
    },
    {
        "db_id": "conference",
        "question": "参加过acl和naccl会议的每个人的名字是什么？",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 JOIN <mask> AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'"
    },
    {
        "db_id": "aircraft",
        "question": "飞行员按字母顺序排列的名字是什么？",
        "query": "SELECT Name FROM pilot ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "movie_1",
        "question": "最老电影的平均星级和标题是多少？",
        "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)",
        "mask_query": "SELECT avg(T1.<unk>) ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  (SELECT min(YEAR) FROM <mask>)"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "名为“王俊元”的客户的地址是什么？",
        "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"王俊元\"",
        "mask_query": "SELECT t3.<unk> FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.<unk>  =  t2.<unk> JOIN addresses AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"王俊元\""
    },
    {
        "db_id": "allergy_1",
        "question": "有多少“动物”过敏反应？",
        "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"动物\"",
        "mask_query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"动物\""
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "文档类型是“论文”的文档类型代码是什么？",
        "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"论文\"",
        "mask_query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"论文\""
    },
    {
        "db_id": "e_commerce",
        "question": "每种性别对应多少个订单？",
        "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "vehicle_rent",
        "question": "所有车辆的最低、最高和平均年燃油成本是多少？",
        "query": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
        "mask_query": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles"
    },
    {
        "db_id": "chinook_1",
        "question": "包含了“你”这个词的曲目的名字是什么？",
        "query": "SELECT Name FROM TRACK WHERE Name LIKE '你'",
        "mask_query": "SELECT <unk> FROM TRACK WHERE <unk> LIKE '你'"
    },
    {
        "db_id": "school_finance",
        "question": "多少预算记录的预算金额小于投资金额？",
        "query": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "mask_query": "SELECT count(*) FROM <mask> WHERE budgeted  <  invested"
    },
    {
        "db_id": "hospital_1",
        "question": "找到不使用“扑热息痛”药物的患者的数量。",
        "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  '扑热息痛' )",
        "mask_query": "SELECT count(*) FROM patient WHERE <unk> NOT IN ( SELECT T1.patient FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask>  =  T2.<unk> WHERE T2.name  =  '扑热息痛' )"
    },
    {
        "db_id": "match_season",
        "question": "按字母顺序降序排列的拥有两个或更多玩家的大学的名称是什么？",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2 ORDER BY <unk> DESC"
    },
    {
        "db_id": "scientist_1",
        "question": "找出被指派给任何项目的科学家的名字。",
        "query": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "mask_query": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn"
    },
    {
        "db_id": "geo",
        "question": "“四川”最长的河流是通过哪些省流动的？",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"四川\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> WHERE <unk>  =  \"四川\" );"
    },
    {
        "db_id": "customers_and_orders",
        "question": "类型为衣服的产品平均价格是多少？",
        "query": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  \"Clothes\""
    },
    {
        "db_id": "headphone_store",
        "question": "哪个耳机类别包含最多的耳机？",
        "query": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT CLASS FROM <mask> GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "question": "附属机构为斯坦福大学和哥伦比亚大学的论文的标题和论文编号是什么？",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"Stanford University\" INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"Columbia University\""
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "有多少学生被拘留？",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "我们有什么文档类型代码？",
        "query": "SELECT document_type_code FROM Ref_Document_Types;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "研究人员最多的组织的组织类型和id是什么？",
        "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_racing",
        "question": "材料中含有“纤维”字样的自行车叫什么名字？",
        "query": "SELECT product_name FROM bike WHERE material LIKE \"%fiber%\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"%fiber%\""
    },
    {
        "db_id": "store_product",
        "question": "哪个城市是“卡西欧”店的总部？",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"卡西欧\"",
        "mask_query": "SELECT t3.headquartered_city FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id JOIN <mask> AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"卡西欧\""
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "名字是“钟”、姓氏是“睿”的人的电话号码是多少？",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  '钟' AND last_name  =  '睿'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '钟' AND <unk>  =  '睿'"
    },
    {
        "db_id": "book_review",
        "question": "每本书的最大和最小章节数是多少？",
        "query": "SELECT max(Chapters) ,  min(Chapters) FROM book",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "sing_contest",
        "question": "按字典顺序升序列出歌曲的名称。",
        "query": "SELECT name FROM songs ORDER BY name",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "flight_2",
        "question": "哪家航空公司至少有10次航班？",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "mask_query": "SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  10"
    },
    {
        "db_id": "art_1",
        "question": "在241号画廊中，油画的平均高度和宽度是多少？",
        "query": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) FROM paintings WHERE <unk>  =  \"oil\" AND LOCATION  =  \"Gallery 241\""
    },
    {
        "db_id": "college_1",
        "question": "不教课的教授的名字是什么？",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  '教授' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num",
        "mask_query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  '教授' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN <mask> AS T2 ON T1.emp_num  =  T2.prof_num"
    },
    {
        "db_id": "pilot_1",
        "question": "最不受欢迎的飞机叫什么名字？",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> FROM pilotskills GROUP BY <unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪些部件有超过2个故障？显示零件名称和ID。",
        "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  2"
    },
    {
        "db_id": "allergy_1",
        "question": "显示所有专业和相应的学生数量。",
        "query": "SELECT major ,  count(*) FROM Student GROUP BY major",
        "mask_query": "SELECT major ,  count(*) FROM <mask> GROUP BY major"
    },
    {
        "db_id": "manufactory_1",
        "question": "不制作“DVD驱动器”的公司的名称是什么？",
        "query": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD播放机'",
        "mask_query": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.<unk>  =  T2.code WHERE T1.name  =  'DVD播放机'"
    },
    {
        "db_id": "movie_1",
        "question": "评价排名前三位的电影的片名和发行年份是什么？",
        "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC LIMIT 3"
    },
    {
        "db_id": "mountain_photos",
        "question": "镜头品牌为“尼康”或“奥林巴斯”拍摄的照片名称是什么？",
        "query": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  '尼康' OR T1.brand  =  '奥林巴斯'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> WHERE T1.<unk>  =  '尼康' OR T1.<unk>  =  '奥林巴斯'"
    },
    {
        "db_id": "academic",
        "question": "返回论文“使数据库可用”的引用。",
        "query": "SELECT citation_num FROM publication WHERE title  =  \"使数据库可用\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "restaurant_bills",
        "question": "显示订单总数量大于1的客户。",
        "query": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING sum(T2.<unk>)  >  1"
    },
    {
        "db_id": "region_building",
        "question": "在1980年未竣工的建筑中，最大层数是多少？",
        "query": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
        "mask_query": "SELECT max(<unk>) FROM <mask> WHERE <unk> != \"1980\""
    },
    {
        "db_id": "sakila_1",
        "question": "哪个商店拥有最多的商品？",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "phone_1",
        "question": "列出屏幕模式类型为“文本”或RAM大于32的手机的硬件型号名称。",
        "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"文本\" OR T1.RAM_MiB  >  32;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<mask> JOIN <mask> AS T3 ON T2.<mask> = T3.<unk> WHERE T3.<unk> = \"文本\" OR T1.<unk>  >  32;"
    },
    {
        "db_id": "performance_attendance",
        "question": "列出没有参加任何表演的成员的名字。",
        "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "perpetrator",
        "question": "犯罪者的国家是什么？显示每个国家和相应的犯罪者数量。",
        "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "flight_1",
        "question": "显示所有拥有“波音 733-800”证书的员工姓名。",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"波音\"",
        "mask_query": "SELECT T1.<unk> FROM Employee AS T1 JOIN Certificate AS T2 ON T1.<unk>  =  T2.<unk> JOIN Aircraft AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"波音\""
    },
    {
        "db_id": "scholar",
        "question": "在2010年的EMNLP哪一篇论文引用数最多？",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM <mask> AS t1 JOIN <mask> AS t3 ON t1.paperid  =  t3.citedpaperid JOIN <mask> AS t2 ON t2.venueid  =  t1.venueid WHERE t1.<unk>  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
    },
    {
        "db_id": "e_government",
        "question": "所有的城市和省的名字是什么？",
        "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "mask_query": "SELECT <unk> FROM addresses UNION SELECT <unk> FROM addresses"
    },
    {
        "db_id": "musical",
        "question": "音乐剧“歌剧魅影”的演员叫什么名字？",
        "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"歌剧魅影\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"歌剧魅影\""
    },
    {
        "db_id": "college_1",
        "question": "拥有“博士”学位的教授总数是多少？",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  '博士'",
        "mask_query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  '博士'"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示客户所有发票的ID、状态代码和详细信息。",
        "query": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "county_public_safety",
        "question": "按人口降序列出各个省的名称。",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "csu_1",
        "question": "列出在2004年间有600到1000个教职员工的学校。",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "mask_query": "SELECT T1.campus FROM campuses AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.campus WHERE t2.<mask>  >=  600 AND t2.<mask>  <=  1000 AND T1.year  =  2004"
    },
    {
        "db_id": "tracking_orders",
        "question": "找出在“1989-09-03”之前或“2007-12-25”之后创建的发票号码。",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "mask_query": "SELECT <unk> FROM invoices WHERE <unk> < \"1989-09-03\" OR <unk> > \"2007-12-25\""
    },
    {
        "db_id": "bakery_1",
        "question": "按ID顺序列出所有商品的ID。",
        "query": "SELECT DISTINCT id FROM goods ORDER BY id",
        "mask_query": "SELECT DISTINCT id FROM <mask> ORDER BY id"
    },
    {
        "db_id": "college_2",
        "question": "薪水比“生物学”系任何一位教员都高的教员的名字是什么？",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  '生物学')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT max(<unk>) FROM <mask> WHERE <unk>  =  '生物学')"
    },
    {
        "db_id": "government_shift",
        "question": "详细信息为“哈迪库驰”的客户使用了哪些服务？把服务细节给我。",
        "query": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
        "mask_query": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\""
    },
    {
        "db_id": "cre_Theme_park",
        "question": "显示最多游览一次的旅游景点的名称和ID。",
        "query": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN VISITS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  <=  1"
    },
    {
        "db_id": "geo",
        "question": "哪些河流不贯穿“中国” ",
        "query": "SELECT river_name FROM river WHERE country_name != \"中国\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"中国\";"
    },
    {
        "db_id": "network_1",
        "question": "返回有最多朋友数量的高中生的名字。",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "在“1986-08-26 20:49:27”之前寄出的文件的补助金额和在“1989-03-16 18:27:16”补助结束之后的补助金额是多少？",
        "query": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  '1986-08-26 20:49:27' INTERSECT SELECT <unk> FROM grants WHERE <unk>  >  '1989-03-16 18:27:16'"
    },
    {
        "db_id": "concert_singer",
        "question": "每个歌手的名字和演唱会的数量是多少？",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "mask_query": "SELECT T2.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "db_id": "customers_and_orders",
        "question": "每种产品类型有多少种产品？",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "每个成绩的详细信息和类型描述是什么？",
        "query": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "chinook_1",
        "question": "找到专辑的数量。",
        "query": "SELECT count(*) FROM ALBUM",
        "mask_query": "SELECT count(*) FROM ALBUM"
    },
    {
        "db_id": "pilot_1",
        "question": "返回不同飞机的名字，以及驾驶每架飞机的最老飞行员的名字。",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "mask_query": "SELECT <unk> ,  <unk> ,  max(<unk>) FROM pilotskills GROUP BY <unk>"
    },
    {
        "db_id": "pets_1",
        "question": "找出不同类型宠物的数量。",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "mask_query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "db_id": "election_representative",
        "question": "列出选举日期和投票率。",
        "query": "SELECT Date ,  Vote_Percent FROM election",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "最多数旅游景点属于哪个景点类型？告诉我它的景点类型描述和代码。",
        "query": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "question": "列出每个出生地以及那里的人数。",
        "query": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "vehicle_rent",
        "question": "我们有多少辆车？",
        "query": "SELECT count(*) FROM vehicles",
        "mask_query": "SELECT count(*) FROM vehicles"
    },
    {
        "db_id": "body_builder",
        "question": "总分最高的健美运动员的出生日期和出生地点是什么？",
        "query": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "program_share",
        "question": "找到每个频道所有者的总评级比率。",
        "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
        "mask_query": "SELECT sum(<unk>) ,  OWNER FROM <mask> GROUP BY OWNER"
    },
    {
        "db_id": "hospital_1",
        "question": "哪个医生负责一个以上的病人？给出他们的名字。",
        "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "mask_query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.<unk> GROUP BY T1.employeeid HAVING count(*)  >  1"
    },
    {
        "db_id": "soccer_2",
        "question": "“小刚”所在的大学是哪一个省？",
        "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  '小刚'",
        "mask_query": "SELECT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> JOIN player AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '小刚'"
    },
    {
        "db_id": "poker_player",
        "question": "统计不同民族的数量。",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "sakila_1",
        "question": "请给出姓为“严”的工作人员的地址。",
        "query": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  '严'",
        "mask_query": "SELECT T2.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '严'"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "“中国”这个国家有多少个地址？",
        "query": "SELECT count(*) FROM addresses WHERE country  =  '中国'",
        "mask_query": "SELECT count(*) FROM addresses WHERE <unk>  =  '中国'"
    },
    {
        "db_id": "boat_1",
        "question": "预订了按等级分组的红色船的水手的等级和平均年龄是多少？",
        "query": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
        "mask_query": "SELECT T1.<unk> ,  avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  'red' GROUP BY T1.<unk>"
    },
    {
        "db_id": "music_4",
        "question": "计算拥有专辑的不同艺术家的数量。",
        "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "mask_query": "SELECT COUNT(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "按字母顺序列出所有城市的地址。",
        "query": "SELECT city FROM Addresses ORDER BY city",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "school_player",
        "question": "有5个最老球员的球队是什么？",
        "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 5"
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示全部有设施代码“体育馆”的公寓房间总数。",
        "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"体育馆\"",
        "mask_query": "SELECT sum(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"体育馆\""
    },
    {
        "db_id": "roller_coaster",
        "question": "显示有最快的速度过山车的公园。",
        "query": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "document_management",
        "question": "返回名为“张伟的简历”的文档的类型代码。",
        "query": "SELECT document_type_code FROM documents WHERE document_name  =  \"张伟的简历\"",
        "mask_query": "SELECT <unk> FROM documents WHERE <unk>  =  \"张伟的简历\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "“研究”经费的总额是多少？",
        "query": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  '研究'",
        "mask_query": "SELECT sum(<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN organisation_Types AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '研究'"
    },
    {
        "db_id": "voter_2",
        "question": "找出投票记录的总数。",
        "query": "SELECT count(*) FROM VOTING_RECORD",
        "mask_query": "SELECT count(*) FROM VOTING_RECORD"
    },
    {
        "db_id": "yelp",
        "question": "找出在2012编写评论的用户的所有提示",
        "query": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id  =  t1.user_id JOIN tip AS t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;",
        "mask_query": "SELECT t2.<unk> FROM USER AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  2012;"
    },
    {
        "db_id": "apartment_rentals",
        "question": "预订每套公寓的客人姓名、开始日期和结束日期是什么？",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "“5”星级酒店允许宠物的平均价格范围是多少？",
        "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "mask_query": "SELECT avg(<unk>) FROM HOTELS WHERE <unk>  =  \"5\" AND <unk>  =  1"
    },
    {
        "db_id": "tvshow",
        "question": "对于每种语言，列出使用它的电视频道的数量。",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "mask_query": "SELECT LANGUAGE ,  count(*) FROM <mask> GROUP BY LANGUAGE"
    },
    {
        "db_id": "flight_1",
        "question": "员工工资在100000到200000的人数是多少？",
        "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "mask_query": "SELECT count(*) FROM Employee WHERE <unk> BETWEEN 100000 AND 200000"
    },
    {
        "db_id": "climbing",
        "question": "返回来自英国的登山者的最大点数。",
        "query": "SELECT max(Points) FROM climber WHERE Country  =  \"英国\"",
        "mask_query": "SELECT max(<unk>) FROM <mask> WHERE <unk>  =  \"英国\""
    },
    {
        "db_id": "college_2",
        "question": "每个院系有多少学生？",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "game_1",
        "question": "所有主修课程编号是600课程的学生的名字是什么？",
        "query": "SELECT Fname FROM Student WHERE Major  =  600",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  600"
    },
    {
        "db_id": "flight_company",
        "question": "列出主要提供“货物”服务的公司以及从事“餐饮服务”活动的公司的飞行员的名字。",
        "query": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  \"货物\" INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  \"餐饮服务\"",
        "mask_query": "SELECT T2.pilot FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> WHERE T1.principal_activities  =  \"货物\" INTERSECT SELECT T2.pilot FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> WHERE T1.principal_activities  =  \"餐饮服务\""
    },
    {
        "db_id": "network_2",
        "question": "不同职称的“男”的平均年龄是多少？",
        "query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  '男' GROUP BY job",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM <mask> WHERE <unk>  =  '男' GROUP BY <unk>"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "查找具有“代理”保险单“统一”保险单的客户的名字。",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"代理\" OR t1.policy_type_code  =  \"统一\"",
        "mask_query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"代理\" OR t1.policy_type_code  =  \"统一\""
    },
    {
        "db_id": "inn_1",
        "question": "三个最高价房间的名字和ID是什么？",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 3;"
    },
    {
        "db_id": "party_people",
        "question": "统计不同政党的人数。",
        "query": "SELECT count(DISTINCT party_name) FROM party",
        "mask_query": "SELECT count(DISTINCT party_name) FROM <mask>"
    },
    {
        "db_id": "storm_record",
        "question": "显示影响区域“丹麦”的所有风暴名称。",
        "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  '丹麦'",
        "mask_query": "SELECT T3.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.region_id  =  T2.region_id JOIN <mask> AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  '丹麦'"
    },
    {
        "db_id": "railway",
        "question": "显示有超过一条铁路的位置。",
        "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1",
        "mask_query": "SELECT LOCATION FROM <mask> GROUP BY LOCATION HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "有多少文档使用“PPT”类型的模板？",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'PPT'"
    },
    {
        "db_id": "geo",
        "question": "中国距离最短的河流是什么？",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "最常见的学生地址类型是什么？给我地址类型的代码和描述。",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 WHERE T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "game_1",
        "question": "有多少视频游戏是“大型多人在线游戏”？",
        "query": "SELECT count(*) FROM Video_games WHERE gtype  =  \"大型多人在线游戏\"",
        "mask_query": "SELECT count(*) FROM Video_games WHERE gtype  =  \"大型多人在线游戏\""
    },
    {
        "db_id": "body_builder",
        "question": "那些生日里包含\"一月\"的健美运动员的总分数是多少？",
        "query": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"一月\";",
        "mask_query": "SELECT T1.total FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.people_id  =  T2.people_id WHERE T2.<unk> LIKE \"一月\";"
    },
    {
        "db_id": "match_season",
        "question": "没有比赛记录的球队名称是什么？",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "world_1",
        "question": "有多少国家有“共和制”政府？",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"共和制\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"共和制\""
    },
    {
        "db_id": "imdb",
        "question": "“胡军”主演电影的数量是多少？",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"胡军\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk>  ) FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"胡军\";"
    },
    {
        "db_id": "products_for_hire",
        "question": "有多少产品的预定数量从没超过200？",
        "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )",
        "mask_query": "SELECT count(*) FROM Products_for_hire WHERE <unk> NOT IN ( SELECT <unk> FROM products_booked WHERE <unk>  >  200 )"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "每个订单ID对应多少发票？",
        "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "戏剧工作室团体的店名是什么？",
        "query": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "在2010年秋季学期，“智远楼”建筑学院提供的课程名称是什么？",
        "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  '智远楼' AND semester  =  '秋季' AND YEAR  =  2010",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN SECTION AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  '智远楼' AND <unk>  =  '秋季' AND YEAR  =  2010"
    },
    {
        "db_id": "epinions_1",
        "question": "找到所有评论的最高评级。",
        "query": "SELECT min(rank) FROM review",
        "mask_query": "SELECT min(<unk>) FROM <mask>"
    },
    {
        "db_id": "address_1",
        "question": "给出城市数量最少的国家。",
        "query": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "music_2",
        "question": "谁表演了“冰雨”这首歌？",
        "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"冰雨\"",
        "mask_query": "SELECT T2.firstname ,  T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> WHERE T3.<unk>  =  \"冰雨\""
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "显示预算类型代码和描述以及相应的文档ID。",
        "query": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "mask_query": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "FDA没有批准多少药物？",
        "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  '没有'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '没有'"
    },
    {
        "db_id": "boat_1",
        "question": "每个名字里有字母E的水手叫什么名字？",
        "query": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '%e%'"
    },
    {
        "db_id": "department_store",
        "question": "计算不同产品类型的数量。",
        "query": "SELECT count(DISTINCT product_type_code) FROM products",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM products"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "有多少客户至少有一个订单状态是“取消”？",
        "query": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"取消\"",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM customer_orders WHERE <unk>  =  \"取消\""
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "ID为1的文档的文档状态描述是什么？",
        "query": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;",
        "mask_query": "SELECT <mask>.<unk> FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = 1;"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示所有产品颜色。",
        "query": "SELECT DISTINCT product_color FROM Products",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "farm",
        "question": "给出有5000多匹马的农场的平均工作马的数量。",
        "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  >  5000"
    },
    {
        "db_id": "county_public_safety",
        "question": "白人比例最大的五个城市叫什么名字？",
        "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 5"
    },
    {
        "db_id": "film_rank",
        "question": "电影市场低估值高于10000的平均城市数量是多少？",
        "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
        "mask_query": "SELECT avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  10000"
    },
    {
        "db_id": "student_assessment",
        "question": "按字母顺序列出人的名字？",
        "query": "SELECT first_name FROM people ORDER BY first_name",
        "mask_query": "SELECT <unk> FROM people ORDER BY <unk>"
    },
    {
        "db_id": "sing_contest",
        "question": "有多少场演出的舞台表演得分低于7分或高于9分？",
        "query": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  <  7 OR <unk>  >  9"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "最多学生注册的学期是哪一学期？显示名称和ID。",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "显示项目ID和每个项目中的文档数量。",
        "query": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id",
        "mask_query": "SELECT project_id ,  count(*) FROM <mask> GROUP BY project_id"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出迄今为止“路一鸣”购买的不同产品的数量。",
        "query": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"路一鸣\"",
        "mask_query": "SELECT count(DISTINCT t3.<unk>) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> JOIN order_items AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"路一鸣\""
    },
    {
        "db_id": "hospital_1",
        "question": "查找既属于“外科”科又属于“精神科”科的医生的姓名。",
        "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  '外科' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  '精神科'",
        "mask_query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.<unk>  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.<unk> WHERE T3.name  =  '外科' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.<unk>  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.<unk> WHERE T3.name  =  '精神科'"
    },
    {
        "db_id": "browser_web",
        "question": "列出所有浏览器的ID、名称和市场份额。",
        "query": "SELECT id ,  name ,  market_share FROM browser",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "处理“YAGO”的“语义数据”有哪些文章？",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"语义数据\";",
        "mask_query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN <mask> AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"语义数据\";"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示份额数小于10的交易类型描述和日期。",
        "query": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  10"
    },
    {
        "db_id": "climbing",
        "question": "显示高度超过5000或突出超过1000的山名。",
        "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  5000 OR <unk>  >  1000"
    },
    {
        "db_id": "car_1",
        "question": "“科迈罗”的加速度有多大？",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "mask_query": "SELECT T1.<unk> FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'amc hornet sportabout (sw)';"
    },
    {
        "db_id": "party_host",
        "question": "在我们的记录中没有主办任何聚会的主持人的名字是什么？",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "mask_query": "SELECT <unk> FROM HOST WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "pilot_record",
        "question": "最高级别飞行员的加入的年份是什么？",
        "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "browser_web",
        "question": "哪些不同的加速器与市场占有率高于15的浏览器兼容？",
        "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM web_client_accelerator AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  >  15;"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "统计预订的总人数。",
        "query": "SELECT count(*) FROM BOOKINGS",
        "mask_query": "SELECT count(*) FROM BOOKINGS"
    },
    {
        "db_id": "art_1",
        "question": "1900年以前绘画作品的最大高度及其ID是多少？",
        "query": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
        "mask_query": "SELECT max(<unk>) ,  <unk> FROM paintings WHERE YEAR  <  1900"
    },
    {
        "db_id": "company_office",
        "question": "请显示每个行业的名称以及该行业相应的公司数量。",
        "query": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "每个服务类型的描述、代码和相应的计数是什么？",
        "query": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "imdb",
        "question": "电影“上甘岭”中演员的数量是多少？",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"上甘岭\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk>  ) FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t3.<unk>  =  \"上甘岭\";"
    },
    {
        "db_id": "voter_2",
        "question": "找到女学生的平均年龄。",
        "query": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"",
        "mask_query": "SELECT avg(<unk>) FROM STUDENT WHERE <unk>  =  \"F\""
    },
    {
        "db_id": "hr_1",
        "question": "没有部门编号的员工是什么？",
        "query": "SELECT * FROM employees WHERE department_id  =  \"空\"",
        "mask_query": "SELECT * FROM <mask> WHERE department_id  =  \"空\""
    },
    {
        "db_id": "tvshow",
        "question": "有多少电视频道使用语言为“英语”？",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"英语\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE LANGUAGE = \"英语\";"
    },
    {
        "db_id": "headphone_store",
        "question": "找出库存总量最大的耳机型号。",
        "query": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "mask_query": "SELECT t1.model FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "mountain_photos",
        "question": "不属于“长白山脉”的山脉的名称、高度和突出度是什么？",
        "query": "SELECT name ,  height ,  prominence FROM mountain WHERE range != '长白山脉'",
        "mask_query": "SELECT <unk> ,  height ,  prominence FROM <mask> WHERE range != '长白山脉'"
    },
    {
        "db_id": "voter_2",
        "question": "“女性”学生中最常见的专业是什么？",
        "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM STUDENT WHERE <unk>  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "activity_1",
        "question": "在哪栋楼里至少有十位“教授”？",
        "query": "SELECT building FROM Faculty WHERE rank  =  \"教授\" GROUP BY building HAVING count(*)  >=  10",
        "mask_query": "SELECT building FROM <mask> WHERE rank  =  \"教授\" GROUP BY building HAVING count(*)  >=  10"
    },
    {
        "db_id": "world_1",
        "question": "对于1930年以前成立的国家来说，不同官方语言的总数是多少？",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "mask_query": "SELECT count(DISTINCT T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE  <unk>  <  1930 AND T2.<unk>  =  \"T\""
    },
    {
        "db_id": "network_1",
        "question": "计算9年级或10年级的高中生人数。",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  9 OR <unk>  =  10"
    },
    {
        "db_id": "body_builder",
        "question": "列出那些不是健美运动员的人的名字和出生地。",
        "query": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",
        "mask_query": "SELECT <unk> ,  birth_place FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.birth_place FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.people_id  =  T2.people_id"
    },
    {
        "db_id": "customer_deliveries",
        "question": "找到最常用的支付方法。",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "match_season",
        "question": "显示球员在赛季中最常见的位置。",
        "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT POSITION FROM <mask> GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "周围没有其他省的省的名字",
        "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> );"
    },
    {
        "db_id": "e_learning",
        "question": "名字是“志华”的导师教的课程的名称是什么？",
        "query": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"志华\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"志华\""
    },
    {
        "db_id": "bike_1",
        "question": "最大阵风速度最高的3天的日期、平均温度和平均湿度是多少？",
        "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "voter_2",
        "question": "在“秋季”的选举周期中，有多少男（\"男性\"）学生有班级干部成员的选票？",
        "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"男\" AND T2.Election_Cycle  =  \"秋季\"",
        "mask_query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  <unk> WHERE T1.<unk>  =  \"男\" AND T2.<unk>  =  \"秋季\""
    },
    {
        "db_id": "soccer_2",
        "question": "球员平均训练多少小时？",
        "query": "SELECT avg(HS) FROM Player",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "manufacturer",
        "question": "哪个制造商的商店最多？列出其名称和开业年份。",
        "query": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "mask_query": "SELECT open_year ,  name FROM <mask> ORDER BY num_of_shops DESC LIMIT 1"
    },
    {
        "db_id": "club_1",
        "question": "“赛车”俱乐部的成员的姓氏是什么？",
        "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\"",
        "mask_query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\""
    },
    {
        "db_id": "poker_player",
        "question": "返回收入最高的玩家的财富级别。",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "来自ACL 2014使用“幸运52”问题的“句法分析”论文",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"幸运52\" AND t1.keyphrasename  =  \"句法分析\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "mask_query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN <mask> AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t6 ON t6.venueid  =  t2.venueid JOIN <mask> AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"幸运52\" AND t1.keyphrasename  =  \"句法分析\" AND t2.<unk>  =  2014 AND t6.venuename  =  \"ACL\";"
    },
    {
        "db_id": "advertising_agencies",
        "question": "所有会议的结果和目的是什么？",
        "query": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
        "mask_query": "SELECT <unk> ,  <unk> FROM meetings"
    },
    {
        "db_id": "products_for_hire",
        "question": "预订3次的产品ID是什么？",
        "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3",
        "mask_query": "SELECT <unk> FROM products_booked GROUP BY <unk> HAVING count(*)  =  3"
    },
    {
        "db_id": "art_1",
        "question": "查找按画家分组并按名称排序的绘画的平均高度和宽度",
        "query": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) ,  <unk> FROM paintings GROUP BY <unk> ORDER BY <unk>"
    },
    {
        "db_id": "twitter_1",
        "question": "查找拥有不止一条推特的用户的姓名。",
        "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "formula_1",
        "question": "有多少司机在2009年没有参加比赛？",
        "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> WHERE <unk> NOT IN( SELECT <unk> FROM <mask> WHERE YEAR != 2009 )"
    },
    {
        "db_id": "chinook_1",
        "question": "所有曲目中最常见的类型是什么？",
        "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "平均产品价格小于100万的产品名称是什么？",
        "query": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
        "mask_query": "SELECT <unk> FROM PRODUCTS GROUP BY <unk> HAVING avg(<unk>)  <  1000000"
    },
    {
        "db_id": "car_1",
        "question": "对于有4个汽缸的汽车，哪个型号的车的马力最大？",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "db_id": "election_representative",
        "question": "票数最少的代表属于哪一个党派？",
        "query": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY votes ASC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "question": "有多少艺术家没有专辑？",
        "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "mask_query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
    },
    {
        "db_id": "soccer_1",
        "question": "列出总得分高于90分、更喜欢右脚的球员的名字。",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"右\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk>  >  90 AND T2.<unk>  =  \"右\""
    },
    {
        "db_id": "music_4",
        "question": "音乐节最常见的结果是什么？",
        "query": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT RESULT FROM <mask> GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "“安圭拉”所在的大陆名称是什么？",
        "query": "SELECT Continent FROM country WHERE Name  =  \"安圭拉\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"安圭拉\""
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "找出我们拥有的员工数量。",
        "query": "SELECT count(*) FROM Employees",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "yelp",
        "question": "“成都”“逃生游戏”的数量是多少？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"成都\" AND t2.category_name  =  \"逃生游戏\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"成都\" AND t2.<unk>  =  \"逃生游戏\";"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示订单量最多的客户的名字。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "每个文件的ID和名称是什么？",
        "query": "SELECT document_id ,  document_name FROM Documents",
        "mask_query": "SELECT document_id ,  document_name FROM <mask>"
    },
    {
        "db_id": "pilot_1",
        "question": "最老的飞行员叫什么名字？",
        "query": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "每个模板的ID、版本号和类型代码是什么？",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "mask_query": "SELECT template_id ,  version_number ,  template_type_code FROM <mask>"
    },
    {
        "db_id": "club_1",
        "question": "找到俱乐部“北大创业俱乐部”成员的平均年龄。",
        "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"北大创业俱乐部\"",
        "mask_query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"北大创业俱乐部\""
    },
    {
        "db_id": "bike_1",
        "question": "所有路线起点的平均纬度和经度是多少？",
        "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "mask_query": "SELECT avg(T1.<unk>) ,  avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "名为“茴香”的产品的类别和通常的购买价格是多少？",
        "query": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"茴香\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM products WHERE <unk>  =  \"茴香\""
    },
    {
        "db_id": "car_1",
        "question": "有多少汽车的马力大于150？",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "mask_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "db_id": "wine_1",
        "question": "找出所有在“西北部”地区有葡萄产地的葡萄酒的名称。",
        "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"西北部\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"西北部\""
    },
    {
        "db_id": "hospital_1",
        "question": "找到最近一次住在111房间的病人。",
        "query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "mask_query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "计算买家搜索的次数。",
        "query": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  1;"
    },
    {
        "db_id": "college_2",
        "question": "计算“物理”系的课程数。",
        "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  '屋里'",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> WHERE <unk>  =  '屋里'"
    },
    {
        "db_id": "tv_shows",
        "question": "电视节目的名称和最初播出日期是什么？",
        "query": "SELECT tv_show_name ,  Original_Airdate FROM tv_show",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "entrepreneur",
        "question": "投资最多企业家的投资者是谁？",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "swimming",
        "question": "列出有一个以上游泳运动员的国家。",
        "query": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1",
        "mask_query": "SELECT nationality ,  count(*) FROM <mask> GROUP BY nationality HAVING count(*)  >  1"
    },
    {
        "db_id": "wta_1",
        "question": "来自“中国”的选手的名字和出生日期是什么？",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  '中国'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  '中国'"
    },
    {
        "db_id": "car_1",
        "question": "有多少国家拥有超过2家汽车制造商？",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "mask_query": "SELECT COUNT(*) FROM ( SELECT T1.<unk> ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  2 );"
    },
    {
        "db_id": "csu_1",
        "question": "\"厦门大学\"有多少人毕业于2004年？",
        "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"厦门大学\"",
        "mask_query": "SELECT sum(t1.graduate) FROM <mask> AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"厦门大学\""
    },
    {
        "db_id": "county_public_safety",
        "question": "在黑人比例高于10的城市，西班牙裔的比例是多少？",
        "query": "SELECT Hispanic FROM city WHERE Black  >  10",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  10"
    },
    {
        "db_id": "customer_deliveries",
        "question": "查找居住在“浙江”州的客户的姓名和电话号码。",
        "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  '浙江'",
        "mask_query": "SELECT t1.<unk> ,  t1.<unk> FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.<unk>  =  t2.<unk> JOIN addresses AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  '浙江'"
    },
    {
        "db_id": "geo",
        "question": "中国的主要湖泊是什么？",
        "query": "SELECT lake_name FROM lake WHERE area  >  750;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  750;"
    },
    {
        "db_id": "scholar",
        "question": "ACL 2015中有多少论文？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.venueid  =  t1.venueid WHERE t1.<unk>  =  2015 AND t2.venuename  =  \"ACL\";"
    },
    {
        "db_id": "aan_1",
        "question": "计算ID为D12-1027的论文的引用数。",
        "query": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"D12-1027\""
    },
    {
        "db_id": "wta_1",
        "question": "找出每个球员的总排名得分和他们的名字。",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "mask_query": "SELECT sum(<unk>) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "csu_1",
        "question": "哪所大学在“上海”市且在1950年以后开办？",
        "query": "SELECT campus FROM campuses WHERE county  =  \"上海\" AND YEAR  >  1950",
        "mask_query": "SELECT campus FROM campuses WHERE county  =  \"上海\" AND YEAR  >  1950"
    },
    {
        "db_id": "tracking_orders",
        "question": "货物的追踪号码是3452的订单是在那一天发出的？",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "mask_query": "SELECT T1.<unk> FROM orders AS T1 JOIN shipments AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = 3452"
    },
    {
        "db_id": "e_commerce",
        "question": "列出发票的状态、日期和装运日期。",
        "query": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "告诉我所有旅馆的价格范围。",
        "query": "SELECT price_range FROM HOTELS",
        "mask_query": "SELECT <unk> FROM HOTELS"
    },
    {
        "db_id": "geo",
        "question": "什么河流流经人口最多的省？",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) ) );"
    },
    {
        "db_id": "county_public_safety",
        "question": "按警官数目升序排列的每个省的犯罪率是多少？",
        "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "journal_committee",
        "question": "对于每个期刊委员会，找出编辑名称和期刊主题。",
        "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "world_1",
        "question": "对于平均预期寿命小于72的大洲，不同的大洲以及相应的人口总数和平均预期寿命是什么？",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "mask_query": "SELECT sum(<unk>) ,  avg(<unk>) ,  <unk> FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  <  72"
    },
    {
        "db_id": "tv_shows",
        "question": "显示城市频道所属的不同单位以及每个单位的城市频道数。",
        "query": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "workshop_paper",
        "question": "统计提交的数量。",
        "query": "SELECT count(*) FROM submission",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "geo",
        "question": "你能告诉我“四川”的最高点是什么吗？",
        "query": "SELECT highest_point FROM highlow WHERE state_name  =  \"四川\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\";"
    },
    {
        "db_id": "country_language",
        "question": "按教育分数降序排列的国家是什么？",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "race_track",
        "question": "显示有1个比赛的赛道的名称和位置。",
        "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "mask_query": "SELECT T2.name ,  T2.location FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"
    },
    {
        "db_id": "store_1",
        "question": "名字为“强\"的艺术家发行的专辑的名称是什么？",
        "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '强'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> LIKE '强'"
    },
    {
        "db_id": "election",
        "question": "“拨款”委员会的代表属于哪个县？给我县的名字。",
        "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"拨款\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.County_id  =  T2.<unk> WHERE T2.<unk>  =  \"拨款\""
    },
    {
        "db_id": "sports_competition",
        "question": "所有没有球员的俱乐部的名字是什么？",
        "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "mask_query": "SELECT <unk> FROM CLub WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "driving_school",
        "question": "被归类为“优秀顾客”状态的客户的生日是什么时候？",
        "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  \"优秀顾客\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"优秀顾客\""
    },
    {
        "db_id": "bike_1",
        "question": "对于每个车站，找到它的纬度和在这个车站结束的路线的最小持续时间。",
        "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  min(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "aircraft",
        "question": "与总旅客数超过10万人的机场有关的飞机的名称和描述是什么？",
        "query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  >  10000000"
    },
    {
        "db_id": "customer_complaints",
        "question": "每种类别产品的平均价格是多少？",
        "query": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM products GROUP BY <unk>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "有2个或更多段落的文档的ID是什么？",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "mask_query": "SELECT document_id FROM <mask> GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "geo",
        "question": "“四川”最长的河流有多长？",
        "query": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"四川\" ) AND traverse  =  \"四川\";",
        "mask_query": "SELECT LENGTH FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> WHERE <unk>  =  \"四川\" ) AND <unk>  =  \"四川\";"
    },
    {
        "db_id": "e_learning",
        "question": "超出有学生参加的不同课程的数量。",
        "query": "SELECT count(course_id) FROM Student_Course_Enrolment",
        "mask_query": "SELECT count(<unk>) FROM <mask>"
    },
    {
        "db_id": "address_1",
        "question": "城市巴尔和其他所有城市之间的总距离是多少？",
        "query": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  \"BAL\""
    },
    {
        "db_id": "ship_1",
        "question": "以标志为单位，返回每种标志的船舶数量。",
        "query": "SELECT count(*) ,  flag FROM ship GROUP BY flag",
        "mask_query": "SELECT count(*) ,  flag FROM ship GROUP BY flag"
    },
    {
        "db_id": "real_estate_properties",
        "question": "“春秋航空公司”的特征类型名称是什么？",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"春秋航空公司\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"春秋航空公司\""
    },
    {
        "db_id": "planet_1",
        "question": "王爱美拥有什么职位？",
        "query": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
        "mask_query": "SELECT POSITION FROM <mask> WHERE <unk>  =  \"Amy Wong\";"
    },
    {
        "db_id": "student_assessment",
        "question": "找出学生地址的不同城市？",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.<unk> = T2.<unk> JOIN students AS T3 ON T2.<unk> = T3.<unk>"
    },
    {
        "db_id": "e_learning",
        "question": "所有科目的名字是什么？",
        "query": "SELECT subject_name FROM SUBJECTS",
        "mask_query": "SELECT <unk> FROM SUBJECTS"
    },
    {
        "db_id": "art_1",
        "question": "1885年之前或1930年之后有绘画作品在那些地方被创作？",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
        "mask_query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930"
    },
    {
        "db_id": "soccer_3",
        "question": "制造商不是耐克的俱乐部叫什么名字？",
        "query": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"Nike\""
    },
    {
        "db_id": "allergy_1",
        "question": "有多少学生超过18岁，对“食物”类型或“动物”类型不过敏？",
        "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"食物\" OR T2.allergytype  =  \"动物\")",
        "mask_query": "SELECT count(*) FROM <mask> WHERE age  >  18 AND <unk> NOT IN ( SELECT <unk> FROM Has_allergy AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.allergytype  =  \"食物\" OR T2.allergytype  =  \"动物\")"
    },
    {
        "db_id": "sakila_1",
        "question": "最早付款的日期是什么？",
        "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议中被引用最多的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" ORDER BY t2.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "college_2",
        "question": "找到课程数量最多的年度和学期。",
        "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  YEAR FROM SECTION GROUP BY <unk> ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“细胞”杂志在2015发表了多少文章？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"细胞\" AND t3.year  =  2015;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"细胞\" AND t3.<unk>  =  2015;"
    },
    {
        "db_id": "small_bank_1",
        "question": "有账户的客户的名字是什么，每个账户的储蓄余额是多少？",
        "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "mask_query": "SELECT sum(T2.<unk>) ,  T1.<unk> FROM accounts AS T1 JOIN savings AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "car_racing",
        "question": "查找司机的总数。",
        "query": "SELECT count(*) FROM driver",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "museum_visit",
        "question": "名称是“国家艺术馆”的博物馆的开馆年和员工人数是多少？",
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  '国家艺术馆'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE name  =  '国家艺术馆'"
    },
    {
        "db_id": "world_1",
        "question": "“温州市”的所在地是哪个地区？",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"温州市\"",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"温州市\""
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示没有任何客户的所有代理ID。",
        "query": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "riding_club",
        "question": "显示运动员姓名和教练员姓名。",
        "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.coach_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "headphone_store",
        "question": "数一数不同的耳塞数量。",
        "query": "SELECT count(DISTINCT earpads) FROM headphone",
        "mask_query": "SELECT count(DISTINCT earpads) FROM <mask>"
    },
    {
        "db_id": "pilot_1",
        "question": "年龄最小的飞行员驾驶的飞机在哪里？",
        "query": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
        "mask_query": "SELECT T2.<unk> FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  (SELECT min(<unk>) FROM pilotskills)"
    },
    {
        "db_id": "geo",
        "question": "人口最多的省有多少条河流",
        "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "mask_query": "SELECT COUNT ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "loan_1",
        "question": "查找贷款数额为0的客户的状态、帐户类型和信用评分。",
        "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  0"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "名为“最佳”的集合的描述是什么？",
        "query": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"Best\";"
    },
    {
        "db_id": "railway",
        "question": "展示铁路最常见的建设者。",
        "query": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "持有两张或更多张卡的客户的ID和全名是什么？",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  T2.<unk> FROM Customers_cards AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "flight_4",
        "question": "查出海拔在-50到50之间的机场名称。",
        "query": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> BETWEEN -50 AND 50"
    },
    {
        "db_id": "pets_1",
        "question": "找出有狗但没有猫的学生的名字和年龄。",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '狗' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫')",
        "mask_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '狗' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫')"
    },
    {
        "db_id": "loan_1",
        "question": "查找提供过贷款的银行支行的名称。",
        "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id"
    },
    {
        "db_id": "company_1",
        "question": "按开始日期列出所有的部门名称。",
        "query": "SELECT dname FROM department ORDER BY mgr_start_date",
        "mask_query": "SELECT dname FROM <mask> ORDER BY mgr_start_date"
    },
    {
        "db_id": "boat_1",
        "question": "查找ID大于50的每艘船的预订数量。",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> HAVING <unk>  >  50"
    },
    {
        "db_id": "store_1",
        "question": "列出美国发票最多的州。",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"美国\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> WHERE <unk>  =  \"美国\" GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "db_id": "conference",
        "question": "所有比平均年龄大的职员的名字是什么？",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE age  >  (SELECT avg(age) FROM <mask>)"
    },
    {
        "db_id": "imdb",
        "question": "找出“甄子丹”和“张晋”是主要角色的所有电影",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"张晋\" AND t2.name  =  \"甄子丹\";",
        "mask_query": "SELECT t4.<unk> FROM CAST AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN CAST AS t3 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"张晋\" AND t2.<unk>  =  \"甄子丹\";"
    },
    {
        "db_id": "college_3",
        "question": "姓\"帅\"的学生平均成绩是多少？",
        "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"帅\"",
        "mask_query": "SELECT avg(T2.<unk>) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.<unk>  =  T2.<unk> AND T1.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"帅\""
    },
    {
        "db_id": "car_racing",
        "question": "显示来自首都是“都柏林”的国家的司机的最高积分",
        "query": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "mask_query": "SELECT max(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Country_ID  =  T2.<unk> WHERE T1.<unk>  =  \"Dublin\""
    },
    {
        "db_id": "party_people",
        "question": "不负责任何项目的成员的姓名是什么？",
        "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
        "mask_query": "SELECT member_name FROM <mask> EXCEPT SELECT T1.member_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.member_id  =  T2.member_in_charge_id"
    },
    {
        "db_id": "hr_1",
        "question": "姓“何”的员工的姓氏和部门号码是什么？",
        "query": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  '何'",
        "mask_query": "SELECT first_name ,  department_id FROM <mask> WHERE last_name  =  '何'"
    },
    {
        "db_id": "customers_and_orders",
        "question": "显示客户杰若米的所有订单的订单ID、订单日期和订单状态代码。",
        "query": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM Customer_orders AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Jeromy\""
    },
    {
        "db_id": "soccer_2",
        "question": "找出在选拔赛中获得“确定”的“前锋”位置的学生的名字。",
        "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  '确定' AND T2.pPos  =  '前锋'",
        "mask_query": "SELECT T1.<unk> FROM player AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '确定' AND T2.<unk>  =  '前锋'"
    },
    {
        "db_id": "insurance_policies",
        "question": "哪种索赔导致最多数量的结算？列出索赔ID、索赔日期和结算数量。",
        "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_2",
        "question": "列出未出版的书名。",
        "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "performance_attendance",
        "question": "显示不同的地点和在每个地点表演的数量。",
        "query": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION",
        "mask_query": "SELECT LOCATION ,  COUNT(*) FROM <mask> GROUP BY LOCATION"
    },
    {
        "db_id": "phone_1",
        "question": "查找具有完全认证类型的电话和具有临时认证类型的电话所使用的屏幕模式的像素。",
        "query": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  '临时' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  '全权'",
        "mask_query": "SELECT t1.pixels FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<mask> WHERE t2.<unk>  =  '临时' INTERSECT SELECT t1.pixels FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<mask> WHERE t2.<unk>  =  '全权'"
    },
    {
        "db_id": "cinema",
        "question": "显示每个影院的名称、开张年份和容量。",
        "query": "SELECT name ,  openning_year ,  capacity FROM cinema",
        "mask_query": "SELECT name ,  openning_year ,  capacity FROM <mask>"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "返回位于“嘉兴”市的戏剧工作组的名称。",
        "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"嘉兴\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"嘉兴\""
    },
    {
        "db_id": "art_1",
        "question": "给出名字叫玛丽的艺术家创作的绘画作品的名字和年代。",
        "query": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
        "mask_query": "SELECT T2.<unk> ,   T2.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"Mary\""
    },
    {
        "db_id": "e_commerce",
        "question": "已经装运的产品的名称是什么，是哪些天装运的？",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "mask_query": "SELECT T1.<unk> ,  T4.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk>"
    },
    {
        "db_id": "formula_1",
        "question": "最近发生的比赛的名称和日期是什么？",
        "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "activity_1",
        "question": "找出参加“独木舟”和“皮划艇”运动的学生的ID。",
        "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  \"独木舟\" INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  \"皮划艇\"",
        "mask_query": "SELECT T1.<unk> FROM participates_in AS T1 JOIN activity AS T2 ON T2.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"独木舟\" INTERSECT SELECT T1.<unk> FROM participates_in AS T1 JOIN activity AS T2 ON T2.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"皮划艇\""
    },
    {
        "db_id": "insurance_fnol",
        "question": "哪个客户使用最多的保险单？给我客户的名字。",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "列出包含文档的所有流程ID。",
        "query": "SELECT DISTINCT process_id FROM Documents_processes",
        "mask_query": "SELECT DISTINCT <unk> FROM Documents_processes"
    },
    {
        "db_id": "gas_company",
        "question": "按照这些公司的销售额和利润，找出它们在银行业公司中的排名、公司名称、市场价值。",
        "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  '银行业' ORDER BY sales_billion ,  profits_billion",
        "mask_query": "SELECT rank ,  <mask> ,  market_value FROM <mask> WHERE main_industry  =  '银行业' ORDER BY sales_billion ,  profits_billion"
    },
    {
        "db_id": "insurance_policies",
        "question": "计算处理的付款总额。",
        "query": "SELECT sum(Amount_Payment) FROM Payments",
        "mask_query": "SELECT sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "election_representative",
        "question": "以降序列出选举的选票。",
        "query": "SELECT Votes FROM election ORDER BY Votes DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "显示卡片类型的数量。",
        "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "imdb",
        "question": "找出1980岁后出生在“广州”的“女”演员",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"广州\" AND birth_year  >  1980 AND gender  =  \"女\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"广州\" AND <unk>  >  1980 AND <unk>  =  \"女\";"
    },
    {
        "db_id": "wrestler",
        "question": "摔跤运动员的名字和淘汰赛影片是什么？",
        "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM elimination AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "aan_1",
        "question": "谁和凯萨琳麦基翁合著的论文最多？",
        "query": "SELECT T4.name FROM Author_list AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id AND T1.author_id != T2.author_id JOIN Author AS T3 ON T1.author_id  =  T3.author_id JOIN Author AS T4 ON T2.author_id  =  T4.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T4.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> AND T1.<unk> != T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T2.<unk>  =  T4.<unk> WHERE T3.<unk> LIKE \"%Mckeown ,  Kathleen%\" GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "ship_1",
        "question": "等级是“少尉”或“中卫”的船长名字是什么？",
        "query": "SELECT name FROM captain WHERE rank  =  \"少尉\" OR rank  =  \"中尉\"",
        "mask_query": "SELECT name FROM <mask> WHERE rank  =  \"少尉\" OR rank  =  \"中尉\""
    },
    {
        "db_id": "tvshow",
        "question": "找到高清晰度电视频道的套餐选择和系列节目名称。",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"确定\"",
        "mask_query": "SELECT package_option ,  <unk> FROM <mask> WHERE hight_definition_TV  =  \"确定\""
    },
    {
        "db_id": "bike_1",
        "question": "统计不是结束在“厦门”市的旅行的次数。",
        "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"厦门\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> !=  \"厦门\""
    },
    {
        "db_id": "tvshow",
        "question": "电视剧的最小和最大份额是多少？",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "mask_query": "SELECT max(SHARE) , min(SHARE) FROM <mask>;"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示至少2个帐户的所有客户的名字和ID。",
        "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "有多少文件有费用？",
        "query": "SELECT count(*) FROM Documents_with_expenses",
        "mask_query": "SELECT count(*) FROM Documents_with_expenses"
    },
    {
        "db_id": "geo",
        "question": "与“四川”省接壤的省有多少个主要城市",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"四川\" );",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  >  150000 AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" );"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "显示参与去的最多项目结果的项目人员的角色描述和项目人员的ID。",
        "query": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Project_outcomes AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "演员“王凯”的国籍是什么？",
        "query": "SELECT nationality FROM actor WHERE name  =  \"王凯\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"王凯\";"
    },
    {
        "db_id": "game_1",
        "question": "显示所有学生ID与运动的数量和游戏的总数",
        "query": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "mask_query": "SELECT <unk> ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY <unk>"
    },
    {
        "db_id": "imdb",
        "question": "与“核武器”有关的电影是什么？",
        "query": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"核武器\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<mask>  =  \"核武器\";"
    },
    {
        "db_id": "orchestra",
        "question": "列出被最多数量的管弦乐队共享的唱片公司。",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "train_station",
        "question": "“广州”或“深圳”火车站的平均和最大旅客人数是多少？",
        "query": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  \"广州\" OR LOCATION  =  \"深圳\"",
        "mask_query": "SELECT avg(total_passengers) ,  max(total_passengers) FROM <mask> WHERE LOCATION  =  \"广州\" OR LOCATION  =  \"深圳\""
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "角色代码是“经理”的名称和描述是什么？",
        "query": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"经理\"",
        "mask_query": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"经理\""
    },
    {
        "db_id": "address_1",
        "question": "距离最大的城市的城市代码是什么？",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "department_store",
        "question": "返回最新指派的工作人员的姓名和职称。",
        "query": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "引用超过10篇的论文",
        "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;",
        "mask_query": "SELECT DISTINCT t2.citingpaperid FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;"
    },
    {
        "db_id": "club_1",
        "question": "对“网球俱乐部”的描述是什么？",
        "query": "SELECT clubdesc FROM club WHERE clubname  =  \"网球俱乐部\"",
        "mask_query": "SELECT clubdesc FROM club WHERE clubname  =  \"网球俱乐部\""
    },
    {
        "db_id": "inn_1",
        "question": "最低底价的房间名称和底价是多少？",
        "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1;"
    },
    {
        "db_id": "club_1",
        "question": "所有俱乐部的名字是什么？",
        "query": "SELECT clubname FROM club",
        "mask_query": "SELECT clubname FROM club"
    },
    {
        "db_id": "flight_4",
        "question": "“中国”每座城市由最多到最少有多少个机场？",
        "query": "SELECT count(*) ,  city FROM airports WHERE country  =  \"中国\" GROUP BY city ORDER BY count(*) DESC",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> WHERE <unk>  =  \"中国\" GROUP BY <unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "party_host",
        "question": "列出已“春季”或“科技”为主题的聚会第一年和最后一年。",
        "query": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"春季\" OR Party_Theme  =  \"科技\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"春季\" OR <unk>  =  \"科技\""
    },
    {
        "db_id": "world_1",
        "question": "“英语”或“荷兰语”是官方语言的国家是什么？",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"英语\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"荷兰语\" AND IsOfficial  =  \"T\"",
        "mask_query": "SELECT * FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英语\" AND <unk>  =  \"T\" UNION SELECT * FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"荷兰语\" AND <unk>  =  \"T\""
    },
    {
        "db_id": "device",
        "question": "设备的不同软件平台是什么，每个平台对应的设备有多少个？",
        "query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "company_1",
        "question": "找到每种性别工资低于50000的员工的人数。",
        "query": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex",
        "mask_query": "SELECT count(*) ,  sex FROM <mask> WHERE salary  <  50000 GROUP BY sex"
    },
    {
        "db_id": "planet_1",
        "question": "列出王里奥收到的所有包裹。",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\";",
        "mask_query": "SELECT T1.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> = \"Leo Wong\";"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "哪个老师教有子串“data”的班级，而没有教过有前缀“net”的班级？把老师的详细情况告诉我。",
        "query": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE '%data%' EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE 'net%'"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示所有员工角色代码和每个角色的文档流程数。",
        "query": "SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM Staff_in_processes GROUP BY <unk>"
    },
    {
        "db_id": "college_1",
        "question": "每门课有多少节？",
        "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
        "mask_query": "SELECT count(*) ,  crs_code FROM <mask> GROUP BY crs_code"
    },
    {
        "db_id": "manufactory_1",
        "question": "收益低于“奥斯汀”最低收益的制造商的公司有哪些名字？",
        "query": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  '郑州')",
        "mask_query": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  '郑州')"
    },
    {
        "db_id": "book_2",
        "question": "请显示最常见的出版日期。",
        "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "swimming",
        "question": "找出有结果是“胜利”的游泳运动员的名字。",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  '胜利'",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  '胜利'"
    },
    {
        "db_id": "music_1",
        "question": "分辨率高于任何评级低于8的歌曲的分辨率的歌曲的id是什么？",
        "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT max(<unk>) FROM <mask> WHERE <unk>  <  8)"
    },
    {
        "db_id": "headphone_store",
        "question": "每种耳机结构的平均价格是多少？",
        "query": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
        "mask_query": "SELECT construction ,  avg(price) FROM <mask> GROUP BY construction"
    },
    {
        "db_id": "driving_school",
        "question": "1000到3000美元之间的所有客户的名字和姓氏是什么？",
        "query": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> BETWEEN 1000 AND 3000;"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "所有学生住址的第一行和每月平均租金是多少？",
        "query": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id",
        "mask_query": "SELECT T1.<unk> ,  avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "department_management",
        "question": "列出“财政部”部门秘书和“国土安全部”秘书出生的州。",
        "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  '财政部' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  '国土安全部'",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id JOIN <mask> AS T3 ON T2.head_id  =  T3.head_id WHERE T1.<unk>  =  '财政部' INTERSECT SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id JOIN <mask> AS T3 ON T2.head_id  =  T3.head_id WHERE T1.<unk>  =  '国土安全部'"
    },
    {
        "db_id": "yelp",
        "question": "列出所有由“王岩”评论的餐厅",
        "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"王岩\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t3.<unk>  =  \"王岩\";"
    },
    {
        "db_id": "insurance_policies",
        "question": "给出有两个或更多的政策，但没有提出任何索赔的客户详细资料和ID。",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
        "mask_query": "SELECT T1.customer_details ,  T1.customer_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Customer_id  =  T2.customer_id JOIN <mask> AS T3 ON T2.policy_id  =  T3.policy_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "段落数量最多的文档的ID和名称是什么？",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.document_id ,  T2.document_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "查找提供产品名为“电影”服务的工作组的名称。",
        "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"电影\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"电影\""
    },
    {
        "db_id": "products_for_hire",
        "question": "预定数量为102.76的产品的描述是什么。",
        "query": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "mask_query": "SELECT T2.<unk> FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  102.76"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找出没有被拘留过的教师的姓氏。",
        "query": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "singer",
        "question": "歌手的出生年份和国籍是什么？",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "给出具有费用的文档中最常见的预算类型代码。",
        "query": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "按升序排列的每首“英文”歌曲的艺术家的id、风格和名字是什么？",
        "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"英文\" ORDER BY rating",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =   \"英文\" ORDER BY <unk>"
    },
    {
        "db_id": "scholar",
        "question": "2011年以后的“蒙特卡罗模拟”的论文",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"蒙特卡罗模拟\" AND t3.year  >  2011;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"蒙特卡罗模拟\" AND t3.<unk>  >  2011;"
    },
    {
        "db_id": "aircraft",
        "question": "与“歼-10”飞机有关的机场的平均旅客总数是多少？",
        "query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"歼-10\"",
        "mask_query": "SELECT avg(T3.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  \"歼-10\""
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "产物不是“淀粉酶”的酶的名称是什么？",
        "query": "SELECT name FROM enzyme WHERE product != '淀粉酶'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE product != '淀粉酶'"
    },
    {
        "db_id": "wine_1",
        "question": "每一歌葡萄产地葡萄酒的平均价格和得分是多少？",
        "query": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) ,  <unk> FROM WINE GROUP BY <unk>"
    },
    {
        "db_id": "scientist_1",
        "question": "找出需要300小时以上的项目的科学家人数。",
        "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",
        "mask_query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name"
    },
    {
        "db_id": "phone_market",
        "question": "显示手机使用频率最高的运营商。",
        "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "question": "商店1在哪里？",
        "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "mask_query": "SELECT T2.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  1"
    },
    {
        "db_id": "company_office",
        "question": "显示超过两家公司所共享的总部地点。",
        "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "flight_1",
        "question": "拥有证书的不同雇员的总数是多少？",
        "query": "SELECT count(DISTINCT eid) FROM Certificate",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Certificate"
    },
    {
        "db_id": "imdb",
        "question": "找出电影“上甘岭”中的所有“女”演员",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"女\" AND t3.title  =  \"上甘岭\";",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"女\" AND t3.<unk>  =  \"上甘岭\";"
    },
    {
        "db_id": "aircraft",
        "question": "与“北京首都机场”机场和“北京南苑”机场有关的所有飞机的名称是什么？",
        "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"北京首都机场\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"北京南苑\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"北京首都机场\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"北京南苑\""
    },
    {
        "db_id": "journal_committee",
        "question": "编辑的姓名和年龄是多少？",
        "query": "SELECT Name ,  Age FROM editor",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "student_1",
        "question": "显示每个教室的教室编号和使用它的年级数。",
        "query": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "mask_query": "SELECT classroom ,  count(DISTINCT grade) FROM <mask> GROUP BY classroom"
    },
    {
        "db_id": "bakery_1",
        "question": "请给出购买了苹果味馅饼的顾客的名字和姓氏。",
        "query": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
        "mask_query": "SELECT DISTINCT T4.<unk> ,  T4.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.item JOIN <mask> AS T3 ON T2.receipt  =  T3.<unk> JOIN <mask> AS T4 ON T3.<unk>  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\""
    },
    {
        "db_id": "loan_1",
        "question": "找出向信用评分小于100的客户提供最大贷款总额的银行支行的名称。",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id JOIN <mask> AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.<unk>  <  100 GROUP BY T2.<unk> ORDER BY sum(T1.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "question": "每个状态代码对应有多少张发票？",
        "query": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "election",
        "question": "总共有多少个县？",
        "query": "SELECT count(*) FROM county",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "vehicle_driver",
        "question": "功率在6000以上的最高速度的车型是什么？",
        "query": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
        "mask_query": "SELECT model FROM <mask> WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "引用发表在NIPS论文的关于“欧几里德距离”的论文",
        "query": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"欧几里德距离\" AND t4.venuename  =  \"NIPS\";",
        "mask_query": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t5 ON t2.paperid  =  t5.citingpaperid JOIN <mask> AS t3 ON t3.paperid  =  t5.citedpaperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"欧几里德距离\" AND t4.venuename  =  \"NIPS\";"
    },
    {
        "db_id": "game_1",
        "question": "每周参加所有运动项目上超过10个小时的学生的ID是什么？",
        "query": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10",
        "mask_query": "SELECT <unk> FROM Sportsinfo GROUP BY <unk> HAVING sum(hoursperweek)  >  10"
    },
    {
        "db_id": "singer",
        "question": "最富裕的歌手叫什么名字？",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "voter_2",
        "question": "报告所有少于3名学生的专业。",
        "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
        "mask_query": "SELECT <unk> FROM STUDENT GROUP BY <unk> HAVING COUNT(*)  <  3"
    },
    {
        "db_id": "art_1",
        "question": "1885年之前和1930年之后有作品的地方是什么？",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "mask_query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "wrestler",
        "question": "摔跤运动员的名字是什么？",
        "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "course_teach",
        "question": "教至少两门课程的老师的名字是什么？",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "geo",
        "question": "什么河流流经人口数最多的省",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "wta_1",
        "question": "找出球员总数。",
        "query": "SELECT count(*) FROM players",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "activity_1",
        "question": "列出我们所有的活动。",
        "query": "SELECT activity_name FROM Activity",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "chinook_1",
        "question": "找到毫秒下歌曲的最大和最小持续时间。",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM TRACK"
    },
    {
        "db_id": "swimming",
        "question": "最近的一年发生的事件的名称是什么？",
        "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY YEAR DESC LIMIT 1"
    },
    {
        "db_id": "party_people",
        "question": "按照上任时间的先后顺序显示所有部长和党派。",
        "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC",
        "mask_query": "SELECT minister ,  party_name FROM <mask> ORDER BY took_office DESC"
    },
    {
        "db_id": "geo",
        "question": "中国的城市有多少",
        "query": "SELECT COUNT ( city_name ) FROM city;",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask>;"
    },
    {
        "db_id": "game_1",
        "question": "所有踢“足球”或“曲棍球”的学生的名字和姓氏是什么？",
        "query": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"足球\" OR T1.SportName  =  \"曲棍球\"",
        "mask_query": "SELECT T2.lname ,  T2.fname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"足球\" OR T1.<unk>  =  \"曲棍球\""
    },
    {
        "db_id": "real_estate_rentals",
        "question": "有花园的房产的平均房间数是多少？",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "mask_query": "SELECT avg(T3.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  'garden';"
    },
    {
        "db_id": "network_2",
        "question": "谁有比平均年龄大的朋友？给出他们的朋友和他们的年龄",
        "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "mask_query": "SELECT DISTINCT T2.<unk> ,  T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  (SELECT avg(<unk>) FROM person)"
    },
    {
        "db_id": "e_government",
        "question": "找出最年轻的组织的名字。",
        "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM organizations ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "question": "价格高于平均水平的产品的产品价格和产品尺寸是多少？",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  ( SELECT avg(<unk>) FROM <mask> )"
    },
    {
        "db_id": "store_1",
        "question": "平均发票大小前10的国家的列表。列出国家名称和平均发票大小。",
        "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
        "mask_query": "SELECT <unk> ,  AVG(<unk>) FROM <mask> GROUP BY <unk> ORDER BY AVG(<unk>) DESC LIMIT 10;"
    },
    {
        "db_id": "address_1",
        "question": "每个国家有多少学生？",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "flight_1",
        "question": "显示所有没有“波音 733-800”证书的员工的姓名。",
        "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"波音\"",
        "mask_query": "SELECT <unk> FROM Employee EXCEPT SELECT T1.<unk> FROM Employee AS T1 JOIN Certificate AS T2 ON T1.<unk>  =  T2.<unk> JOIN Aircraft AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"波音\""
    },
    {
        "db_id": "headphone_store",
        "question": "找到伍德曼商店里存放的耳机的总量。",
        "query": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
        "mask_query": "SELECT sum(t2.quantity) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'"
    },
    {
        "db_id": "student_1",
        "question": "找出名字为“王”“小帅”的学生的老师的数量。",
        "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"王\" AND T1.lastname  =  \"小帅\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"王\" AND T1.lastname  =  \"小帅\""
    },
    {
        "db_id": "club_1",
        "question": "“赛车”俱乐部主席的名字和姓氏是什么？",
        "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t2.position  =  \"主席\"",
        "mask_query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t2.position  =  \"主席\""
    },
    {
        "db_id": "tracking_software_problems",
        "question": "找出“1978-06-26”后所报告问题的ID。",
        "query": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "mask_query": "SELECT <unk> FROM problems WHERE <unk> > \"1978-06-26\""
    },
    {
        "db_id": "climbing",
        "question": "最高的山叫什么名字？",
        "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "insurance_policies",
        "question": "计算所有结算的总结算量。",
        "query": "SELECT sum(Amount_Settled) FROM Settlements",
        "mask_query": "SELECT sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "party_host",
        "question": "展示拥有45岁以上和35岁以下的主持人的国家。",
        "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "mask_query": "SELECT <unk> FROM HOST WHERE <unk>  >  45 INTERSECT SELECT <unk> FROM HOST WHERE <unk>  <  35"
    },
    {
        "db_id": "department_store",
        "question": "给出购买金额最大的三种产品的ID。",
        "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM product_suppliers ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "flight_4",
        "question": "哪些国家拥有最多的航空公司？",
        "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "twitter_1",
        "question": "查找发布了的推文的用户的数量。",
        "query": "SELECT count(DISTINCT UID) FROM tweets",
        "mask_query": "SELECT count(DISTINCT UID) FROM <mask>"
    },
    {
        "db_id": "school_player",
        "question": "找到每个球员的队伍并按字母顺序排列它们。",
        "query": "SELECT Team FROM player ORDER BY Team ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "在“2018～03-17 07:13:53”之前购买的产品的总量是多少？",
        "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018～03-17 07:13:53\"",
        "mask_query": "SELECT sum(t2.<unk>) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  <  \"2018～03-17 07:13:53\""
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”的在“VLDB”会议上的所有论文。",
        "query": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"北京理工大学\";",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t2 ON t5.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"VLDB\" AND t3.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "geo",
        "question": "“浙江”附近最大的省是哪一个省",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"浙江\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"浙江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"浙江\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"浙江\" );"
    },
    {
        "db_id": "warehouse_1",
        "question": "选择超过其存储容量的仓库的代码。",
        "query": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
        "mask_query": "SELECT T2.code FROM boxes AS T1 JOIN <mask> AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity"
    },
    {
        "db_id": "movie_2",
        "question": "每个等级有多少部电影？",
        "query": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
        "mask_query": "SELECT count(*) ,  rating FROM movies GROUP BY rating"
    },
    {
        "db_id": "department_store",
        "question": "找到被指派时间最短的员工的id和姓名。",
        "query": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM staff AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY <unk> - <unk> LIMIT 1"
    },
    {
        "db_id": "station_weather",
        "question": "所有车站能提供多少种不同的服务？",
        "query": "SELECT count(DISTINCT services) FROM station",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "warehouse_1",
        "question": "选择仓库代码和每个仓库中箱子数的平均值。",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "mask_query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "geo",
        "question": "“衡山”的海拔是多少？",
        "query": "SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"衡山\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"衡山\";"
    },
    {
        "db_id": "planet_1",
        "question": "约翰·佐伊德法尔寄出的包裹里边有什么？",
        "query": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
        "mask_query": "SELECT T1.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"John Zoidfarb\";"
    },
    {
        "db_id": "climbing",
        "question": "显示登山者的名字和山的名字。",
        "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "department_store",
        "question": "返回任何职称是“部门经理”的员工的员工ID和性别。",
        "query": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"部门经理\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"部门经理\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "按公寓数量升序排序，显示公寓类型代码和对应的公寓数量。",
        "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "sakila_1",
        "question": "不同类别的名称和id是什么？每类有多少部电影？",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "restaurant_bills",
        "question": "显示同时拥有卡信用小于50的客户和卡信用大于75的客户的国籍。",
        "query": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  50 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  >  75"
    },
    {
        "db_id": "chinook_1",
        "question": "所有歌曲的不同单价是多少？",
        "query": "SELECT distinct(UnitPrice) FROM TRACK",
        "mask_query": "SELECT distinct(<unk>) FROM TRACK"
    },
    {
        "db_id": "inn_1",
        "question": "有“大床”或“双人”床的房间的名称是什么？",
        "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"大床\" OR bedType  =  \"双人\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"大床\" OR <unk>  =  \"双人\";"
    },
    {
        "db_id": "decoration_competition",
        "question": "按照会员名字升序的字母顺序，显示会员姓名和他们所去大学的位置。",
        "query": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC"
    },
    {
        "db_id": "school_player",
        "question": "显示学校的地点和昵称。",
        "query": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "university_rank",
        "question": "会计专业排名第三或以上的大学叫什么？",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
        "mask_query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\""
    },
    {
        "db_id": "customers_card_transactions",
        "question": "不同的卡类型代码有哪些？每种类型有多少不同的客户？",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "mask_query": "SELECT <unk> ,  count(DISTINCT <unk>) FROM Customers_cards GROUP BY <unk>"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "显示所有客户ID和每个客户的帐号。",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "store_1",
        "question": "“四川”州“成都”市的发票金额是多少？",
        "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"成都\" AND billing_state  =  \"四川\";",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  \"成都\" AND <unk>  =  \"四川\";"
    },
    {
        "db_id": "world_1",
        "question": "每个国家中最大比例的人所讲的语言是什么？",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "mask_query": "SELECT LANGUAGE ,  <unk> ,  max(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "school_bus",
        "question": "在校车上工作的最大、最小和平均年是多少？",
        "query": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus",
        "mask_query": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM <mask>"
    },
    {
        "db_id": "pilot_1",
        "question": "数一数40岁以上飞行员驾驶的飞机数量。",
        "query": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
        "mask_query": "SELECT count(<unk>) FROM pilotskills WHERE <unk>  >  40"
    },
    {
        "db_id": "wine_1",
        "question": "找出拥有至少四种葡萄酒的酿酒厂。",
        "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
        "mask_query": "SELECT <unk> FROM WINE GROUP BY <unk> HAVING count(*)  >=  4"
    },
    {
        "db_id": "network_2",
        "question": "与“仲景”相处时间最长的朋友的年龄是多少？",
        "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  '仲景' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  '仲景')",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> =  '仲景' AND T2.<unk>  =  (SELECT max(YEAR) FROM <mask> WHERE <unk> =  '仲景')"
    },
    {
        "db_id": "product_catalog",
        "question": "最便宜的目录（美元）的级别名称是什么？",
        "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "mask_query": "SELECT t2.<unk> FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.<unk>  =  t2.<unk> ORDER BY t1.<unk> LIMIT 1"
    },
    {
        "db_id": "ship_mission",
        "question": "列出国籍不是“美国”的船舶的名称。",
        "query": "SELECT Name FROM ship WHERE Nationality != \"美国\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"美国\""
    },
    {
        "db_id": "restaurant_1",
        "question": "“李” “琳”的年龄是多少？",
        "query": "SELECT Age FROM Student WHERE Fname = \"李\" AND Lname = \"琳\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"李\" AND Lname = \"琳\";"
    },
    {
        "db_id": "geo",
        "question": "有多少省临近“长江”",
        "query": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" );",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" );"
    },
    {
        "db_id": "pets_1",
        "question": "每一个养猫或狗的学生的名字是什么？",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫' OR T3.pettype  =  '狗'",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫' OR T3.pettype  =  '狗'"
    },
    {
        "db_id": "aan_1",
        "question": "2009年发表论文最多的前三名机构的名字是什么？",
        "query": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  2009 GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "book_1",
        "question": "列出所有书名、书号和售价。",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "mask_query": "SELECT title ,  isbn ,  <unk> FROM <mask>"
    },
    {
        "db_id": "formula_1",
        "question": "最近举办的比赛的名字是什么？",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "question": "学费高于平均水平的大学有多少？",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE campusfee  >  (SELECT avg(campusfee) FROM <mask>)"
    },
    {
        "db_id": "e_government",
        "question": "使用服务次数最多的组织的电子邮件是哪一个？",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM parties AS t1 JOIN party_services AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_racing",
        "question": "按自行车手的ID排序的每个自行车手有多少辆自行车？",
        "query": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY <unk>"
    },
    {
        "db_id": "video_game",
        "question": "今年玩家的最高和最低级别是多少？",
        "query": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "cinema",
        "question": "没有时间表的电影的片名和导演是什么？",
        "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
        "mask_query": "SELECT title ,  directed_by FROM <mask> WHERE film_id NOT IN (SELECT film_id FROM <mask>)"
    },
    {
        "db_id": "csu_1",
        "question": "哪个学校的学位授予的次数最多？",
        "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "mask_query": "SELECT campus FROM <mask> GROUP BY campus ORDER BY sum(<mask>) DESC LIMIT 1"
    },
    {
        "db_id": "wine_1",
        "question": "列出所有葡萄酒的名称和得分。",
        "query": "SELECT Name ,  Score FROM WINE",
        "mask_query": "SELECT <unk> ,  <unk> FROM WINE"
    },
    {
        "db_id": "club_1",
        "question": "找出“文学”会员的数量。",
        "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"文学\"",
        "mask_query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"文学\""
    },
    {
        "db_id": "driving_school",
        "question": "以“文祥”和“赵”为姓的客户“完成”学习了多少课程？",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"文祥\" AND T2.last_name = \"赵\" AND T1.lesson_status_code = \"完成\";",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  = T2.<unk> WHERE T2.<unk> = \"文祥\" AND T2.<unk> = \"赵\" AND T1.<unk> = \"完成\";"
    },
    {
        "db_id": "dorm_1",
        "question": "找到不同专业和城市的数量。",
        "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "mask_query": "SELECT count(DISTINCT major) ,  count(DISTINCT <unk>) FROM student"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "对最少产品使用的颜色描述是什么？",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT t2.<unk> FROM products AS t1 JOIN ref_colors AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "学生现在有多少不同的住址？",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "vehicle_rent",
        "question": "所有客户的姓名、年龄和会员积分是多少？",
        "query": "SELECT name ,  age ,  membership_credit FROM customers",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM customers"
    },
    {
        "db_id": "network_1",
        "question": "既有朋友又被人喜欢的学生的id是什么？",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "mask_query": "SELECT <unk> FROM <mask> INTERSECT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "针对所有客户地址显示建筑物类型和地址类型代码。",
        "query": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "academic",
        "question": "返回论文被引用数量最多的“北京理工大学”的作者。",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"北京理工大学\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t3.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"北京理工大学\" GROUP BY t1.<unk> ORDER BY SUM ( t4.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "给我文档类型代码是“RV”的文档名称和描述。",
        "query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"",
        "mask_query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""
    },
    {
        "db_id": "flight_2",
        "question": "到达“长沙”机场的航班的航班号是多少？",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"长沙\"",
        "mask_query": "SELECT <unk> FROM FLIGHTS WHERE <unk>  =  \"长沙\""
    },
    {
        "db_id": "activity_1",
        "question": "我们有多少活动？",
        "query": "SELECT count(*) FROM Activity",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“艾伦·埃齐奥尼”最新发表的论文是什么？",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"艾伦·埃齐奥尼\" ORDER BY t3.year DESC;",
        "mask_query": "SELECT DISTINCT t2.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"艾伦·埃齐奥尼\" ORDER BY t3.<unk> DESC;"
    },
    {
        "db_id": "course_teach",
        "question": "每个老师的名字是什么？他们教什么课程？",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "每种类型有多少份文件？",
        "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
        "mask_query": "SELECT document_type_code ,  count(*) FROM <mask> GROUP BY document_type_code"
    },
    {
        "db_id": "world_1",
        "question": "“巴西”的人口和预期寿命是多少？",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"巴西\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"巴西\""
    },
    {
        "db_id": "cre_Theme_park",
        "question": "每个旅游景点的名称、ID和相应的参观次数是多少?",
        "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,   COUNT(*) FROM <mask> AS T1 JOIN VISITS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪个零件的收费最低？列出零件ID和数量。",
        "query": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回“使数据库可用”的作者给我。",
        "query": "SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"使数据库可用\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "soccer_2",
        "question": "每个省招生规模最小的学校叫什么名字？",
        "query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "mask_query": "SELECT <unk> ,  <unk> ,  min(<unk>) FROM college GROUP BY <unk>"
    },
    {
        "db_id": "music_2",
        "question": "有多少音乐家在歌曲“红玫瑰”中有过表演？",
        "query": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"红玫瑰\"",
        "mask_query": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.<unk>  =  \"红玫瑰\""
    },
    {
        "db_id": "wrestler",
        "question": "显示被“市明”或者“大志”淘汰的次数。",
        "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"市明\" OR Eliminated_By  =  \"大志\"",
        "mask_query": "SELECT TIME FROM elimination WHERE <unk>  =  \"市明\" OR <unk>  =  \"大志\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找到名为“小夏”的学生的评估记录的日期。",
        "query": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"小夏\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"小夏\""
    },
    {
        "db_id": "flight_2",
        "question": "哪些航空公司的航班少于200？",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "mask_query": "SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  <  200"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "查找名字包含“楠”的客户的名字。",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"楠\"",
        "mask_query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"楠\""
    },
    {
        "db_id": "advertising_agencies",
        "question": "计算付款的次数。",
        "query": "SELECT count(*) FROM Payments",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "返回“友谊商店”商店所在的营销区域的名称。",
        "query": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"友谊商店\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"友谊商店\""
    },
    {
        "db_id": "aircraft",
        "question": "按降序字母顺序列出所有30岁或以下的飞行员的名字。",
        "query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <=  30 ORDER BY <unk> DESC"
    },
    {
        "db_id": "club_leader",
        "question": "所有俱乐部领导人的平均年龄是多少？",
        "query": "SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id",
        "mask_query": "SELECT avg(T2.age) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.member_id  =  T2.member_id"
    },
    {
        "db_id": "ship_1",
        "question": "找出拥有不止一个船长的船的名称。",
        "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1",
        "mask_query": "SELECT t1.name FROM ship AS t1 JOIN <mask> AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"
    },
    {
        "db_id": "browser_web",
        "question": "按照兼容年份的降序给出所有兼容浏览器和加速器的名称。",
        "query": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN web_client_accelerator AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T1.<unk> DESC"
    },
    {
        "db_id": "school_finance",
        "question": "显示所有学校的平均、最大、最小入学人数。",
        "query": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school",
        "mask_query": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school"
    },
    {
        "db_id": "csu_1",
        "question": "查找在2002年拥有比“湖北”省每个校园教职工都多的学院的校名。",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"湖北\")",
        "mask_query": "SELECT T1.campus FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND <mask>  >  (SELECT max(<mask>) FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"湖北\")"
    },
    {
        "db_id": "music_1",
        "question": "找出歌手数量最少的国家？",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "question": "包含3个或更多城市的国家是什么？",
        "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "mask_query": "SELECT T2.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >=  3"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "在“严” “冰”报告的任何问题发生之前报告的问题的ID是什么？",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"严\" AND T4.staff_last_name = \"冰\" )",
        "mask_query": "SELECT T1.<unk> FROM problems AS T1 JOIN staff AS T2 ON T1.<unk> = T2.<unk> WHERE <unk>  <  ( SELECT min(<unk>) FROM problems AS T3 JOIN staff AS T4 ON T3.<unk> = T4.<unk> WHERE T4.<unk> = \"严\" AND T4.<unk> = \"冰\" )"
    },
    {
        "db_id": "conference",
        "question": "显示所有年份和每年的会议数。",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "mask_query": "SELECT YEAR ,  count(*) FROM <mask> GROUP BY YEAR"
    },
    {
        "db_id": "museum_visit",
        "question": "在所有的游玩中，购买的平均票数和最大票数是多少？",
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "mask_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM <mask>"
    },
    {
        "db_id": "culture_company",
        "question": "与1989年以后出版的书籍相对应的书名、作者或编辑是什么？",
        "query": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "mask_query": "SELECT book_title ,  author_or_editor FROM <mask> WHERE YEAR  >  1989"
    },
    {
        "db_id": "cinema",
        "question": "每部电影的片名和导演是什么？",
        "query": "SELECT title ,  directed_by FROM film",
        "mask_query": "SELECT title ,  directed_by FROM <mask>"
    },
    {
        "db_id": "climbing",
        "question": "哪一个山脉包含最多的山？",
        "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "对于被详细描述为“详细”或者至少有3个结果的项目的任务细节、任务id和项目id是什么？",
        "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  '详细' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '详细' UNION SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Project_outcomes AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T2.<unk> HAVING count(*)  >  2"
    },
    {
        "db_id": "pilot_1",
        "question": "所有飞行员的平均年龄和最小年龄是多少？",
        "query": "SELECT avg(age) ,  min(age) FROM pilotskills",
        "mask_query": "SELECT avg(<unk>) ,  min(<unk>) FROM pilotskills"
    },
    {
        "db_id": "country_language",
        "question": "按使用官方语言的国家的平均总分降序排列显示官方语言。",
        "query": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T3.<unk> ORDER BY avg(T1.<unk>) DESC"
    },
    {
        "db_id": "sakila_1",
        "question": "返回最常被租用的电影的标题和库存ID。",
        "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "voter_1",
        "question": "有多少州？",
        "query": "SELECT count(*) FROM area_code_state",
        "mask_query": "SELECT count(*) FROM area_code_state"
    },
    {
        "db_id": "geo",
        "question": "“长江”流经省内的主要城市有哪些？",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"长江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150000 AND <unk> IN ( SELECT <unk> FROM <mask> WHERE LENGTH  >  750 AND <unk>  =  \"长江\" );"
    },
    {
        "db_id": "wta_1",
        "question": "找出比赛的总数。",
        "query": "SELECT count(*) FROM matches",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "student_1",
        "question": "找到“张”“亮”没有教过的所有一年级学生的名字和姓氏。",
        "query": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"张\" AND T2.lastname  =  \"亮\"",
        "mask_query": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"张\" AND T2.lastname  =  \"亮\""
    },
    {
        "db_id": "movie_2",
        "question": "在奥登电影院或帝国电影院放映的所有电影的片名是什么？",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "mask_query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'"
    },
    {
        "db_id": "theme_gallery",
        "question": "以门票价格的降序展示所有展览的主题和年份。",
        "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC",
        "mask_query": "SELECT theme ,  YEAR FROM <mask> ORDER BY ticket_price DESC"
    },
    {
        "db_id": "college_1",
        "question": "按出生日期排序，列出所有工作代码为“教授”的员工的姓名。",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  '教授' ORDER BY emp_dob",
        "mask_query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  '教授' ORDER BY emp_dob"
    },
    {
        "db_id": "movie_1",
        "question": "星级是在3和5之间的所有电影的标题是什么？",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> BETWEEN 3 AND 5"
    },
    {
        "db_id": "video_game",
        "question": "显示任何处于后卫位置的玩家未玩的游戏的名称。",
        "query": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"Guard\""
    },
    {
        "db_id": "boat_1",
        "question": "找出那些预定了103号船的水手的名字。",
        "query": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE  T2.<unk>  =  103"
    },
    {
        "db_id": "game_injury",
        "question": "受伤事故有多少种不同的信息来源？",
        "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
        "mask_query": "SELECT count(DISTINCT SOURCE) FROM <mask>"
    },
    {
        "db_id": "gymnast",
        "question": "哪一个家乡没有体操运动员？",
        "query": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> EXCEPT SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "loan_1",
        "question": "贷过款的客户的平均信用评分是多少？",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE cust_id IN (SELECT cust_id FROM <mask>)"
    },
    {
        "db_id": "phone_market",
        "question": "显示总库存量大于2000的手机的名称，按总库存量的降序排列。",
        "query": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING sum(T1.<unk>)  >=  2000 ORDER BY sum(T1.<unk>) DESC"
    },
    {
        "db_id": "imdb",
        "question": "“成龙”出生在哪个城市？",
        "query": "SELECT birth_city FROM director WHERE name  =  \"成龙\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"成龙\";"
    },
    {
        "db_id": "course_teach",
        "question": "家乡不是“小杠杆城区”的老师叫什么名字？",
        "query": "SELECT Name FROM teacher WHERE Hometown != \"下城区\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"下城区\""
    },
    {
        "db_id": "riding_club",
        "question": "显示排名第1的教练执教的球员的名字。",
        "query": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  1"
    },
    {
        "db_id": "company_office",
        "question": "总部不是“中国”的公司名称是什么？",
        "query": "SELECT name FROM Companies WHERE Headquarters != '中国'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != '中国'"
    },
    {
        "db_id": "farm",
        "question": "显示人口大于1500和小于500的城市的状态。",
        "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  1500 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  500"
    },
    {
        "db_id": "musical",
        "question": "列出年龄不是20岁的演员的名字。",
        "query": "SELECT Name FROM actor WHERE Age != 20",
        "mask_query": "SELECT <unk> FROM <mask> WHERE Age != 20"
    },
    {
        "db_id": "ship_1",
        "question": "返回没有船长的船的名字和类别.",
        "query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "mask_query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM <mask>)"
    },
    {
        "db_id": "college_3",
        "question": "住在“上海”的生的最高和最低分数是多少？",
        "query": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"上海\"",
        "mask_query": "SELECT max(T2.<unk>) ,  min(T2.<unk>) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.<unk>  =  T2.<unk> AND T1.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"上海\""
    },
    {
        "db_id": "small_bank_1",
        "question": "查找“小智”账户的支票余额和储蓄余额。",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  '小智'",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> WHERE T1.<unk>  =  '小智'"
    },
    {
        "db_id": "document_management",
        "question": "拥有最多章节数的文档的名字是什么？",
        "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM documents AS t1 JOIN document_sections AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "question": "放映卡通片“黑猫警长”的电视频道播放的连续剧名称是什么？",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"黑猫警长\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"黑猫警长\";"
    },
    {
        "db_id": "allergy_1",
        "question": "哪位导师的学生最多？",
        "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT advisor FROM <mask> GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "activity_1",
        "question": "展示教师名为“王”“睿”的电话，房间，和建筑。",
        "query": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"睿\" AND Lname  =  \"王\"",
        "mask_query": "SELECT phone ,  room ,  building FROM <mask> WHERE <unk>  =  \"睿\" AND <unk>  =  \"王\""
    },
    {
        "db_id": "club_1",
        "question": "“北大创业俱乐部”俱乐部每个“男性”成员的名字和姓氏是什么？",
        "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"北大创业俱乐部\" AND t3.sex  =  \"男\"",
        "mask_query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"北大创业俱乐部\" AND t3.sex  =  \"男\""
    },
    {
        "db_id": "movie_1",
        "question": "最近一部电影的最高星级和年份是多少？",
        "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",
        "mask_query": "SELECT max(T1.<unk>) ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  (SELECT max(YEAR) FROM <mask>)"
    },
    {
        "db_id": "planet_1",
        "question": "重量在10到30之间的包裹的号码和重量是多少？",
        "query": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
        "mask_query": "SELECT <unk> ,  <unk> FROM PACKAGE WHERE <unk> BETWEEN 10 AND 30;"
    },
    {
        "db_id": "tvshow",
        "question": "电视连续剧剧集“大宅门”播出的电视频道是什么？列出这个电视频道的连续剧名称。",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"大宅门\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"大宅门\";"
    },
    {
        "db_id": "allergy_1",
        "question": "姓“金”的学生住在哪个城市？",
        "query": "SELECT city_code FROM Student WHERE LName  =  \"金\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"金\""
    },
    {
        "db_id": "chinook_1",
        "question": "请按字母顺序列出所有唱片的标题。",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "mask_query": "SELECT <unk> FROM ALBUM ORDER BY <unk>"
    },
    {
        "db_id": "poker_player",
        "question": "按价值降序排序的扑克玩家的收入是什么？",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "conference",
        "question": "对于每个会议ID，他们的名称、年份和参与者人数是多少？",
        "query": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
        "mask_query": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id"
    },
    {
        "db_id": "dorm_1",
        "question": "找出有“客厅”但没有“自习室”作为设施的宿舍的名字。",
        "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  '客厅' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  '自习室'",
        "mask_query": "SELECT T1.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '客厅' EXCEPT SELECT T1.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '自习室'"
    },
    {
        "db_id": "product_catalog",
        "question": "找到下一个条目ID大于8的所有产品的名字。",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "mask_query": "SELECT <unk> FROM catalog_contents WHERE <unk>  >  8"
    },
    {
        "db_id": "department_store",
        "question": "有“市场”部和“管理”部的百货公司的id和名称是什么？",
        "query": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"市场\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"管理\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM departments AS T1 JOIN department_stores AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"市场\" INTERSECT SELECT T2.<unk> ,  T2.<unk> FROM departments AS T1 JOIN department_stores AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"管理\""
    },
    {
        "db_id": "railway",
        "question": "显示与“和谐号”列车相关的铁路建设商。",
        "query": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"和谐号\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"和谐号\""
    },
    {
        "db_id": "aan_1",
        "question": "从未被引用过的论文的ID和标题是什么？",
        "query": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "flight_company",
        "question": "每个机场有多少家公司经营航空公司？",
        "query": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
        "mask_query": "SELECT T3.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T3.<unk>"
    },
    {
        "db_id": "department_store",
        "question": "购买“键盘”的客户不同的名字是什么？",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"键盘\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> JOIN order_items AS T3 ON T2.<unk>  =  T3.<unk> JOIN products AS T4 ON T3.<unk>  =  T4.<unk> WHERE T4.<unk>  =  \"键盘\""
    },
    {
        "db_id": "theme_gallery",
        "question": "展示所有在2004没有展览的艺术家名字。",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "car_racing",
        "question": "对于每个品牌，返回品牌名称和该品牌的司机数量。",
        "query": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "不同的模板类型代码是什么？以及每个类型被多少个文档使用？",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "mask_query": "SELECT T1.template_type_code ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "找出产品类别为“香料”并且通常销售超过1000的产品的数量。",
        "query": "SELECT count(*) FROM products WHERE product_category_code  =  \"香料\" AND typical_buying_price  >  1000",
        "mask_query": "SELECT count(*) FROM products WHERE <unk>  =  \"香料\" AND <unk>  >  1000"
    },
    {
        "db_id": "driving_school",
        "question": "名字是 “子君” ，姓氏是“温” 的工作人员的生日是什么时候？",
        "query": "SELECT date_of_birth FROM Staff WHERE first_name = \"子君\" AND last_name = \"温\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"子君\" AND <unk> = \"温\";"
    },
    {
        "db_id": "tv_shows",
        "question": "显示ERP大于150或小于30的无线电发射机。",
        "query": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150 OR <unk>  <  30"
    },
    {
        "db_id": "insurance_fnol",
        "question": "“人寿保险”保险单下的客户电话号码是多少？",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"人寿保险\"",
        "mask_query": "SELECT customer_phone FROM available_policies WHERE <unk>  =  \"人寿保险\""
    },
    {
        "db_id": "orchestra",
        "question": "显示指挥过超过一支管弦乐队的指挥家的名字。",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "manufacturer",
        "question": "总共有多少家具部件？",
        "query": "SELECT sum(num_of_component) FROM furniture",
        "mask_query": "SELECT sum(num_of_component) FROM <mask>"
    },
    {
        "db_id": "climbing",
        "question": "每个国家有多少登山者？",
        "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "aircraft",
        "question": "飞机的数量是多少？",
        "query": "SELECT count(*) FROM aircraft",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "soccer_2",
        "question": "按照训练时间的降序且卡片为“确定”的球员的姓名。",
        "query": "SELECT pName FROM Player WHERE yCard  =  '确定' ORDER BY HS DESC",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '确定' ORDER BY <unk> DESC"
    },
    {
        "db_id": "pilot_1",
        "question": "找出年龄比所有拥有F-14战斗机飞行员都年轻的飞行员人数。",
        "query": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
        "mask_query": "SELECT count(*) FROM pilotskills WHERE <unk>  <  (SELECT min(<unk>) FROM pilotskills WHERE <unk>  =  'F-14 Fighter')"
    },
    {
        "db_id": "sakila_1",
        "question": "计算电影的不同评级的数量。",
        "query": "SELECT count(DISTINCT rating) FROM film",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "movie_1",
        "question": "所有高于“姜文”电影的平均评级的电影的片名和导演是什么？",
        "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"姜文\")",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  (SELECT avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"姜文\")"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "不持有信用卡的客户的ID和名字是什么？",
        "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"信用卡\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> EXCEPT SELECT T1.<unk> ,  T2.<unk> FROM Customers_cards AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"信用卡\""
    },
    {
        "db_id": "election",
        "question": "找到来自人口低于100000的县的代表。",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.County_id  =  T2.<unk> WHERE T1.<unk>  <  100000"
    },
    {
        "db_id": "icfp_1",
        "question": "论文标题为“转基因蛋白酶”的作者的姓氏是什么？",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"转基因蛋白酶\"",
        "mask_query": "SELECT t1.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.<unk>  =  \"转基因蛋白酶\""
    },
    {
        "db_id": "election",
        "question": "按人口升序给所有县的名称排序。",
        "query": "SELECT County_name FROM county ORDER BY Population ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "sakila_1",
        "question": "哪些电影演员扮演超过30部电影？列出他或她的名字和姓氏。",
        "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >  30"
    },
    {
        "db_id": "loan_1",
        "question": "信用评分最差的客户的名字是什么？",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "school_player",
        "question": "显示不属于“第一机构”的学校的昵称。",
        "query": "SELECT Nickname FROM school_details WHERE Division != \"第一机构\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"第一机构\""
    },
    {
        "db_id": "allergy_1",
        "question": "有多少过敏项目？",
        "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "mask_query": "SELECT count(DISTINCT allergy) FROM Allergy_type"
    },
    {
        "db_id": "book_1",
        "question": "同时被客户名为彼得·多伊和詹姆斯·史密斯订购的图书的isbn是什么？",
        "query": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
        "mask_query": "SELECT T2.isbn FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idOrder  =  T2.idOrder JOIN <mask> AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idOrder  =  T2.idOrder JOIN <mask> AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\""
    },
    {
        "db_id": "world_1",
        "question": "“亚洲”有多少国家？",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"亚洲\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE continent  =  \"亚洲\""
    },
    {
        "db_id": "geo",
        "question": "中国最短的河流有多长？",
        "query": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "mask_query": "SELECT LENGTH FROM <mask> WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "academic",
        "question": "返回2000年后在“PVLDB”会议上所有“北京理工大学”发表的论文。",
        "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"北京理工大学\" AND t5.year  >  2000;",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t3 ON t5.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\" AND t2.<unk>  =  \"北京理工大学\" AND t5.<unk>  >  2000;"
    },
    {
        "db_id": "network_2",
        "question": "找到和“张波”交朋友的人的名字。",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  '张波'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '张波'"
    },
    {
        "db_id": "csu_1",
        "question": "报告“上海”市所有校区的名称。",
        "query": "SELECT campus FROM campuses WHERE county  =  \"上海\"",
        "mask_query": "SELECT campus FROM campuses WHERE county  =  \"上海\""
    },
    {
        "db_id": "pilot_1",
        "question": "在奥斯汀和波士顿都有飞机的飞行员叫什么名字？",
        "query": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
        "mask_query": "SELECT T1.<unk> FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Austin\" INTERSECT SELECT T1.<unk> FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.LOCATION  =  \"Boston\""
    },
    {
        "db_id": "bike_1",
        "question": "这些车站在多少个不同的城市？",
        "query": "SELECT count(DISTINCT city) FROM station",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "document_management",
        "question": "最常见文档类型的文档的总访问次数是多少？",
        "query": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT sum(<unk>) FROM documents GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "wine_1",
        "question": "列出按年份排序的价格高于100的葡萄酒的葡萄、酒厂和年份。",
        "query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "mask_query": "SELECT <unk> ,  <unk> ,  YEAR FROM WINE WHERE <unk>  >   100 ORDER BY YEAR"
    },
    {
        "db_id": "race_track",
        "question": "我们有多少轨道？",
        "query": "SELECT count(*) FROM track",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "epinions_1",
        "question": "按字母顺序列出所有项目的标题。",
        "query": "SELECT title FROM item ORDER BY title",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "manufactory_1",
        "question": "商店里所有产品的名称和价格是多少？",
        "query": "SELECT name ,  price FROM products",
        "mask_query": "SELECT name ,  price FROM products"
    },
    {
        "db_id": "csu_1",
        "question": "2002年“山东大学”的教师人数是多少？",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"山东大学\"",
        "mask_query": "SELECT <mask> FROM <mask> AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"山东大学\""
    },
    {
        "db_id": "geo",
        "question": "“长江”流经的省中人口最多的省是哪一个省？",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" );"
    },
    {
        "db_id": "dorm_1",
        "question": "有最少设施的宿舍的名称和容量是什么？",
        "query": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T2.<unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "movie_2",
        "question": "没有在奥登电影院上映的每部电影的名字是什么？",
        "query": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "mask_query": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "有超过6000美元的资助的所有组织的id和细节是什么？",
        "query": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING sum(T1.<unk>)  >  6000"
    },
    {
        "db_id": "aircraft",
        "question": "请列出地点和获奖的飞机名称。",
        "query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN MATCH AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "flight_4",
        "question": "有超过一个机场的所有城市的名字是什么？他们有多少个机场？",
        "query": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "warehouse_1",
        "question": "存放石头或剪刀的不同的仓库有哪些？",
        "query": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
        "mask_query": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'"
    },
    {
        "db_id": "culture_company",
        "question": "显示所有图书类别和每类图书的数量。",
        "query": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "mask_query": "SELECT category ,  count(*) FROM <mask> GROUP BY category"
    },
    {
        "db_id": "program_share",
        "question": "找出“早上”时段从未播出过的节目名称。",
        "query": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"早上\"",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.program_id  =  t2.program_id WHERE t2.<unk>  =  \"早上\""
    },
    {
        "db_id": "college_3",
        "question": "找到至少有一个成绩为“B”的学生人数。",
        "query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "mask_query": "SELECT COUNT(DISTINCT <unk>) FROM ENROLLED_IN WHERE <unk>  =  \"B\""
    },
    {
        "db_id": "college_3",
        "question": "按年龄降序顺序排序的“女性”学生的姓氏是什么？",
        "query": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
        "mask_query": "SELECT <unk> FROM STUDENT WHERE <unk>  =  \"F\" ORDER BY <unk> DESC"
    },
    {
        "db_id": "chinook_1",
        "question": "找到“拉丁”和“流行”歌曲的平均毫秒长度。",
        "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"拉丁\" OR T1.Name  =  \"流行\"",
        "mask_query": "SELECT AVG(<unk>) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"拉丁\" OR T1.<unk>  =  \"流行\""
    },
    {
        "db_id": "scientist_1",
        "question": "找出科学家总数。",
        "query": "SELECT count(*) FROM scientists",
        "mask_query": "SELECT count(*) FROM scientists"
    },
    {
        "db_id": "dog_kennels",
        "question": "那个主人拥有最多的狗？列出主人的ID、名字和姓氏。",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "station_weather",
        "question": "找出每个起点发车的列车数量。",
        "query": "SELECT origin ,  count(*) FROM train GROUP BY origin",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示既具有“完成”状态的订单又具有“部分”状态的订单的客户的名字。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  '完成' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  '部分'",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '完成' INTERSECT SELECT T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '部分'"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示ID为9的流程的下一个流程ID、流程名称和流程描述。",
        "query": "SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM Business_processes WHERE <unk>  =  9"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "检查发票记录，计算支付方式是“信用卡”订购的平均数量。",
        "query": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"信用卡\"",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  \"信用卡\""
    },
    {
        "db_id": "e_commerce",
        "question": "所有居住在美国的客户的地址、城镇和县信息是什么？",
        "query": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE Country  =  'USA'"
    },
    {
        "db_id": "movie_1",
        "question": "对于每个导演来说，他们评分最差的电影的片名和得分是什么？",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  T2.<unk> ,  min(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "poker_player",
        "question": "最常见的国籍是什么？",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "network_1",
        "question": "高中生“小军”有多少个朋友？",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"小军\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id WHERE T2.<unk>  =  \"小军\""
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "有“父子聚会”细节的组织提供哪些不同的服务类型？",
        "query": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  '父子聚会'",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM services AS T1 JOIN organizations AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '父子聚会'"
    },
    {
        "db_id": "music_2",
        "question": "专辑的独特标签是什么？",
        "query": "SELECT count(DISTINCT label) FROM albums",
        "mask_query": "SELECT count(DISTINCT label) FROM albums"
    },
    {
        "db_id": "voter_2",
        "question": "主修课程50的学生的姓氏是什么？",
        "query": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "mask_query": "SELECT <unk> FROM STUDENT WHERE <unk>  =  50"
    },
    {
        "db_id": "music_2",
        "question": "哪首歌声乐部分最多？",
        "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sports_competition",
        "question": "列出平均得分数大于20分的球员的位置。",
        "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "mask_query": "SELECT POSITION FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  >=  20"
    },
    {
        "db_id": "course_teach",
        "question": "每一个家乡对应有多少老师？",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "pilot_1",
        "question": "找到拥有PiperCub和B-52轰炸机的飞行员。",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "mask_query": "SELECT <unk> FROM pilotskills WHERE <unk>  =  'Piper Cub' INTERSECT SELECT <unk> FROM pilotskills WHERE <unk>  =  'B-52 Bomber'"
    },
    {
        "db_id": "college_1",
        "question": "“会计学”系有多少教授？",
        "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"会计学\"",
        "mask_query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE <unk>  =  \"会计学\""
    },
    {
        "db_id": "geo",
        "question": "最大省的人口是多少？",
        "query": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "driving_school",
        "question": "列出居住在“福州”市的客户的姓名和姓氏。",
        "query": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"福州\";",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"福州\";"
    },
    {
        "db_id": "book_press",
        "question": "找出每家出版社的名称和图书销售总额。",
        "query": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
        "mask_query": "SELECT sum(t1.sale_amount) ,  t2.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id"
    },
    {
        "db_id": "network_1",
        "question": "显示至少有2个喜欢的学生的名字。",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "school_finance",
        "question": "按字母顺序显示所有学校的名字。",
        "query": "SELECT school_name FROM school ORDER BY school_name",
        "mask_query": "SELECT school_name FROM school ORDER BY school_name"
    },
    {
        "db_id": "voter_2",
        "question": "谁担任过在“春季”选举周期中有财务员的选票的学生的导师？",
        "query": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"春天\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"春天\""
    },
    {
        "db_id": "student_1",
        "question": "教授学生名为“刘”“磊”的所有老师的名字和姓氏是那些？",
        "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"刘\" AND T1.lastname  =  \"磊\"",
        "mask_query": "SELECT T2.firstname ,  T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"刘\" AND T1.lastname  =  \"磊\""
    },
    {
        "db_id": "hospital_1",
        "question": "哪些医生从来没有预约过？找出他们的名字。",
        "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "mask_query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.<mask>  =  T2.<unk>"
    },
    {
        "db_id": "icfp_1",
        "question": "哪些人写了标题中有“功能性”一词的论文？返回作者的名字。",
        "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"功能性\"",
        "mask_query": "SELECT t1.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.<unk> LIKE \"功能性\""
    },
    {
        "db_id": "workshop_paper",
        "question": "按场地的字母顺序对每个研习会进行排序。返回每个研习会的日期和地点。",
        "query": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "aan_1",
        "question": "出版数量最多的地点和年份是什么？",
        "query": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  YEAR FROM paper GROUP BY <unk> ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "哪些旅游景点与皇室有关？告诉我他们的细节以及我们怎样才能到达那里。",
        "query": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "哪个商店的员工最多？把店名给我。",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "question": "查找使用可用保险单中最常见保险单类型的客户的电话号码。",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT customer_phone FROM available_policies WHERE <unk>  =  (SELECT <unk> FROM available_policies GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "college_2",
        "question": "给出最高薪的教员的名字。",
        "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "“亚洲”国家中使用最多的语言是什么？",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"亚洲\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"亚洲\" GROUP BY T2.<unk> ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "db_id": "program_share",
        "question": "每个节目的名称、来源和拥有者是什么？",
        "query": "SELECT name ,  origin ,  OWNER FROM program",
        "mask_query": "SELECT name ,  origin ,  OWNER FROM <mask>"
    },
    {
        "db_id": "coffee_shop",
        "question": "查找30岁以下或持有黑会员卡的会员的ID和姓名。",
        "query": "SELECT name ,  member_id FROM member WHERE Membership_card  =  '黑卡' OR age  <  30",
        "mask_query": "SELECT name ,  member_id FROM <mask> WHERE <unk>  =  '黑卡' OR age  <  30"
    },
    {
        "db_id": "advertising_agencies",
        "question": "列出所有客户的ID和客户的详细信息。",
        "query": "SELECT client_id ,  client_details FROM Clients",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "ship_mission",
        "question": "显示既有吨位大于6000的船舶又有吨位小于4000的船舶的船舶类型。",
        "query": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000",
        "mask_query": "SELECT TYPE FROM <mask> WHERE <unk>  >  6000 INTERSECT SELECT TYPE FROM <mask> WHERE <unk>  <  4000"
    },
    {
        "db_id": "activity_1",
        "question": "显示所有“女”教员的姓名、姓氏和电话号码。",
        "query": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  \"女\"",
        "mask_query": "SELECT <unk> ,  <unk> ,  phone FROM <mask> WHERE <unk>  =  \"女\""
    },
    {
        "db_id": "college_1",
        "question": "姓“吕”的教授所在的系名和办公室是什么？",
        "query": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  '吕'",
        "mask_query": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  '吕'"
    },
    {
        "db_id": "college_1",
        "question": "每个系有多少教授有“博士”学位？",
        "query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  '博士' GROUP BY dept_code",
        "mask_query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  '博士' GROUP BY dept_code"
    },
    {
        "db_id": "school_player",
        "question": "招生人数最多的学校的学校色彩是什么？",
        "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”研究人员的数量。",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "所有房产的最低客房数量是多少？",
        "query": "SELECT min(room_count) FROM Properties;",
        "mask_query": "SELECT min(<unk>) FROM <mask>;"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "对于所有的客户地址，有什么不同的地址类型代码？",
        "query": "SELECT DISTINCT address_type_code FROM customer_addresses",
        "mask_query": "SELECT DISTINCT <unk> FROM customer_addresses"
    },
    {
        "db_id": "election",
        "question": "显示人口最多的县的名字。",
        "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "列出开出处方药品“感冒灵”的医生的名字。",
        "query": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"感冒灵\"",
        "mask_query": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"感冒灵\""
    },
    {
        "db_id": "bike_1",
        "question": "在94107的邮政编码哪一天既没有“大雨”也没有“大雾”？",
        "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"大雾\" AND EVENTS != \"大雨\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  94107 AND EVENTS != \"大雾\" AND EVENTS != \"大雨\""
    },
    {
        "db_id": "art_1",
        "question": "1850年后出生的艺术家的全名是什么？",
        "query": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
        "mask_query": "SELECT <unk> ,  <unk> FROM artists WHERE <unk>  >  1850"
    },
    {
        "db_id": "student_1",
        "question": "所有老师的名字和姓氏是什么？",
        "query": "SELECT DISTINCT firstname ,  lastname FROM teachers",
        "mask_query": "SELECT DISTINCT firstname ,  lastname FROM <mask>"
    },
    {
        "db_id": "region_building",
        "question": "按面积计算，五个最大的地区的名字是什么？",
        "query": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 5"
    },
    {
        "db_id": "restaurants",
        "question": "我可以在“厦门”哪里吃“淮南”菜？",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"厦门\" AND t1.food_type  =  \"淮南\";",
        "mask_query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN <mask> AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"厦门\" AND t1.food_type  =  \"淮南\";"
    },
    {
        "db_id": "formula_1",
        "question": "英国或马来西亚的所有环路的名称是什么？",
        "query": "SELECT name FROM circuits WHERE country = \"英国\" OR country = \"马来西亚\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"英国\" OR <unk> = \"马来西亚\""
    },
    {
        "db_id": "aircraft",
        "question": "25岁或以上的飞行员叫什么名字？",
        "query": "SELECT Name FROM pilot WHERE Age  >=  25",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >=  25"
    },
    {
        "db_id": "allergy_1",
        "question": "给出居住在“香港”或“深圳”学生的人数。",
        "query": "SELECT count(*) FROM Student WHERE city_code  =  \"香港\" OR city_code  =  \"深圳\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"香港\" OR <unk>  =  \"深圳\""
    },
    {
        "db_id": "college_2",
        "question": "“国际金融\"课程的预备课程的名称是什么？",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  '国际金融')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '国际金融')"
    },
    {
        "db_id": "city_record",
        "question": "哪三个城市地区人口最多？",
        "query": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "mask_query": "SELECT <mask> FROM <mask> ORDER BY regional_population DESC LIMIT 3"
    },
    {
        "db_id": "activity_1",
        "question": "什么建筑有教学办公室？",
        "query": "SELECT DISTINCT building FROM Faculty",
        "mask_query": "SELECT DISTINCT building FROM <mask>"
    },
    {
        "db_id": "online_exams",
        "question": "显示至少有三个问题的问题类型。",
        "query": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  3"
    },
    {
        "db_id": "gas_company",
        "question": "按开业年份排列所有加油站的位置。",
        "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "mask_query": "SELECT LOCATION FROM <mask> ORDER BY open_year"
    },
    {
        "db_id": "customers_and_orders",
        "question": "计算硬件类型的产品数。",
        "query": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"Hardware\""
    },
    {
        "db_id": "loan_1",
        "question": "有多少顾客？",
        "query": "SELECT sum(no_of_customers) FROM bank",
        "mask_query": "SELECT sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示流程结果的数量。",
        "query": "SELECT count(*) FROM Process_outcomes",
        "mask_query": "SELECT count(*) FROM Process_outcomes"
    },
    {
        "db_id": "imdb",
        "question": "谁在电视剧“三国演义”中扮演“曹操”？",
        "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"曹操\" AND t2.title  =  \"三国演义\";",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"曹操\" AND t2.<unk>  =  \"三国演义\";"
    },
    {
        "db_id": "art_1",
        "question": "按长度顺序列出所有不同画作的名称。",
        "query": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
        "mask_query": "SELECT DISTINCT <unk> FROM paintings ORDER BY <unk>"
    },
    {
        "db_id": "real_estate_properties",
        "question": "超过1个房间的“房子”或“公寓”的属性名称是什么？",
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"房子\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"公寓\" AND room_count  >  1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"房子\" UNION SELECT <unk> FROM <mask> WHERE <unk>  =  \"公寓\" AND <unk>  >  1"
    },
    {
        "db_id": "online_exams",
        "question": "对于每个性别，返回性别代码和识别为该性别的学生人数。",
        "query": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "有订单状态为“取消”的商品总数是多少？",
        "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"取消\"",
        "mask_query": "SELECT sum(t2.<unk>) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"取消\""
    },
    {
        "db_id": "museum_visit",
        "question": "找到没有参观过2010年开放的博物馆的游客的人数。",
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE id NOT IN (SELECT t2.visitor_id FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.open_year  >  2010)"
    },
    {
        "db_id": "address_1",
        "question": "数一数住在中国的学生人数。",
        "query": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"CHINA\""
    },
    {
        "db_id": "document_management",
        "question": "查找已登录的用户中最流行的角色的描述。",
        "query": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT <unk> FROM ROLES WHERE <unk>  =  (SELECT <unk> FROM users WHERE <unk>  =  1 GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "geo",
        "question": "哪个省的海拔是最低的",
        "query": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "formula_1",
        "question": "有多少司机参加了2009澳大利亚大奖赛？",
        "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"澳大利亚大奖赛\" AND YEAR = 2009",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid WHERE T2.<unk> = \"澳大利亚大奖赛\" AND YEAR = 2009"
    },
    {
        "db_id": "store_product",
        "question": "哪个地区的面积最少？",
        "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "mask_query": "SELECT district_name FROM <mask> ORDER BY city_area ASC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "每个文档的位置代码、起始日期和结束数据所在位置都是什么？",
        "query": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
        "mask_query": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations"
    },
    {
        "db_id": "bakery_1",
        "question": "黑莓或蓝莓口味的商品平均价格是多少？",
        "query": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
        "mask_query": "SELECT avg(price) FROM <mask> WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\""
    },
    {
        "db_id": "insurance_policies",
        "question": "哪种付款方式最常被使用？",
        "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示不同批次的平均交易量。",
        "query": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id",
        "mask_query": "SELECT T2.<unk> ,  avg(<unk>) FROM TRANSACTIONS AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "tvshow",
        "question": "没有播放“黄伟明”导演的卡通片的电视频道id是什么？",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  '黄伟明'",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  '黄伟明'"
    },
    {
        "db_id": "climbing",
        "question": "列出拥有一座以上山的国家。",
        "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "company_employee",
        "question": "显示公司名称和该公司员工人数",
        "query": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "mask_query": "SELECT T3.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> GROUP BY T3.<unk>"
    },
    {
        "db_id": "activity_1",
        "question": "显示所有教员的等级、名字和姓氏。",
        "query": "SELECT rank ,  Fname ,  Lname FROM Faculty",
        "mask_query": "SELECT rank ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "有4个或更多交易的账户的ID和名称是什么？",
        "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM Financial_transactions AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  4"
    },
    {
        "db_id": "music_2",
        "question": "“冰雨”歌曲使用了多少种乐器？",
        "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"冰雨\"",
        "mask_query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"冰雨\""
    },
    {
        "db_id": "vehicle_driver",
        "question": "对于使用过的车辆，行驶次数最少的车辆的ID是多少？",
        "query": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT vehicle_id FROM <mask> GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customer_deliveries",
        "question": "查找具有最高交付次数的线路的名称。",
        "query": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "与每个CMI交叉引用相关的业务费率有多少？列出交叉引用ID、主客户ID和数量。",
        "query": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "最不常见的拘留类型的代码和描述是什么？",
        "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "car_1",
        "question": "最大加速度的汽车的马力是多少？",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "mask_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "列出每个子集中不同文档的子集ID、名称和编号。",
        "query": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> , count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> =  T2.<unk> GROUP BY T1.<unk>;"
    },
    {
        "db_id": "bike_1",
        "question": "前5的云覆盖率的日期是什么？并告诉我云的覆盖率。",
        "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 5"
    },
    {
        "db_id": "region_building",
        "question": "对于竣工年份，返回年份和完工的建筑数量。",
        "query": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "music_1",
        "question": "用“孟加拉语”创作的“女性”艺术家的原籍国是什么？",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"女\" AND T2.languages  =  \"孟加拉语\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"女\" AND T2.<unk>  =  \"孟加拉语\""
    },
    {
        "db_id": "vehicle_driver",
        "question": "有多少车辆有最高速度？",
        "query": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE top_speed  =  (SELECT max(top_speed) FROM <mask>)"
    },
    {
        "db_id": "geo",
        "question": "最小省的最高点是什么？",
        "query": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "最多的文件的位置代码是什么？",
        "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "所有评审中给出的总奖金是多少？",
        "query": "SELECT sum(bonus) FROM evaluation",
        "mask_query": "SELECT sum(bonus) FROM <mask>"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "显示客户卡的数量。",
        "query": "SELECT count(*) FROM Customers_cards",
        "mask_query": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "wine_1",
        "question": "按名字排序的分数大于93的葡萄，葡萄产地和酒的名字是什么？",
        "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM WINE WHERE <unk>  >  93 ORDER BY <unk>"
    },
    {
        "db_id": "club_leader",
        "question": "最老的会员叫什么名字？",
        "query": "SELECT Name FROM member ORDER BY Age DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "college_1",
        "question": "GPA高于3的最年轻的学生的名字和姓是什么？他们的GPA是多少？",
        "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
        "mask_query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "哪些学生在行为监控中不仅获得了最常见的结果，而且得到了由3名学生产生的结果？列出学生的个人资料和细节。",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN ( SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN ( SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  =  3 )"
    },
    {
        "db_id": "csu_1",
        "question": "“厦门大学”2004年有多少教师队伍？",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"厦门大学\"",
        "mask_query": "SELECT <mask> FROM <mask> AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"厦门大学\""
    },
    {
        "db_id": "election",
        "question": "每个县的名字和人口是多少？",
        "query": "SELECT County_name ,  Population FROM county",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "epinions_1",
        "question": "查找没有收到任何评论的项目的名称。",
        "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "在日期“2017-06-19 02:59:21”之前具有“关闭”状态或状态记录的事物的不同id和类型是什么？",
        "query": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  '关闭' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "mask_query": "SELECT DISTINCT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '关闭' OR T1.<unk>  <  '2017-06-19 02:59:21'"
    },
    {
        "db_id": "wine_1",
        "question": "“2008”年所有葡萄酒的名称是什么？",
        "query": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"",
        "mask_query": "SELECT <unk> FROM WINE WHERE YEAR  =  \"2008\""
    },
    {
        "db_id": "department_management",
        "question": "至少有3个负责人出生的州的名字是什么？",
        "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  3"
    },
    {
        "db_id": "geo",
        "question": "哪个省的边境是“河南”",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"河南\" ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"河南\" ) );"
    },
    {
        "db_id": "university_basketball",
        "question": "查找以“暨南大学”为队名的学校的位置和所有比赛得分。",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  '暨南大学'",
        "mask_query": "SELECT t2.<unk> ,  t1.location FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  '暨南大学'"
    },
    {
        "db_id": "yelp",
        "question": "找出在“厦门”的“摩洛哥”“餐厅”总访问数",
        "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"厦门\" AND t2.category_name  =  \"餐厅\" AND t3.category_name  =  \"摩洛哥\";",
        "mask_query": "SELECT SUM ( t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"厦门\" AND t2.<unk>  =  \"餐厅\" AND t3.<unk>  =  \"摩洛哥\";"
    },
    {
        "db_id": "yelp",
        "question": "“忆安”写了多少评论？",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"忆安\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"忆安\";"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "名字为“艺术”和姓“王”的客户有多少个账户？",
        "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"艺术\" AND T2.customer_last_name  =  \"王\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"艺术\" AND T2.<unk>  =  \"王\""
    },
    {
        "db_id": "debate",
        "question": "显示35岁或36岁的人的姓名。",
        "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
        "mask_query": "SELECT <unk> FROM  <mask> WHERE <unk>  =  35 OR <unk>  =  36"
    },
    {
        "db_id": "pilot_1",
        "question": "30岁以下飞行员的所有信息是什么？",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "mask_query": "SELECT * FROM <mask> WHERE <unk>  <  30"
    },
    {
        "db_id": "address_1",
        "question": "给出学生最多的州。",
        "query": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "wine_1",
        "question": "找出那些“白”葡萄被用来酿造得分高于90的葡萄酒的葡萄。",
        "query": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"白\" AND T2.score  >  90",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"白\" AND T2.score  >  90"
    },
    {
        "db_id": "inn_1",
        "question": "有多少孩子待在“罗”“锋”预定的房间里？",
        "query": "SELECT kids FROM Reservations WHERE FirstName = \"罗\" AND LastName  =  \"锋\";",
        "mask_query": "SELECT kids FROM <mask> WHERE <unk> = \"罗\" AND <unk>  =  \"锋\";"
    },
    {
        "db_id": "train_station",
        "question": "显示大多数火车站的位置。",
        "query": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT LOCATION FROM <mask> GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "question": "返回按字母顺序排列的城市名称。",
        "query": "SELECT Name FROM city ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "activity_1",
        "question": "不把“独木舟”或“皮划艇”作为活动的“教授”的名字是什么？",
        "query": "SELECT lname FROM faculty WHERE rank  =  \"Professor\" EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  \"独木舟\" OR T3.activity_name  =  \"皮划艇\"",
        "mask_query": "SELECT lname FROM faculty WHERE rank  =  \"Professor\" EXCEPT SELECT DISTINCT T1.lname FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"独木舟\" OR T3.<unk>  =  \"皮划艇\""
    },
    {
        "db_id": "icfp_1",
        "question": "查找作者最多的论文的标题。",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "mask_query": "SELECT t2.<unk> FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "每个房产有多少张照片？",
        "query": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk>;"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "有多少个不同的名字与所有的照片相关？",
        "query": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM PHOTOS"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示每个省和每个省中的地址数量。",
        "query": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county",
        "mask_query": "SELECT <unk> ,  count(*) FROM addresses GROUP BY <unk>"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "至少有两个房产且最多搜索两次的用户的姓氏和ID是什么？",
        "query": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  <=  2 INTERSECT SELECT T3.<unk> ,  T3.<unk> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk> GROUP BY T3.<unk> HAVING count(*)  >=  2;"
    },
    {
        "db_id": "school_player",
        "question": "显示拥有最多球员的学校的教派。",
        "query": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "network_1",
        "question": "哪个年级的学生最多？",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "question": "统计斯坦福大学2000年至2009年间的论文数量。",
        "query": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
        "mask_query": "SELECT count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  >=  2000 AND T1.<unk>  <=  2009 AND T3.<unk> LIKE \"Stanford University\""
    },
    {
        "db_id": "phone_1",
        "question": "找到所有芯片模型的信息。",
        "query": "SELECT * FROM chip_model",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "car_road_race",
        "question": "按字母顺序降序排列的司机的名字是什么？",
        "query": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "poker_player",
        "question": "返回收入最低的扑克玩家的出生日期。",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回给在“数据库”方向引用超过200个的论文。",
        "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"数据库\" AND t3.citation_num  >  200;",
        "mask_query": "SELECT t3.<unk> FROM DOMAIN AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"数据库\" AND t3.<unk>  >  200;"
    },
    {
        "db_id": "hospital_1",
        "question": "每个医生的员工ID和主要附属部门ID是什么。",
        "query": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "mask_query": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1"
    },
    {
        "db_id": "art_1",
        "question": "生命最短的艺术家的年龄是多少？",
        "query": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
        "mask_query": "SELECT <unk> - <unk> FROM artists ORDER BY <unk> - <unk> LIMIT 1"
    },
    {
        "db_id": "entertainment_awards",
        "question": "哪一年“美国”国内和“美国”国外都有艺术节？",
        "query": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  '美国' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != '美国'",
        "mask_query": "SELECT YEAR FROM <mask> WHERE LOCATION  =  '美国' INTERSECT SELECT YEAR FROM <mask> WHERE LOCATION != '美国'"
    },
    {
        "db_id": "aircraft",
        "question": "列出至少赢得两次比赛飞机的名称。",
        "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN MATCH AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "party_host",
        "question": "每个聚会的主持人的平均人数是多少？",
        "query": "SELECT avg(Number_of_hosts) FROM party",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "wedding",
        "question": "显示至少有两个教堂开放的年份。",
        "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2",
        "mask_query": "SELECT open_date FROM <mask> GROUP BY open_date HAVING count(*)  >=  2"
    },
    {
        "db_id": "car_racing",
        "question": "找出车主是“巴迪·阿灵顿”的车队的品牌。",
        "query": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Buddy Arrington\""
    },
    {
        "db_id": "college_1",
        "question": "招生最多的院系名称是什么？",
        "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T4.dept_name FROM <mask> AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "loan_1",
        "question": "找出银行所处的不同城市的数量。",
        "query": "SELECT count(DISTINCT city) FROM bank",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "wine_1",
        "question": "“红”酒酿造的葡萄酒叫什么名字？",
        "query": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"Red\""
    },
    {
        "db_id": "dog_kennels",
        "question": "接受治疗的狗的住院日期和出院日期是什么？",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "book_1",
        "question": "出示包括“傲慢与偏见”和“小王子”在内的订单ID。",
        "query": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
        "mask_query": "SELECT idOrder FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\""
    },
    {
        "db_id": "customers_and_addresses",
        "question": "使用最流行的支付方式的客户姓名是什么？",
        "query": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT <unk> FROM customers WHERE <unk>  =  (SELECT <unk> FROM customers GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找到电子邮件地址中包含“qq”一词的老师的名字。",
        "query": "SELECT first_name FROM Teachers WHERE email_address LIKE 'qq'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE 'qq'"
    },
    {
        "db_id": "tracking_orders",
        "question": "对于每个产品，返回它的ID和它被订购的次数。",
        "query": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "mask_query": "SELECT count(*) ,  T3.<unk> FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.<unk> = T2.<unk> AND T2.<unk> = T3.<unk> GROUP BY T3.<unk>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "显示任何文档都没使用过的所有模板类型代码。",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "mask_query": "SELECT template_type_code FROM <mask> EXCEPT SELECT template_type_code FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "db_id": "hr_1",
        "question": "“2002-06-21”之前雇用的员工的信息是什么？",
        "query": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "mask_query": "SELECT * FROM <mask> WHERE hire_date  <  '2002-06-21'"
    },
    {
        "db_id": "manufactory_1",
        "question": "按收益下降排序，制造商的名称、总部和收益是什么？",
        "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
        "mask_query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC"
    },
    {
        "db_id": "flight_1",
        "question": "显示所有以“海口”为目的地航班的出发地。",
        "query": "SELECT origin FROM Flight WHERE destination  =  \"海口\"",
        "mask_query": "SELECT <unk> FROM Flight WHERE <unk>  =  \"海口\""
    },
    {
        "db_id": "twitter_1",
        "question": "查找没有任何推特的用户的平均追随者数量。",
        "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE UID NOT IN (SELECT UID FROM <mask>)"
    },
    {
        "db_id": "match_season",
        "question": "统计赛季不同球队的数量。",
        "query": "SELECT count(DISTINCT Team) FROM match_season",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "school_finance",
        "question": "显示2002年或之后每所学校的名称、预算金额以及投资金额。",
        "query": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "mask_query": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM <mask> AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002"
    },
    {
        "db_id": "book_1",
        "question": "显示所有图书ISBN和每个图书的订购总量。",
        "query": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
        "mask_query": "SELECT isbn ,  sum(<unk>) FROM <mask> GROUP BY isbn"
    },
    {
        "db_id": "movie_1",
        "question": "找到所有没有评分的电影的标题。",
        "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "mountain_photos",
        "question": "有照片的山的id和名字是什么？",
        "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.height  >  4000"
    },
    {
        "db_id": "game_1",
        "question": "显示所有至少玩1000小时的游戏名称。",
        "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
        "mask_query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000"
    },
    {
        "db_id": "wta_1",
        "question": "在所有比赛中胜利者平均排名是多少？",
        "query": "SELECT avg(winner_rank) FROM matches",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "cinema",
        "question": "每家影院每台DAT的显示次数是多少？",
        "query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
        "mask_query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id"
    },
    {
        "db_id": "geo",
        "question": "人口密度最小的国家的最高点是什么？",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "car_1",
        "question": "在不是最小马力的汽车中，那些少于4个汽缸的汽车制造商的ID和名称是什么？",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  (SELECT min(<unk>) FROM CARS_DATA) AND T1.<unk>  <=  3;"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "按字母顺序列出所有顾客的名字。",
        "query": "SELECT customer_details FROM customers ORDER BY customer_details",
        "mask_query": "SELECT customer_details FROM customers ORDER BY customer_details"
    },
    {
        "db_id": "flight_1",
        "question": "显示所有没有证书的员工ID。",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "mask_query": "SELECT <unk> FROM Employee EXCEPT SELECT <unk> FROM Certificate"
    },
    {
        "db_id": "aan_1",
        "question": "在地址中含有“中国”而且论文发表最多的附属机构的名称是什么？",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> LIKE \"%China%\" GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "baseball_1",
        "question": "哪一队提供最低的平均工资？给我这个队的名字和id。",
        "query": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> ORDER BY avg(T2.<mask>) ASC LIMIT 1;"
    },
    {
        "db_id": "yelp",
        "question": "在“云南”省的所有城市里找出一家名为“海盗船自助餐”的“餐厅”。",
        "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"海盗船自助餐\" AND t1.state  =  \"云南\" AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"海盗船自助餐\" AND t1.<unk>  =  \"云南\" AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "battle_death",
        "question": "按名称的字母顺序降序列出名称和吨位。",
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "allergy_1",
        "question": "显示所有20岁以上的学生ID。",
        "query": "SELECT StuID FROM Student WHERE age  >  20",
        "mask_query": "SELECT <unk> FROM <mask> WHERE age  >  20"
    },
    {
        "db_id": "baseball_1",
        "question": "计算从1990年到2000年“广州恒大队”参加的比赛总数。",
        "query": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = '广州恒大队' AND T1.year BETWEEN 1990 AND 2000;",
        "mask_query": "SELECT sum(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = '广州恒大队' AND T1.<unk> BETWEEN 1990 AND 2000;"
    },
    {
        "db_id": "epinions_1",
        "question": "对于每个用户，返回他们给出的评论的名称和平均评级。",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "mask_query": "SELECT T1.<unk> ,  avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "找出“鼠标”产品的计量单位和产品类别代码。",
        "query": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"鼠标\"",
        "mask_query": "SELECT t2.<unk> ,  t2.<unk> FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"鼠标\""
    },
    {
        "db_id": "country_language",
        "question": "哪个国家使用的官方语言数量最多？",
        "query": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.Name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "与名为“最佳”的集合相关的集合有多少？",
        "query": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
        "mask_query": "SELECT count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> = \"Best\";"
    },
    {
        "db_id": "department_store",
        "question": "找出所有“服装”产品的平均价格。",
        "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  '服装'",
        "mask_query": "SELECT avg(<unk>) FROM products WHERE <unk>  =  '服装'"
    },
    {
        "db_id": "academic",
        "question": "返回每年在“VLDB”会议上发表的论文的数量。",
        "query": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> )  ,  t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" GROUP BY t2.<unk>;"
    },
    {
        "db_id": "tvshow",
        "question": "电视频道表中列出了多少个不同的系列和内容？",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "mask_query": "SELECT count(DISTINCT <unk>) ,  count(DISTINCT content) FROM <mask>;"
    },
    {
        "db_id": "store_1",
        "question": "列出10个最便宜的发票的客户的名字和姓氏。",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> ORDER BY <unk> LIMIT 10;"
    },
    {
        "db_id": "conference",
        "question": "参加人数最多的前两个会议的名称是什么？",
        "query": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
        "mask_query": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2"
    },
    {
        "db_id": "game_1",
        "question": "显示所有“收集卡片”类型的视频游戏。",
        "query": "SELECT gname FROM Video_games WHERE gtype  =  \"收集卡片\"",
        "mask_query": "SELECT gname FROM Video_games WHERE gtype  =  \"收集卡片\""
    },
    {
        "db_id": "performance_attendance",
        "question": "演出的的平均出席人数是多少？",
        "query": "SELECT avg(Attendance) FROM performance",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "restaurants",
        "question": "“丹尼尔”餐厅在“厦门”哪里？",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"厦门\" AND t1.name  =  \"丹尼尔\";",
        "mask_query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN <mask> AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"厦门\" AND t1.name  =  \"丹尼尔\";"
    },
    {
        "db_id": "college_2",
        "question": "“统计”和“心理学”系都列出的课程名称是什么？",
        "query": "SELECT title FROM course WHERE dept_name  =  '统计学' INTERSECT SELECT title FROM course WHERE dept_name  =  '心理学'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '统计学' INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  '心理学'"
    },
    {
        "db_id": "flight_4",
        "question": "“中国”有超过3个机场的城市数量是多少？",
        "query": "SELECT city FROM airports WHERE country  =  \"中国\" GROUP BY city HAVING count(*)  >  3",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国\" GROUP BY <unk> HAVING count(*)  >  3"
    },
    {
        "db_id": "game_injury",
        "question": "查找发生伤害事故最多的体育场的ID和名称。",
        "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "查找不同区域代码的房间数。",
        "query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "mask_query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"
    },
    {
        "db_id": "perpetrator",
        "question": "有多少犯罪者在那里？",
        "query": "SELECT count(*) FROM perpetrator",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "student_1",
        "question": "108号房的学生的名字是什么？",
        "query": "SELECT firstname FROM list WHERE classroom  =  108",
        "mask_query": "SELECT firstname FROM <mask> WHERE classroom  =  108"
    },
    {
        "db_id": "soccer_2",
        "question": "有多少学生从选拔赛中得到了录取的“确定”？",
        "query": "SELECT count(*) FROM tryout WHERE decision  =  '确定'",
        "mask_query": "SELECT count(*) FROM tryout WHERE <unk>  =  '确定'"
    },
    {
        "db_id": "epinions_1",
        "question": "查找评级高于所有项目的平均评级的项目的标题。",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  (SELECT avg(<unk>) FROM <mask>)"
    },
    {
        "db_id": "book_press",
        "question": "计算30岁以下作者的人数。",
        "query": "SELECT count(*) FROM author WHERE age  <  30",
        "mask_query": "SELECT count(*) FROM <mask> WHERE age  <  30"
    },
    {
        "db_id": "art_1",
        "question": "找到制作最少雕塑的艺术家的死亡年份。",
        "query": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM artists AS T1 JOIN sculptures AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "inn_1",
        "question": "按价格排序排列的有一张“大床”的房间的名称和装饰是什么。",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  '大床' ORDER BY basePrice;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE bedtype  =  '大床' ORDER BY <unk>;"
    },
    {
        "db_id": "workshop_paper",
        "question": "显示那些提交分数大于90的作者和提交分数小于80的作者的大学。",
        "query": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  90 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  80"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出没有“现金”支付的客户的名字。",
        "query": "SELECT customer_name FROM customers WHERE payment_method != \"现金\"",
        "mask_query": "SELECT <unk> FROM customers WHERE <unk> != \"现金\""
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示不同投资者的平均交易量。",
        "query": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM TRANSACTIONS GROUP BY <unk>"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "购买金额大于10000的交易详情是什么？",
        "query": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000",
        "mask_query": "SELECT T1.<unk> FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  10000"
    },
    {
        "db_id": "music_4",
        "question": "没有任何专辑的艺术家的著名作品是什么？",
        "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN(SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "advertising_agencies",
        "question": "所有付款的付款ID、发票ID和付款详细信息是什么？",
        "query": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "university_basketball",
        "question": "有哪些不同的附属形式，每种类型在1850年后建立的学校的总招生人数是多少，？",
        "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "mask_query": "SELECT sum(<unk>) ,  affiliation FROM <mask> WHERE founded  >  1850 GROUP BY affiliation"
    },
    {
        "db_id": "hr_1",
        "question": "有至少一名员工的部门名称是什么？",
        "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "mask_query": "SELECT DISTINCT T2.department_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id"
    },
    {
        "db_id": "flight_1",
        "question": "显示前三个最低距离的飞机的名称。",
        "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "mask_query": "SELECT <unk> FROM Aircraft ORDER BY <unk> LIMIT 3"
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示在“小波”管理的建筑物中公寓类型代码和公寓号码。",
        "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"小波\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"小波\""
    },
    {
        "db_id": "pets_1",
        "question": "最年轻的宠物是什么类型的，它的重量是多少？",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "mask_query": "SELECT pettype ,  <unk> FROM pets ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "question": "查找发表论文数量最多的组织机构的名称。",
        "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "election_representative",
        "question": "显示在“上海”州和“湖北”州都有代表的政党。",
        "query": "SELECT Party FROM representative WHERE State  =  \"上海\" INTERSECT SELECT Party FROM representative WHERE State  =  \"湖北\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"上海\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"湖北\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示所有员工ID和每个员工的文档的流程数。",
        "query": "SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM Staff_in_processes GROUP BY <unk>"
    },
    {
        "db_id": "flight_4",
        "question": "按照航空公司数量的降序列出所有国家及其航空公司数量。",
        "query": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "musical",
        "question": "除了“金鸡奖”之外，还有哪些音乐剧的不同提名呢？",
        "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"金鸡奖\"",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk> != \"金鸡奖\""
    },
    {
        "db_id": "ship_mission",
        "question": "对于每种类型，平均吨位是多少？",
        "query": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE",
        "mask_query": "SELECT TYPE ,  avg(<unk>) FROM <mask> GROUP BY TYPE"
    },
    {
        "db_id": "college_2",
        "question": "找到没有任何预备课程的课程名称？",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "dog_kennels",
        "question": "列出每个主人的名字、姓氏和他的狗的大小。",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "conference",
        "question": "会议总数是多少？",
        "query": "SELECT count(*) FROM conference",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "hr_1",
        "question": "包含至少两个员工的部门ID和部门总工资是多少？",
        "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
        "mask_query": "SELECT department_id ,  SUM(salary) FROM <mask> GROUP BY department_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "“1978-06-26”之前报告的问题的ID是什么？",
        "query": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "mask_query": "SELECT <unk> FROM problems WHERE <unk> < \"1978-06-26\""
    },
    {
        "db_id": "region_building",
        "question": "按建筑物竣工年份的降序显示建筑物地址。",
        "query": "SELECT Address FROM building ORDER BY Completed_Year DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "farm",
        "question": "展示举办了不止一次比赛的城市的官方名称。",
        "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "icfp_1",
        "question": "作者“李” “牧”属于哪个机构？给我这个机构的名字。",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"李\" AND t1.lname  =  \"牧\"",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.<unk>  =  \"李\" AND t1.<unk>  =  \"牧\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "哪个类型的组织雇佣了大多数研究人员？",
        "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "“逆战”要多少钱？",
        "query": "SELECT unit_price FROM tracks WHERE name = \"逆战\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"逆战\";"
    },
    {
        "db_id": "department_management",
        "question": "排名在10到15之间的部门的平均雇员人数是多少？",
        "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "mask_query": "SELECT avg(num_employees) FROM <mask> WHERE ranking BETWEEN 10 AND 15"
    },
    {
        "db_id": "aan_1",
        "question": "有多少论文引用了编号为a00-1002的论文？",
        "query": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"A00-1002\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示拥有超过两个浴室的公寓楼的地址。",
        "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  2"
    },
    {
        "db_id": "election_representative",
        "question": "不是“民主党”党人的代表的名字是什么？",
        "query": "SELECT Name FROM Representative WHERE Party != \"民主党\"",
        "mask_query": "SELECT <unk> FROM Representative WHERE <unk> != \"民主党\""
    },
    {
        "db_id": "planet_1",
        "question": "货物总重量大于30的运输工具的名字是什么？",
        "query": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
        "mask_query": "SELECT T3.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T2.<mask> = T3.<unk> GROUP BY T2.<mask> HAVING sum(T1.<unk>)  >  30;"
    },
    {
        "db_id": "geo",
        "question": "“浙江”的主要湖泊名称",
        "query": "SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  \"浙江\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  750 AND <unk>  =  \"浙江\";"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "列出产品“茴香”的所有特征名称和数据类型。",
        "query": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"茴香\"",
        "mask_query": "SELECT t3.<unk> ,  t3.<unk> FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"茴香\""
    },
    {
        "db_id": "sports_competition",
        "question": "所有俱乐部的银牌的最大和最小数量是多少？",
        "query": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "flight_company",
        "question": "列出所有按高度排序的航班的车辆航班号、日期和飞行员。",
        "query": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC",
        "mask_query": "SELECT vehicle_flight_number ,  date ,  pilot FROM <mask> ORDER BY altitude ASC"
    },
    {
        "db_id": "inn_1",
        "question": "这家旅店的房间总数是多少？",
        "query": "SELECT count(*) FROM Rooms;",
        "mask_query": "SELECT count(*) FROM <mask>;"
    },
    {
        "db_id": "party_people",
        "question": "哪位部长最近离职？",
        "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "mask_query": "SELECT minister FROM <mask> ORDER BY left_office DESC LIMIT 1"
    },
    {
        "db_id": "cinema",
        "question": "哪些地方有2个或更多容量超过300的电影院？",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2"
    },
    {
        "db_id": "journal_committee",
        "question": "列出没有任何编辑在委员会任职的杂志的日期、主题和销售情况。",
        "query": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID",
        "mask_query": "SELECT date ,  theme ,  sales FROM <mask> EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.journal_ID  =  T2.journal_ID"
    },
    {
        "db_id": "soccer_1",
        "question": "右脚球员和左脚球员的平均得分是多少？",
        "query": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "movie_2",
        "question": "有多少不同的电影在上映？",
        "query": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "mask_query": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "bbc_channels",
        "question": "查找每个频道的节目数。同时返回每个频道的名称。",
        "query": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id",
        "mask_query": "SELECT t1.name ,  count(*) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id"
    },
    {
        "db_id": "store_1",
        "question": "摇滚乐或爵士乐歌曲的名字是什么？",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"摇滚\" OR T1.name = \"爵士\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"摇滚\" OR T1.<unk> = \"爵士\""
    },
    {
        "db_id": "bakery_1",
        "question": "所有购买苹果派或顾客id是12的收据是多少？",
        "query": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
        "mask_query": "SELECT T1.receipt FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT <unk> FROM <mask> WHERE <unk>  =  12"
    },
    {
        "db_id": "dorm_1",
        "question": "20岁以上的学生的名字是什么？",
        "query": "SELECT fname FROM student WHERE age  >  20",
        "mask_query": "SELECT fname FROM student WHERE age  >  20"
    },
    {
        "db_id": "yelp",
        "question": "“成都”“中心区”有多少家“餐厅”？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"成都\" AND t3.category_name  =  \"餐厅\" AND t2.neighbourhood_name  =  \"中心区\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"成都\" AND t3.<unk>  =  \"餐厅\" AND t2.<unk>  =  \"中心区\";"
    },
    {
        "db_id": "bike_1",
        "question": "哪些日子的平均海平面气压在30.3到31之间？",
        "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> BETWEEN 30.3 AND 31"
    },
    {
        "db_id": "geo",
        "question": "哪些省与人口最多的省接壤？",
        "query": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示状态为“工作”的发票的所有付款ID和详细信息。",
        "query": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'Working'"
    },
    {
        "db_id": "wta_1",
        "question": "按出生日期顺序列出所有球员的名字和姓氏。",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪些资产没有产生任何故障记录？列出资产模型。",
        "query": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "farm",
        "question": "每个城市的状态和平均人口是多少？",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "wta_1",
        "question": "找出比赛数量最多的一年。",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT YEAR FROM <mask> GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "question": "找出不在芝加哥仓库存储的箱子的总价值。",
        "query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
        "mask_query": "SELECT sum(T1.value) FROM boxes AS T1 JOIN <mask> AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'"
    },
    {
        "db_id": "concert_singer",
        "question": "列出高于平均年龄的歌手的所有歌名。",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "mask_query": "SELECT song_name FROM <mask> WHERE age  >  (SELECT avg(age) FROM <mask>)"
    },
    {
        "db_id": "geo",
        "question": "“湖北”省主要河流经的省内主要城市有哪些？",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"湖北\" ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150000 AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE LENGTH  >  750 AND <unk>  =  \"湖北\" ) );"
    },
    {
        "db_id": "apartment_rentals",
        "question": "哪种公寓类型的代码出现次数最多？",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“迈克尔·阿姆斯特朗在”90年代写了什么论文？",
        "query": "SELECT DISTINCT t3.year  ,  t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"迈克尔·阿姆斯特朗在\" AND t3.year LIKE \"%199%\";",
        "mask_query": "SELECT DISTINCT t3.<unk>  ,  t2.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"迈克尔·阿姆斯特朗在\" AND t3.<unk> LIKE \"%199%\";"
    },
    {
        "db_id": "gymnast",
        "question": "以总分递减顺序显示体操运动员的年龄。",
        "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC"
    },
    {
        "db_id": "network_1",
        "question": "统计高中生的人数。",
        "query": "SELECT count(*) FROM Highschooler",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "少于3个文档的文档类型代码是什么？",
        "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
        "mask_query": "SELECT document_type_code FROM <mask> GROUP BY document_type_code HAVING count(*)  <  3"
    },
    {
        "db_id": "driving_school",
        "question": "有多少员工名字是 “天宇” ？",
        "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"Ludie\";"
    },
    {
        "db_id": "loan_1",
        "question": "找到客户数量最多的银行支行名称。",
        "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "销售总额最高的前10位客户的姓氏和名字是什么？销售量是多少？",
        "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  SUM(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> ORDER BY SUM(T2.<unk>) DESC LIMIT 10;"
    },
    {
        "db_id": "aan_1",
        "question": "2009年在NAACL和ACL上发表过论文的作者的名字是什么？",
        "query": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"ACL\" AND T2.<unk>  =  2009 INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"NAACL\" AND T2.<unk>  =  2009)"
    },
    {
        "db_id": "tracking_orders",
        "question": "哪些客户同时拥有“在路上”和“装运”作为订单状态？列出客户ID。",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"在路上\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"装运\"",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"在路上\" INTERSECT SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"装运\""
    },
    {
        "db_id": "scholar",
        "question": "ImageNet的作者",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;",
        "mask_query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN <mask> AS t1 ON t3.datasetid  =  t1.datasetid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;"
    },
    {
        "db_id": "pilot_1",
        "question": "找出每种类型的飞机数。",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
        "mask_query": "SELECT count(*) ,  <unk> FROM pilotskills GROUP BY <unk>"
    },
    {
        "db_id": "network_2",
        "question": "年龄在30岁以下的人叫什么名字？",
        "query": "SELECT name FROM Person WHERE age  <  30",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  30"
    },
    {
        "db_id": "bike_1",
        "question": "前3的持续时间的路线的ID和持续时间是什么？",
        "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "movie_1",
        "question": "2000年以后制作或是由“韦浩”评论的电影的名字是什么？",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  '韦浩' OR T2.year  >  2000",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '韦浩' OR T2.<unk>  >  2000"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "被文档使用次数最多的模板的ID和类型代码是什么？",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.template_id ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "每个交易类型的总交易金额是多少？",
        "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
        "mask_query": "SELECT <unk> ,  sum(<unk>) FROM Financial_transactions GROUP BY <unk>"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "返回不同房间大小的数目。",
        "query": "SELECT count(DISTINCT room_size) FROM Rooms;",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>;"
    },
    {
        "db_id": "wine_1",
        "question": "找出所有价格高于“长城葡萄酒厂”的葡萄酒的不同名称。",
        "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"长城葡萄酒厂\")",
        "mask_query": "SELECT DISTINCT <unk> FROM WINE WHERE <unk>  >  (SELECT min(<unk>) FROM <mask> WHERE <unk>  =  \"长城葡萄酒厂\")"
    },
    {
        "db_id": "driving_school",
        "question": "所有员工的名字、中间名和姓氏是什么？",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>;"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "查找与客户“李帅”相关联的所有保险单类型代码。",
        "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"李帅\"",
        "mask_query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"李帅\""
    },
    {
        "db_id": "culture_company",
        "question": "2000年或以前全球总票房最高的电影的片名和导演是什么？",
        "query": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "mask_query": "SELECT title ,  director FROM <mask> WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "显示40岁以上和30岁以下的歌手所来自的国家。",
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "mask_query": "SELECT country FROM <mask> WHERE age  >  40 INTERSECT SELECT country FROM <mask> WHERE age  <  30"
    },
    {
        "db_id": "manufactory_1",
        "question": "所有的产品数据，以及每个产品的制造商是什么？",
        "query": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "mask_query": "SELECT * FROM products AS T1 JOIN <mask> AS T2 ON T1.manufacturer  =  T2.code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "哪个学生上的课最多？给我学生的id和他或她正在上的课程的数量。",
        "query": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "question": "查找“计算机”系所有讲师姓名。",
        "query": "SELECT name FROM instructor WHERE dept_name  =  '计算机科学'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '计算机科学'"
    },
    {
        "db_id": "scholar",
        "question": "自2009以来“诺亚·史密斯”共同参与创作了多少篇论文？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"诺亚·史密斯\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"%诺亚·史密斯%\" );",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"诺亚·史密斯\" AND t3.<unk>  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"%诺亚·史密斯%\" );"
    },
    {
        "db_id": "vehicle_driver",
        "question": "统计一下驾驶过2012年生产的车辆的不同司机的数量。",
        "query": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
        "mask_query": "SELECT count(DISTINCT T1.driver_id) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012"
    },
    {
        "db_id": "ship_mission",
        "question": "不参与任何任务的船只的名称是什么？",
        "query": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "activity_1",
        "question": "显示“马”“文杰”参与的所有活动的名称。",
        "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"文杰\" AND T1.lname  =  \"马\"",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T1.fname  =  \"文杰\" AND T1.lname  =  \"马\""
    },
    {
        "db_id": "advertising_agencies",
        "question": "列出所有会议类型代码和详细信息。",
        "query": "SELECT meeting_type ,  other_details FROM meetings",
        "mask_query": "SELECT <unk> ,  <unk> FROM meetings"
    },
    {
        "db_id": "college_1",
        "question": "找到只上一门课的学生的名字。",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1",
        "mask_query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1"
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”会议中包含关键字“关键词搜索”的文件。",
        "query": "SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"关键词搜索\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t4.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\" AND t1.<mask>  =  \"关键词搜索\";"
    },
    {
        "db_id": "product_catalog",
        "question": "查找具有最多条目的属性所属的目录的条目名称。",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  (SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "geo",
        "question": "最大省的省会人口是多少？",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "country_language",
        "question": "数一数语言的数目。",
        "query": "SELECT count(*) FROM languages",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "icfp_1",
        "question": "哪些作者的名字是“小鹏”？列出他们的姓。",
        "query": "SELECT lname FROM authors WHERE fname  =  \"小鹏\"",
        "mask_query": "SELECT <unk> FROM authors WHERE <unk>  =  \"小鹏\""
    },
    {
        "db_id": "cre_Theme_park",
        "question": "价格从低到高进行排序显示每个酒店的ID和星级。",
        "query": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "mask_query": "SELECT <unk> ,  <unk> FROM HOTELS ORDER BY <unk> ASC"
    },
    {
        "db_id": "geo",
        "question": "有几条河叫“大靖河”",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"大靖河\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  \"大靖河\";"
    },
    {
        "db_id": "race_track",
        "question": "返回所有轨道上的最小、最大和平均座椅数。",
        "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
        "mask_query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM <mask>"
    },
    {
        "db_id": "orchestra",
        "question": "计算以“CD”或“DVD”作为记录格式的管弦乐队的数量。",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "mask_query": "SELECT COUNT(*) FROM <mask> WHERE <unk>  =  \"CD\" OR <unk>  =  \"DVD\""
    },
    {
        "db_id": "storm_record",
        "question": "显示所有最大速度超过1000的风暴的平均和最大损害。",
        "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "mask_query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM <mask> WHERE max_speed  >  1000"
    },
    {
        "db_id": "flight_2",
        "question": "有多少航班从“长沙”出发？",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"长沙\"",
        "mask_query": "SELECT count(*) FROM FLIGHTS WHERE <unk>  =  \"长沙\""
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "名为很棒的集合的父集合的名称是什么？",
        "query": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"Nice\";"
    },
    {
        "db_id": "insurance_policies",
        "question": "哪些索赔造成超过2次转让或拥有最高的索赔额？列出索赔的日期和索赔ID。",
        "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
        "mask_query": "SELECT T1.<unk> ,  T1.Claim_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.<unk> ,  T1.Claim_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.<unk>  =  ( SELECT max(<unk>) FROM <mask> )"
    },
    {
        "db_id": "chinook_1",
        "question": "所有歌曲的平均单价是多少？",
        "query": "SELECT AVG(UnitPrice) FROM TRACK",
        "mask_query": "SELECT AVG(<unk>) FROM TRACK"
    },
    {
        "db_id": "bike_1",
        "question": "对于每一个邮政编码地区，多少次最大风速达到25英里每小时？",
        "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "mask_query": "SELECT <unk> , count(*) FROM <mask> WHERE <unk>  >=  25 GROUP BY <unk>"
    },
    {
        "db_id": "world_1",
        "question": "计算以讲“西班牙语”为主的国家的数目。",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"西班牙语\" GROUP BY CountryCode",
        "mask_query": "SELECT count(*) ,   max(<unk>) FROM <mask> WHERE LANGUAGE  =  \"西班牙语\" GROUP BY <unk>"
    },
    {
        "db_id": "driving_school",
        "question": "客户“钟”“诚”的邮政编码是什么？",
        "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"诚\" AND T1.last_name = \"钟\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"诚\" AND T1.<unk> = \"钟\""
    },
    {
        "db_id": "university_rank",
        "question": "伊利诺伊州或俄亥俄州的大学总数是多少？",
        "query": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
        "mask_query": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'"
    },
    {
        "db_id": "architecture",
        "question": "不在“长沙”的工厂的名字是什么？",
        "query": "SELECT name FROM mill WHERE LOCATION != \"长沙\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LOCATION != \"长沙\""
    },
    {
        "db_id": "formula_1",
        "question": "找出2014到2017年间所有比赛的不同名称。",
        "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE YEAR BETWEEN 2014 AND 2017"
    },
    {
        "db_id": "movie_1",
        "question": "找出收到至少2次评论的每部电影的平均评级是多少。",
        "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "school_finance",
        "question": "列出数额最大的捐赠数和捐赠者的姓名。",
        "query": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "voter_2",
        "question": "显示居住城市代码是“武汉”的城市的学生的导师。",
        "query": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"武汉\"",
        "mask_query": "SELECT <unk> FROM STUDENT WHERE <unk>  =  \"武汉\""
    },
    {
        "db_id": "bike_1",
        "question": "平均海平面气压最低的地区的邮编是多少？",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY avg(<unk>) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "question": "最便宜的订单是什么？值多少钱？",
        "query": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  sum(T2.<unk>) FROM Order_items AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY sum(T2.<unk>) ASC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "找出所有花费超过1000英镑的手术或是医师“文翰”执行的手术。",
        "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\"",
        "mask_query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "列出所有项目的成果描述。",
        "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
        "mask_query": "SELECT T1.<unk> FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "chinook_1",
        "question": "查找与名为“卢”姓为“军”的客户相对应的所有发票日期。",
        "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"卢\" AND LastName  =  \"军\"",
        "mask_query": "SELECT T2.<unk> FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"卢\" AND <unk>  =  \"军\""
    },
    {
        "db_id": "college_2",
        "question": "哪个学期和年份的学生最少？",
        "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> ,  YEAR FROM <mask> GROUP BY <unk> ,  YEAR ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "使用支付方式为“现金”的客户姓名是什么？",
        "query": "SELECT customer_name FROM customers WHERE payment_method  =  \"现金\"",
        "mask_query": "SELECT <unk> FROM customers WHERE <unk>  =  \"现金\""
    },
    {
        "db_id": "boat_1",
        "question": "找出每艘水手的ID大于1的船的预订数量。",
        "query": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> WHERE <unk>  >  1 GROUP BY <unk>"
    },
    {
        "db_id": "assets_maintenance",
        "question": "所有不同的资产模型是什么？",
        "query": "SELECT DISTINCT asset_model FROM Assets",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "city_record",
        "question": "给我一张3月份气温低于7月份且也曾作为主办城市的城市名单。",
        "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "mask_query": "SELECT T1.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id  =  T2.city_id WHERE T2.<unk>  <  T2.<unk> INTERSECT SELECT T3.<mask> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.city_id  =  T4.host_city"
    },
    {
        "db_id": "railway",
        "question": "展示那些既有50岁以上经理又有46岁以下经理的国家。",
        "query": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  50 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  46"
    },
    {
        "db_id": "academic",
        "question": "把包含“自然语言”关键词的论文返回。",
        "query": "SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"自然语言\";",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"自然语言\";"
    },
    {
        "db_id": "scholar",
        "question": "2010在“SigCSE”有多少作者发表了论文？",
        "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"SigCSE\";",
        "mask_query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.venueid  =  t2.venueid JOIN <mask> AS t1 ON t1.paperid  =  t2.paperid WHERE t2.<unk>  =  2010 AND t3.venuename  =  \"SigCSE\";"
    },
    {
        "db_id": "college_3",
        "question": "所有注册学生的全名和分数是什么？",
        "query": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "mask_query": "SELECT T3.<unk> ,  T3.<unk> ,  T2.<unk> FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.<unk>  =  T2.<unk> AND T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "address_1",
        "question": "显示所有州和每个州的城市数。",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "manufactory_1",
        "question": "收益在100到150之间的公司名称是什么？",
        "query": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150",
        "mask_query": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150"
    },
    {
        "db_id": "ship_1",
        "question": "按建造年份和类别的顺序列出所有船的名字是什么？",
        "query": "SELECT name FROM ship ORDER BY built_year ,  CLASS",
        "mask_query": "SELECT name FROM ship ORDER BY built_year ,  CLASS"
    },
    {
        "db_id": "climbing",
        "question": "列出没有登山者的山的名字。",
        "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "entrepreneur",
        "question": "按重量排序上升返回的人的姓名。",
        "query": "SELECT Name FROM People ORDER BY Weight ASC",
        "mask_query": "SELECT <unk> FROM People ORDER BY <unk> ASC"
    },
    {
        "db_id": "movie_1",
        "question": "没有给4星级评论的所有评价者的ID是什么？",
        "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask> WHERE <unk>  =  4"
    },
    {
        "db_id": "loan_1",
        "question": "查找提供“商业”贷款的银行分行的名称和所在的城市名称。",
        "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  '商业'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.<unk>  =  '商业'"
    },
    {
        "db_id": "world_1",
        "question": "哪些“亚洲”国家的人口比“非洲”任何一个国家都多？",
        "query": "SELECT Name FROM country WHERE Continent  =  \"亚洲\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"非洲\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"亚洲\"  AND population  >  (SELECT max(population) FROM <mask> WHERE <unk>  =  \"非洲\")"
    },
    {
        "db_id": "music_2",
        "question": "找出名字是“俊杰”的音乐家的所有舞台位置",
        "query": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"俊杰\"",
        "mask_query": "SELECT DISTINCT T1.stageposition FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id WHERE <unk>  =  \"俊杰\""
    },
    {
        "db_id": "flight_2",
        "question": "有多少“南方航空”航空公司的航班飞往“哈尔滨”？",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"哈尔滨\" AND T3.Airline  =  \"南方航空\"",
        "mask_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.<unk>  =  T2.<unk> JOIN AIRLINES AS T3 ON T3.<unk>  =  T1.<unk> WHERE T2.<unk>  =  \"哈尔滨\" AND T3.<unk>  =  \"南方航空\""
    },
    {
        "db_id": "bike_1",
        "question": "“长沙”市车站平均纬度和经度是多少？",
        "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"长沙\"",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) FROM <mask> WHERE <unk>  =  \"长沙\""
    },
    {
        "db_id": "gas_company",
        "question": "显示所有总部不是来自美国的公司名称和主要行业。",
        "query": "SELECT company ,  main_industry FROM company WHERE headquarters != '美国'",
        "mask_query": "SELECT <mask> ,  main_industry FROM <mask> WHERE headquarters != '美国'"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示不同交易类型的最大和最小份额数。",
        "query": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "mask_query": "SELECT <unk> ,  max(<unk>) ,  min(<unk>) FROM TRANSACTIONS GROUP BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "返回给我在2005年“PVLDB”论文论文的总引用。",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005;",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" AND t2.<unk>  =  2005;"
    },
    {
        "db_id": "party_people",
        "question": "计算区域的数量。",
        "query": "SELECT count(*) FROM region",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "art_1",
        "question": "请给出既创作过绘画又创作过雕塑的艺术家的全名。",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM artists AS T1 JOIN sculptures AS T2 ON T1.<unk>  =  T2.<unk> INTERSECT SELECT T3.<unk> ,  T3.<unk> FROM artists AS T3 JOIN paintings AS T4 ON T3.<unk>  =  T4.<unk>"
    },
    {
        "db_id": "imdb",
        "question": "谁是2013年度电视剧“还珠格格”的导演？",
        "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"还珠格格\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t3.<unk>  =  2013 AND t3.<unk>  =  \"还珠格格\";"
    },
    {
        "db_id": "railway",
        "question": "列车的名称和到达时间是多少？",
        "query": "SELECT Name ,  Arrival FROM train",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "club_1",
        "question": "计算名为“代” “兵”的学生参加俱乐部的会员数量。",
        "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"代\" AND t3.lname  =  \"兵\"",
        "mask_query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"代\" AND t3.lname  =  \"兵\""
    },
    {
        "db_id": "college_3",
        "question": "1学分的课程名称是什么？",
        "query": "SELECT CName FROM COURSE WHERE Credits  =  1",
        "mask_query": "SELECT <unk> FROM COURSE WHERE <unk>  =  1"
    },
    {
        "db_id": "student_assessment",
        "question": "有多少学生参加英语课程？",
        "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"英语\"",
        "mask_query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"英语\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "员工最常见的角色是那个？",
        "query": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "video_game",
        "question": "年度排名小于3的人数有多少？",
        "query": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  <=  3"
    },
    {
        "db_id": "formula_1",
        "question": "单圈时间有两次排名第一的司机的ID、名字和姓氏是什么？",
        "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.driverid ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    {
        "db_id": "dog_kennels",
        "question": "哪一个主人为他们的狗支付了最多的钱？显示主人的ID和邮政编码。",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk> ORDER BY sum(T3.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "2010年后“李安”导演了多少部电影？",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"李安\" AND t3.release_year  >  2010;",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk>  ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李安\" AND t3.<unk>  >  2010;"
    },
    {
        "db_id": "poker_player",
        "question": "返回所有扑克玩家的名字。",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "哪位员工在评审中获得最多奖项？给我员工的名字。",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "在音乐节上，超过两周登顶的专辑典礼日期是什么？",
        "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  2"
    },
    {
        "db_id": "scholar",
        "question": "“马克斯·蒂德曼”发表的论文中有多少个合著者？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"马克斯·蒂德曼\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"马克斯·蒂德曼\" );",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"马克斯·蒂德曼\" AND t2.paperid IN ( SELECT t2.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"马克斯·蒂德曼\" );"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "总共有多少个索赔处理阶段？",
        "query": "SELECT count(*) FROM claims_processing_stages",
        "mask_query": "SELECT count(*) FROM claims_processing_stages"
    },
    {
        "db_id": "apartment_rentals",
        "question": "有多余四间卧室的公寓的设施代码是什么？",
        "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  4"
    },
    {
        "db_id": "formula_1",
        "question": "在ID841比赛中，找出所有车手停站时间比一些车手的停站时间长的不同的车手ID？",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",
        "mask_query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE <unk>  >  (SELECT min(<unk>) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "有多少处建筑物？",
        "query": "SELECT count(*) FROM premises",
        "mask_query": "SELECT count(*) FROM premises"
    },
    {
        "db_id": "csu_1",
        "question": "找出“湖南大学”2000年度的学费。",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"湖南大学\" AND t1.year  =  2000",
        "mask_query": "SELECT t1.campusfee FROM <mask> AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"湖南大学\" AND t1.year  =  2000"
    },
    {
        "db_id": "hospital_1",
        "question": "哪个部门员工的人数最多？",
        "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
        "mask_query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "对于具有“温暖”特性的产品，有哪些不同的产品名称？",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"温暖\"",
        "mask_query": "SELECT DISTINCT t1.<unk> FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"温暖\""
    },
    {
        "db_id": "activity_1",
        "question": "拥有最多学生的教师的名字和姓氏是什么？",
        "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.fname ,  T1.lname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.advisor GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "school_player",
        "question": "学校创办年降序排列的学校名单是什么？",
        "query": "SELECT LOCATION FROM school ORDER BY Founded DESC",
        "mask_query": "SELECT LOCATION FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "baseball_1",
        "question": "每年参加国内比赛的平均人数是多少？",
        "query": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
        "mask_query": "SELECT YEAR ,  avg(<unk>) FROM <mask> GROUP BY YEAR;"
    },
    {
        "db_id": "company_office",
        "question": "总部设在“中国”的公司和总部设在“中国”的公司所共有的行业是那些？",
        "query": "SELECT Industry FROM Companies WHERE Headquarters  =  \"中国\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"中国\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "ID为0的文档的流程结果描述和流程状态描述是什么？",
        "query": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T1.<unk>  =  0"
    },
    {
        "db_id": "world_1",
        "question": "给出“亚洲”或“欧洲”国家覆盖的总表面积。",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"亚洲\" OR Continent  =  \"欧洲\"",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  \"亚洲\" OR <unk>  =  \"欧洲\""
    },
    {
        "db_id": "twitter_1",
        "question": "返回关于“实习”主题的推文。",
        "query": "SELECT text FROM tweets WHERE text LIKE '实习'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '实习'"
    },
    {
        "db_id": "election",
        "question": "谁是与第1区的代表有关的政党的理事？",
        "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  1"
    },
    {
        "db_id": "video_game",
        "question": "显示所有不同的游戏专营店。",
        "query": "SELECT DISTINCT Franchise FROM game",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "至少有2个课程的成绩单的日期和id是什么？",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "apartment_rentals",
        "question": "平均客房数量前三的公寓类型是什么？",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY avg(<unk>) DESC LIMIT 3"
    },
    {
        "db_id": "bike_racing",
        "question": "显示没有购买任何赛车的骑车人的姓名、国家和成绩。",
        "query": "SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id",
        "mask_query": "SELECT <unk> ,  <unk> ,  RESULT FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "allergy_1",
        "question": "显示所有年龄和对应学生的数量。",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "mask_query": "SELECT age ,  count(*) FROM <mask> GROUP BY age"
    },
    {
        "db_id": "yelp",
        "question": "查找“餐厅”“喜茶”每天的平均访问数量",
        "query": "SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"喜茶\" AND t2.category_name  =  \"餐厅\" GROUP BY t3.day;",
        "mask_query": "SELECT AVG ( t3.<unk> )  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"喜茶\" AND t2.<unk>  =  \"餐厅\" GROUP BY t3.<unk>;"
    },
    {
        "db_id": "address_1",
        "question": "距离小于1000的城市对应的城市代码是什么？",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  <  1000"
    },
    {
        "db_id": "customer_deliveries",
        "question": "查找订购次数最多的产品的名称和价格。",
        "query": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> ,   t1.<unk> FROM products AS t1 JOIN regular_order_products AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "question": "演员最流行的名字是什么？",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "事件类型代码为“噪音”的事件的开始和结束日期是什么？",
        "query": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"噪音\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"噪音\""
    },
    {
        "db_id": "music_4",
        "question": "返回23岁或更年轻的艺术家专辑的发行日期。",
        "query": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.age  <=  23"
    },
    {
        "db_id": "wine_1",
        "question": "找出生产分数高于90且生产最多的葡萄酒的县。",
        "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  90 GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_orders",
        "question": "找出同时具有“在路上”和“装运”订单状态的客户的名字。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"在路上\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"装运\"",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"在路上\" INTERSECT SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"装运\""
    },
    {
        "db_id": "soccer_1",
        "question": "总得分前3名的球员都是谁？",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出叫“张颖”的游客但 “李强” 没去的旅游景点的名字。",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"李强\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"张颖\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.<unk>  =  T3.<unk> AND T2.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"李强\" EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.<unk>  =  T3.<unk> AND T2.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"张颖\""
    },
    {
        "db_id": "college_2",
        "question": "查找工资低于“物理”系讲师平均工资的讲师的姓名和薪水。",
        "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  '屋里')",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  <  (SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  '屋里')"
    },
    {
        "db_id": "network_2",
        "question": "谁是“张波”的朋友？",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  '张波'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '张波'"
    },
    {
        "db_id": "election",
        "question": "找出州长名字为“张梁”的不同年份。",
        "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"张梁\"",
        "mask_query": "SELECT DISTINCT YEAR FROM <mask> WHERE <unk>  =  \"张梁\""
    },
    {
        "db_id": "flight_1",
        "question": "从“上海”来的所有航班的号码是多少？",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"上海\"",
        "mask_query": "SELECT <unk> FROM Flight WHERE <unk>  =  \"上海\""
    },
    {
        "db_id": "flight_1",
        "question": "对于每一个出发地，有多少航班来自那里？",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "mask_query": "SELECT <unk> ,  count(*) FROM Flight GROUP BY <unk>"
    },
    {
        "db_id": "party_people",
        "question": "按离任的时间，显示部长们的上任和离任的时间。",
        "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
        "mask_query": "SELECT minister ,  took_office ,  left_office FROM <mask> ORDER BY left_office"
    },
    {
        "db_id": "race_track",
        "question": "返回最近一年开通的轨道的名称、位置和座位数。",
        "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "mask_query": "SELECT name ,  LOCATION ,  seating FROM <mask> ORDER BY year_opened DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“卢克·泽特莫耶尔”的论文是什么时候出版的？",
        "query": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"卢克·泽特莫耶尔\" ORDER BY t3.year;",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"卢克·泽特莫耶尔\" ORDER BY t3.<unk>;"
    },
    {
        "db_id": "party_people",
        "question": "显示所有的政党名称及其地区名称。",
        "query": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id",
        "mask_query": "SELECT T1.party_name ,  T2.region_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.region_id  =  T2.region_id"
    },
    {
        "db_id": "restaurant_1",
        "question": "1121导师有多少学生？",
        "query": "SELECT count(*) FROM Student WHERE Advisor =  1121;",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> =  1121;"
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示所有公寓预订的开始日期和结束日期。",
        "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "twitter_1",
        "question": "查找有一些推文的用户的平均追随者数量。",
        "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE UID IN (SELECT UID FROM <mask>)"
    },
    {
        "db_id": "concert_singer",
        "question": "有多少演唱会在2014或2015年？",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "mask_query": "SELECT count(*) FROM <mask> WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "db_id": "flight_4",
        "question": "以“首都国际机场”为的终点路线是多少？",
        "query": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  \"首都国际机场\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"首都国际机场\""
    },
    {
        "db_id": "car_1",
        "question": "每年汽车的平均重量是多少？",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "mask_query": "SELECT avg(<unk>) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "db_id": "dog_kennels",
        "question": "所有狗的住院日期和出院日期是什么？",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "flight_1",
        "question": "显示价格高于300的航班的出发地和目的地。",
        "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "mask_query": "SELECT <unk> ,  <unk> FROM Flight WHERE <unk>  >  300"
    },
    {
        "db_id": "address_1",
        "question": "显示所有城市代码以及到所有其他城市的总距离。",
        "query": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
        "mask_query": "SELECT <unk> ,  sum(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "student_1",
        "question": "找出在110教室教课的所有老师的名字。",
        "query": "SELECT firstname FROM teachers WHERE classroom  =  110",
        "mask_query": "SELECT firstname FROM <mask> WHERE classroom  =  110"
    },
    {
        "db_id": "activity_1",
        "question": "哪些活动是教职工最多参加的活动？查出活动名称。",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "question": "柏拉图写的书的书名是什么？这本书的价格比所有书的平均售价都低。",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
        "mask_query": "SELECT T1.title FROM <mask> AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN <mask> AS T3 ON T2.<mask>  =  T3.<unk> WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM <mask>)"
    },
    {
        "db_id": "coffee_shop",
        "question": "有多少会员不住在“金华”？",
        "query": "SELECT count(*) FROM member WHERE address != '金华'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE address != '金华'"
    },
    {
        "db_id": "car_1",
        "question": "3缸车型的最大马力是多少？是什么牌子的？",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "mask_query": "SELECT T2.horsepower ,  T1.<unk> FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "如果交易类型代码大于0，则显示不同投资者的交易编码为“销售中”的交易数量。",
        "query": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"销售中\" GROUP BY investor_id",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM TRANSACTIONS WHERE <unk>  =  \"销售中\" GROUP BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "“海底捞”附近的“餐馆”是什么？",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"海底捞\" AND t3.category_name  =  \"餐馆\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"海底捞\" AND t3.<unk>  =  \"餐馆\";"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示没有授权销毁任何文档的雇员的ID。",
        "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "mask_query": "SELECT employee_id FROM <mask> EXCEPT SELECT <unk> FROM Documents_to_be_destroyed"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "有多少文档的状态代码是完成状态？",
        "query": "SELECT count(*) FROM Documents WHERE document_status_code = \"完结\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"完结\";"
    },
    {
        "db_id": "culture_company",
        "question": "显示所有在1999年或2000年有电影的导演的名字。",
        "query": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000",
        "mask_query": "SELECT director FROM <mask> WHERE YEAR  =  1999 OR YEAR  =  2000"
    },
    {
        "db_id": "county_public_safety",
        "question": "显示人口超过20000的省的城市数量。",
        "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE county_ID IN (SELECT county_ID FROM <mask> WHERE population  >  20000)"
    },
    {
        "db_id": "warehouse_1",
        "question": "找到所有储存在纽约的不同存储物。",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "mask_query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "发布多少成绩单？",
        "query": "SELECT count(*) FROM Transcripts",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "给“数学”系的学生提供指导的老师的姓名和薪水是多少？",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  '数学'",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.i_id  =  T2.id JOIN <mask> AS T3 ON T1.s_id  =  T3.id WHERE T3.<unk>  =  '数学'"
    },
    {
        "db_id": "manufactory_1",
        "question": "每个总部城市收益最高的公司的名称及其收益是多少？",
        "query": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "mask_query": "SELECT name ,  max(revenue) ,  <unk> FROM manufacturers GROUP BY <unk>"
    },
    {
        "db_id": "store_1",
        "question": "列出属于摇滚风格或媒体类型是MPEG音频文件的曲目名称。",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"摇滚\" OR T3.name = \"MPEG\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T3.<unk> = T2.<unk> WHERE T1.<unk> = \"摇滚\" OR T3.<unk> = \"MPEG\";"
    },
    {
        "db_id": "mountain_photos",
        "question": "找出按最大光圈的降序排列的每个相机镜头的品牌和名称。",
        "query": "SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "geo",
        "question": "有多少省有主要河流？",
        "query": "SELECT COUNT ( traverse ) FROM river WHERE LENGTH  >  750;",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE LENGTH  >  750;"
    },
    {
        "db_id": "storm_record",
        "question": "对于最大速度高于平均速度的风暴，返回总死亡人数和以百万计的总损失。",
        "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
        "mask_query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM <mask> WHERE max_speed  >  (SELECT avg(max_speed) FROM <mask>)"
    },
    {
        "db_id": "car_road_race",
        "question": "返回杆位不是“初级闸门”的赢得比赛的车手。",
        "query": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != 'Junior Strous'"
    },
    {
        "db_id": "swimming",
        "question": "找出容量小于平均容量的体育场馆的名称。",
        "query": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE capacity  <  (SELECT avg(capacity) FROM <mask>)"
    },
    {
        "db_id": "workshop_paper",
        "question": "提交分数最高的作者是什么？",
        "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "loan_1",
        "question": "查找“上海”的银行分行提供的贷款总额。",
        "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  '上海'",
        "mask_query": "SELECT sum(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.<unk>  =  '上海'"
    },
    {
        "db_id": "museum_visit",
        "question": "在所有的博物馆门票中，花钱最多的游客的id、姓名和会员级别是多少？",
        "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "mask_query": "SELECT t2.visitor_id ,  t1.name ,  t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "返回每个不同房间大小及其房间数。",
        "query": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "显示所有客户的ID、名字、姓氏和电话。",
        "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "flight_1",
        "question": "ID为242518965的员工的姓名和薪水是多少？",
        "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
        "mask_query": "SELECT <unk> ,  <unk> FROM Employee WHERE <unk>  =  242518965"
    },
    {
        "db_id": "boat_1",
        "question": "每一个30岁以下的水手的名字和年龄是多少？",
        "query": "SELECT name ,  age FROM Sailors WHERE age  <  30",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  <  30"
    },
    {
        "db_id": "pilot_1",
        "question": "年龄是35岁以下且驾驶飞机名称是单翼飞机的飞行员叫什么名字？",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  35 AND <unk>  =  'Piper Cub'"
    },
    {
        "db_id": "inn_1",
        "question": "找到每一个装饰类型有“大床”的房间数。",
        "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"大床\" GROUP BY decor;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> WHERE <unk> = \"大床\" GROUP BY <unk>;"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "有多少种颜色？",
        "query": "SELECT count(*) FROM ref_colors",
        "mask_query": "SELECT count(*) FROM ref_colors"
    },
    {
        "db_id": "music_2",
        "question": "找到所有名为“贯中”的艺术家创作的歌曲。",
        "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"贯中\"",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> WHERE T2.firstname  =  \"贯中\""
    },
    {
        "db_id": "bbc_channels",
        "question": "“德古拉”节目的导演叫什么名字？",
        "query": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
        "mask_query": "SELECT t2.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'"
    },
    {
        "db_id": "election_representative",
        "question": "代表的姓名和政党是什么？",
        "query": "SELECT Name ,  Party FROM representative",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "college_3",
        "question": "没有参加课程的所有学生的名字是什么？",
        "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "mask_query": "SELECT <unk> FROM STUDENT WHERE <unk> NOT IN (SELECT <unk> FROM ENROLLED_IN)"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "查找住址平均月租金最高的学生的id和城市。",
        "query": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY AVG(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "book_2",
        "question": "列出3个最低价格的出版物的出版日期。",
        "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 3"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "贷款额最高的学生的成绩单是什么时候发的？",
        "query": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "college_3",
        "question": "教授课程数前三多的老师的名字和姓氏是什么？",
        "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "school_bus",
        "question": "显示40岁以上的来自“苏州”的司机的组织。",
        "query": "SELECT party FROM driver WHERE home_city  =  \"苏州\" AND age  >  40",
        "mask_query": "SELECT party FROM <mask> WHERE home_city  =  \"苏州\" AND age  >  40"
    },
    {
        "db_id": "institution_sports",
        "question": "统计有机构的省份的数量。",
        "query": "SELECT count(DISTINCT Province) FROM institution",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "station_weather",
        "question": "列出所有车站的地方当局和提供的服务。",
        "query": "SELECT local_authority ,  services FROM station",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "chinook_1",
        "question": "员工住多少个不同的城市？",
        "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "mask_query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE"
    },
    {
        "db_id": "book_1",
        "question": "所有的客户都叫什么名字，每一个客户都订购了多少次？",
        "query": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
        "mask_query": "SELECT T2.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient"
    },
    {
        "db_id": "journal_committee",
        "question": "按年龄升序排列给出编辑的名称。",
        "query": "SELECT Name FROM editor ORDER BY Age ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "yelp",
        "question": "列出2010在“黑龙江”的“星巴克”的所有提示。",
        "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"星巴克\" AND t1.state  =  \"黑龙江\" AND t2.year  =  2010;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"星巴克\" AND t1.<unk>  =  \"黑龙江\" AND t2.<unk>  =  2010;"
    },
    {
        "db_id": "car_racing",
        "question": "按车主顺序排序找出每个车队的经理和赞助商。",
        "query": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”在“PVLDB”上发表的论文。",
        "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"PVLDB\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "insurance_policies",
        "question": "哪种支付方式处理的付款金额最少？",
        "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "包含最多数学生的地址的ID、第1行和第2行是什么？",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_2",
        "question": "书的题目和出版是什么？",
        "query": "SELECT Title ,  Issues FROM book",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "entertainment_awards",
        "question": "列出不属于“抽象”类型的作品名称。",
        "query": "SELECT Name FROM artwork WHERE TYPE != \"抽象\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE TYPE != \"抽象\""
    },
    {
        "db_id": "railway",
        "question": "显示火车的名称和他们所在铁路的位置。",
        "query": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "college_2",
        "question": "学过“国际金融”这门课程的预备课程的学生的名字是什么？",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  '国际金融')",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.id WHERE T2.<unk> IN (SELECT T4.<unk> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk> WHERE T3.<unk>  =  '国际金融')"
    },
    {
        "db_id": "shop_membership",
        "question": "显示2011年开业或位于\"北京\"的所有分行的最低和最高会员数量。",
        "query": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  '北京'",
        "mask_query": "SELECT min(<unk>) ,  max(<unk>) FROM <mask> WHERE open_year  =  2011 OR city  =  '北京'"
    },
    {
        "db_id": "restaurant_1",
        "question": "学生“李” “琳”去过几次“全聚德”？",
        "query": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"李\" AND Student.Lname = \"琳\" AND Restaurant.ResName = \"全聚德\";",
        "mask_query": "SELECT count(*) FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = \"李\" AND <mask>.Lname = \"琳\" AND <mask>.<unk> = \"全聚德\";"
    },
    {
        "db_id": "train_station",
        "question": "按时间顺序显示所有列车的名称和服务。",
        "query": "SELECT name ,  service FROM train ORDER BY TIME",
        "mask_query": "SELECT name ,  service FROM <mask> ORDER BY TIME"
    },
    {
        "db_id": "activity_1",
        "question": "哪些是既参加活动又指导学生的教职工的ID？",
        "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "mask_query": "SELECT <unk> FROM Faculty_participates_in INTERSECT SELECT advisor FROM <mask>"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "与名为“余”的客户对应的帐户的ID、名称、开户日期和其他细节是什么？",
        "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  '余'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '余'"
    },
    {
        "db_id": "chinook_1",
        "question": "列出所有员工的电话号码。",
        "query": "SELECT Phone FROM EMPLOYEE",
        "mask_query": "SELECT <unk> FROM EMPLOYEE"
    },
    {
        "db_id": "pilot_1",
        "question": "找出每个城市拥有飞机的飞行员人数和平均年龄。",
        "query": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
        "mask_query": "SELECT count(T1.<unk>) ,  avg(T1.<unk>) ,  T2.<unk> FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "hr_1",
        "question": "找到所有挣的工资超过平均工资的员工的ID。",
        "query": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "mask_query": "SELECT employee_id FROM <mask> WHERE salary  >  (SELECT AVG(salary) FROM <mask>)"
    },
    {
        "db_id": "document_management",
        "question": "什么文档类型拥有超过10000的总访问量。",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
        "mask_query": "SELECT <unk> FROM documents GROUP BY <unk> HAVING sum(<unk>)  >  10000"
    },
    {
        "db_id": "loan_1",
        "question": "查找向信用评分低于100的任何客户提供过贷款的银行分行的名称。",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id JOIN <mask> AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.<unk>  <  100"
    },
    {
        "db_id": "planet_1",
        "question": "列出火星号上或图兰加·莱拉管理下的所有装运ID。",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T3.<unk> = T1.<unk> WHERE T2.<unk> = \"Mars\" OR T3.<unk> = \"Turanga Leela\";"
    },
    {
        "db_id": "flight_1",
        "question": "目的地有哪些？飞往每个目的地的航班数量是多少？",
        "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
        "mask_query": "SELECT <unk> ,  count(*) FROM Flight GROUP BY <unk>"
    },
    {
        "db_id": "gas_company",
        "question": "2000至2005年间开业的加油站总数是多少？",
        "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
        "mask_query": "SELECT count(*) FROM <mask> WHERE open_year BETWEEN 2000 AND 2005"
    },
    {
        "db_id": "company_office",
        "question": "统计公司的数量。",
        "query": "SELECT count(*) FROM Companies",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "customer_complaints",
        "question": "没有投诉的产品的价格是多少？",
        "query": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "mask_query": "SELECT <unk> FROM products WHERE <unk> NOT IN (SELECT <unk> FROM complaints)"
    },
    {
        "db_id": "network_2",
        "question": "找出正好有一个朋友的人。",
        "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  =  1"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "返回有最多卡的客户的ID，以及卡的数量。",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  count(*) FROM Customers_cards GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "question": "有超过12辆可用自行车的车站的ID和名称是什么？",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  12"
    },
    {
        "db_id": "csu_1",
        "question": "在2001年授予的学位最少的学校的教师队伍是多少？",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "mask_query": "SELECT T2.<mask> FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  t2.campus JOIN <mask> AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.<mask> LIMIT 1"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找到所有学生住址的最高和最低月租金。",
        "query": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "music_1",
        "question": "来自“英国”且用“英文”唱歌的艺术家的名字是什么？",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"英国\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"英文\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"英国\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"英文\""
    },
    {
        "db_id": "college_3",
        "question": "一共有多少门课？",
        "query": "SELECT count(*) FROM COURSE",
        "mask_query": "SELECT count(*) FROM COURSE"
    },
    {
        "db_id": "geo",
        "question": "中国最大的河流穿过的省密度是什么",
        "query": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> ) );"
    },
    {
        "db_id": "products_for_hire",
        "question": "支付金额高于300或付款类型是“现金”的付款日期。",
        "query": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  '现金'",
        "mask_query": "SELECT <unk> FROM payments WHERE <unk>  >  300 OR <unk>  =  '现金'"
    },
    {
        "db_id": "network_2",
        "question": "找到“丽丽”的朋友。",
        "query": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  '丽丽' AND T4.name != '丽丽'",
        "mask_query": "SELECT DISTINCT T4.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk> WHERE T2.<unk>  =  '丽丽' AND T4.<unk> != '丽丽'"
    },
    {
        "db_id": "baseball_1",
        "question": "哪一年最少的球员进入名人堂？",
        "query": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "loan_1",
        "question": "那些没有接受过“抵押”贷款的客户的名字是什么？",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  '抵押'",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.<unk>  =  '抵押'"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示文档类型的数量。",
        "query": "SELECT count(*) FROM Ref_document_types",
        "mask_query": "SELECT count(*) FROM Ref_document_types"
    },
    {
        "db_id": "film_rank",
        "question": "按字母顺序排列的每个市场的国家是什么？",
        "query": "SELECT Country FROM market ORDER BY Country ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "bike_1",
        "question": "列出所有持续时间低于100的路线的不同起始车站。",
        "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  <  100"
    },
    {
        "db_id": "epinions_1",
        "question": "查找没有任何评论的项目的数量。",
        "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "boat_1",
        "question": "根据等级和年龄排序，查找所有船员的姓名、等级和年龄。",
        "query": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> ,  <unk>"
    },
    {
        "db_id": "geo",
        "question": "“甘肃”省的最低点是什么？",
        "query": "SELECT lowest_point FROM highlow WHERE state_name  =  \"甘肃\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"甘肃\";"
    },
    {
        "db_id": "chinook_1",
        "question": "发票总额不超过20的客户的姓氏是什么？",
        "query": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "mask_query": "SELECT <unk> FROM CUSTOMER EXCEPT SELECT T1.<unk> FROM CUSTOMER AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.total  >  20"
    },
    {
        "db_id": "theme_gallery",
        "question": "门票价格高于平均水平的展览的主题和艺术家的名字是什么？",
        "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
        "mask_query": "SELECT T1.theme ,  T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM <mask>)"
    },
    {
        "db_id": "academic",
        "question": "把机构的数量返回。",
        "query": "SELECT COUNT ( DISTINCT name ) FROM organization;",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask>;"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "查找最近订购的客户的姓名。",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> ORDER BY t2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "college_1",
        "question": "所有拿到课程成绩是“A”或“C”的学生的名字是什么？",
        "query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "mask_query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'"
    },
    {
        "db_id": "world_1",
        "question": "找出每个地区其人口大于城市平均人口的城市数量。",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> WHERE <unk>  >  (SELECT avg(<unk>) FROM <mask>) GROUP BY <unk>"
    },
    {
        "db_id": "hospital_1",
        "question": "列出按费用从最高到最低排序的所有手术的名称和花费。",
        "query": "SELECT name ,  cost FROM procedures ORDER BY cost DESC",
        "mask_query": "SELECT name ,  cost FROM procedures ORDER BY cost DESC"
    },
    {
        "db_id": "book_press",
        "question": "按年度利润降序排列所有出版社并返回其名称。",
        "query": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
        "mask_query": "SELECT name FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "network_1",
        "question": "那些年级在5岁以上且有2个或更多朋友的高中生叫什么名字？",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id WHERE T2.<unk>  >  5 GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "按酶相互作用数量递减的顺序，药物的ID、名称和FDA批准状态是什么？",
        "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "mask_query": "SELECT T1.<unk> ,  T1.Name ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "mountain_photos",
        "question": "列出所有照片的ID、颜色方案和名称。",
        "query": "SELECT id ,  color ,  name FROM photos",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "dorm_1",
        "question": "姓氏为“帅”的学生住在宿舍里有什么设施？",
        "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  '帅'",
        "mask_query": "SELECT T3.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> JOIN lives_in AS T4 ON T4.<unk>  =  T1.<unk> JOIN student AS T5 ON T5.<unk>  =  T4.<unk> WHERE T5.lname  =  '帅'"
    },
    {
        "db_id": "college_1",
        "question": "拥有“博士”学位的教授数量最多的系叫什么名字？",
        "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  '博士' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  '博士' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_1",
        "question": "有多少教授教的课程代码为“美术”？",
        "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"美术\"",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> WHERE <unk>  =  \"美术\""
    },
    {
        "db_id": "driving_school",
        "question": "客户和员工使用的姓氏是什么？",
        "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "mask_query": "SELECT <unk> FROM <mask> INTERSECT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "machine_repair",
        "question": "显示36岁或37岁的技术人员的姓名",
        "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  36 OR <unk>  =  37"
    },
    {
        "db_id": "soccer_2",
        "question": "找出有学生在“守门员”和“中场”位置踢球的学校的名字。",
        "query": "SELECT cName FROM  tryout WHERE pPos  =  '守门员' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  '中场'",
        "mask_query": "SELECT <unk> FROM  tryout WHERE <unk>  =  '守门员' INTERSECT SELECT <unk> FROM  tryout WHERE <unk>  =  '中场'"
    },
    {
        "db_id": "voter_2",
        "question": "找出在“春季”选举周期有秘书投票的女性（性别是“女性”）学生的平均年龄。",
        "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"春天\"",
        "mask_query": "SELECT avg(T1.<unk>) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  SECRETARY_Vote WHERE T1.<unk>  =  \"F\" AND T2.<unk>  =  \"春天\""
    },
    {
        "db_id": "driving_school",
        "question": "显示ID是1的车辆细节。",
        "query": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = 1;"
    },
    {
        "db_id": "wrestler",
        "question": "“奥神队”队的摔跤运动员的淘汰赛影片有哪些？",
        "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"奥神队\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"奥神队\""
    },
    {
        "db_id": "car_racing",
        "question": "找出每个品牌司机的平均年龄。",
        "query": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
        "mask_query": "SELECT avg(age) ,  <unk> FROM <mask> GROUP BY make"
    },
    {
        "db_id": "vehicle_rent",
        "question": "按车型年份降序显示所有车辆的名称。",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "mask_query": "SELECT <unk> FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "store_product",
        "question": "哪个地区人口最多？",
        "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "mask_query": "SELECT district_name FROM <mask> ORDER BY city_population DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "question": "找到所有比240号画廊中的绘画更古老的绘画的不同ID。",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
        "mask_query": "SELECT <unk> FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")"
    },
    {
        "db_id": "imdb",
        "question": "找出所有由“顾长卫”在2006后导演的电影",
        "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"顾长卫\" AND t3.release_year  >  2006;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"顾长卫\" AND t3.<unk>  >  2006;"
    },
    {
        "db_id": "phone_1",
        "question": "“小米”生产了多少款手机硬件？",
        "query": "SELECT count(*) FROM phone WHERE Company_name = \"小米\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"小米\";"
    },
    {
        "db_id": "aan_1",
        "question": "按论文数降序，列出所有作者的姓名和论文数。",
        "query": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "college_1",
        "question": "正在教“哲学”和“QM261”的教授的名字是什么？",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  '哲学' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  '文学'",
        "mask_query": "SELECT T1.emp_fname FROM employee AS T1 JOIN <mask> AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  '哲学' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN <mask> AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  '文学'"
    },
    {
        "db_id": "school_bus",
        "question": "按年龄递减顺序显示驾驶员姓名。",
        "query": "SELECT name FROM driver ORDER BY age DESC",
        "mask_query": "SELECT name FROM <mask> ORDER BY age DESC"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "返回文档类型名称是“电影”的描述。",
        "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"电影\"",
        "mask_query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"电影\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "每个公寓的预订号码是多少，开始日期和结束日期是多少？",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "baseball_1",
        "question": "2008赛季季后赛获胜次数最多的球队的名字和ID是什么？",
        "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  2008 GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "bike_racing",
        "question": "所有自行车的最大重量和最小重量是多少？",
        "query": "SELECT max(weight) ,  min(weight) FROM bike",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "network_2",
        "question": "每个工作年龄最小的人的年纪有多大？",
        "query": "SELECT min(age) ,  job FROM Person GROUP BY job",
        "mask_query": "SELECT min(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "college_1",
        "question": "学生最多的3个系的学生姓名、地址和人数是多少？",
        "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "inn_1",
        "question": "预订次数最多的房间是哪一间？",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "book_review",
        "question": "哪些类型的书至少有三本书？",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "mask_query": "SELECT TYPE FROM <mask> GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "至少有两项成绩的学生的贷款金额和贷款日期是多少？",
        "query": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2 )"
    },
    {
        "db_id": "college_1",
        "question": "最老的员工的名字和姓是什么？",
        "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "mask_query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "在“欧洲”国家，哪些城市不是以“英语”为官方语言？",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  \"欧洲\" AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  \"T\" AND T4.Language  =  \"英语\")",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> WHERE T1.<unk>  =  \"欧洲\" AND T1.<unk> NOT IN (SELECT T3.<unk> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk> WHERE T4.<unk>  =  \"T\" AND T4.<unk>  =  \"英语\")"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪家公司最早开始有维修合同？显示公司名称。",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "school_finance",
        "question": "在2001年或以前，有多少预算在3000以上？",
        "query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "mask_query": "SELECT count(*) FROM <mask> WHERE budgeted  >  3000 AND YEAR  <=  2001"
    },
    {
        "db_id": "wine_1",
        "question": "找出价格在50到100之间不同的葡萄酒酿造厂。",
        "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
        "mask_query": "SELECT DISTINCT <unk> FROM WINE WHERE <unk> BETWEEN 50 AND 100"
    },
    {
        "db_id": "solvency_ii",
        "question": "名字是“快餐”或“交易守则”的产品的价格。",
        "query": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"快餐\" OR Product_Name  =  \"交易守则\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"快餐\" OR <unk>  =  \"交易守则\""
    },
    {
        "db_id": "scholar",
        "question": "作者最引人注意的是什么？",
        "query": "SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;"
    },
    {
        "db_id": "bbc_channels",
        "question": "返回超过平均年龄的导演的姓名。",
        "query": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)",
        "mask_query": "SELECT name FROM <mask> WHERE age  >  (SELECT avg(age) FROM <mask>)"
    },
    {
        "db_id": "hr_1",
        "question": "显示“市场”部门的所有信息。",
        "query": "SELECT * FROM  departments WHERE department_name  =  '市场'",
        "mask_query": "SELECT * FROM  <mask> WHERE department_name  =  '市场'"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "名称为“数据库”的文档所使用的模板的模板类型代码是什么？",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"数据库\"",
        "mask_query": "SELECT T1.template_type_code FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"数据库\""
    },
    {
        "db_id": "yelp",
        "question": "找出所有评论“沙县小吃”“餐厅”的用户",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"沙县小吃\" AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"沙县小吃\" AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "college_2",
        "question": "指导一个以上学生的老师的名字是什么？",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "项目的第一批员工是什么时候开始工作的？",
        "query": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "question": "体操运动员按自由体操点数的下降顺序，总分是多少？",
        "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "department_store",
        "question": "找出至少购买三种不同产品的客户的名字。",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> JOIN order_items AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk> HAVING COUNT (DISTINCT T3.<unk>)  >=  3"
    },
    {
        "db_id": "manufactory_1",
        "question": "按收益下降的顺序，所有制造商的名称和总部是什么？",
        "query": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
        "mask_query": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC"
    },
    {
        "db_id": "driving_school",
        "question": "员工名字是“子君” ，姓氏是“温”在哪些国家和省？",
        "query": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"子君\" AND T2.last_name = \"温\";",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"子君\" AND T2.<unk> = \"温\";"
    },
    {
        "db_id": "train_station",
        "question": "那里有多少个火车站？",
        "query": "SELECT count(*) FROM station",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "baseball_1",
        "question": "“长沙”有多少个公园？",
        "query": "SELECT count(*) FROM park WHERE city = '长沙';",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = '长沙';"
    },
    {
        "db_id": "wine_1",
        "question": "在所有葡萄产地中所有拥有最多三种葡萄酒的国家是什么？",
        "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "mask_query": "SELECT T1.<unk> FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  <=  3"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "我们有什么文档状态代码？",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "customers_and_orders",
        "question": "没有被下单的产品的名称是什么？",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS t1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "chinook_1",
        "question": "“吴亦凡”艺术家的专辑的标题是什么？",
        "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"吴亦凡\"",
        "mask_query": "SELECT <unk> FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"吴亦凡\""
    },
    {
        "db_id": "wta_1",
        "question": "有超过10场比赛的联赛名称是什么？",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  10"
    },
    {
        "db_id": "phone_market",
        "question": "电话最贵的运营商是什么？",
        "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "question": "2000在\"湖南大学\"授予了多少学位？",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"湖南大学\" AND t2.year  =  2000",
        "mask_query": "SELECT <mask> FROM campuses AS T1 JOIN <mask> AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"湖南大学\" AND t2.year  =  2000"
    },
    {
        "db_id": "wrestler",
        "question": "哪些位置有两个摔跤运动员？",
        "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
        "mask_query": "SELECT LOCATION FROM <mask> GROUP BY LOCATION HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "sports_competition",
        "question": "有多少俱乐部总奖牌数不到10？",
        "query": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  <  10"
    },
    {
        "db_id": "government_shift",
        "question": "哪些服务是由客户“哈迪库驰”使用过的，或者在客户交互种被评为“良好”？把服务细节给我。",
        "query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
        "mask_query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\""
    },
    {
        "db_id": "flight_2",
        "question": "我们有多少家航空公司？",
        "query": "SELECT count(*) FROM AIRLINES",
        "mask_query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "db_id": "shop_membership",
        "question": "每一个城市，有多少分支机构在2010年之前开放？",
        "query": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city",
        "mask_query": "SELECT city ,  count(*) FROM <mask> WHERE open_year  <  2010 GROUP BY city"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "用产品ID排序的不同产品名称列表是什么？",
        "query": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
        "mask_query": "SELECT DISTINCT <unk> FROM product ORDER BY <unk>"
    },
    {
        "db_id": "hr_1",
        "question": "显示与名字中包含汉字“江”的雇员在同一部门工作且工资高于平均工资的员工的id、全名（名字和姓氏）和工资。",
        "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '江')",
        "mask_query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM <mask> WHERE salary  >  ( SELECT AVG (salary) FROM <mask> ) AND department_id IN ( SELECT department_id FROM <mask> WHERE first_name LIKE '江')"
    },
    {
        "db_id": "workshop_paper",
        "question": "对于每一个提交，显示作者及其附属学院。",
        "query": "SELECT Author ,  College FROM submission",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出面积最大的地区的名称。",
        "query": "SELECT name FROM district ORDER BY Area_km DESC LIMIT 1",
        "mask_query": "SELECT name FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "question": "列出给出的评价为“正常”的所有不同的学生回答文本。",
        "query": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  =  \"Normal\""
    },
    {
        "db_id": "game_1",
        "question": "不参加体育运动的学生的ID是什么？",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM Sportsinfo"
    },
    {
        "db_id": "art_1",
        "question": "给出活得最久的艺术家的全名。",
        "query": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM artists ORDER BY <unk> - <unk> DESC LIMIT 1"
    },
    {
        "db_id": "company_employee",
        "question": "通过销售数量的升序列出公司的名称。",
        "query": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "soccer_1",
        "question": "列出所有国家和联赛名称。",
        "query": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "student_1",
        "question": "找出一间教室里学生的数量。",
        "query": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "mask_query": "SELECT count(*) ,  classroom FROM <mask> GROUP BY classroom"
    },
    {
        "db_id": "entrepreneur",
        "question": "统计不同公司的数量。",
        "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "small_bank_1",
        "question": "找出支票余额最高的账户的储蓄余额。",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "mask_query": "SELECT T3.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "哪些省接近中国最长的河流",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> ) );"
    },
    {
        "db_id": "sports_competition",
        "question": "列出比赛的类型和每种类型比赛的数目。",
        "query": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "返回模板类型代码是“广告”的模板类型描述。",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"广告\"",
        "mask_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"广告\""
    },
    {
        "db_id": "scientist_1",
        "question": "找出拥有最多科学家的项目的名称和时间。",
        "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "哪些省与人口最多的省接壤？",
        "query": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "planet_1",
        "question": "哪个装载工具星只有一个员工有许可？列出装载工具的名字。",
        "query": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T1.<mask> = T3.<unk> GROUP BY T1.<mask> HAVING count(*)  =  1;"
    },
    {
        "db_id": "machine_repair",
        "question": "显示至少有两名技术人员的团队。",
        "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "geo",
        "question": "省内最高点的城市是什么？",
        "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "geo",
        "question": "“长江”流经的最小的省是什么？",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" );"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示所有投资者的详细信息。",
        "query": "SELECT Investor_details FROM INVESTORS",
        "mask_query": "SELECT <unk> FROM INVESTORS"
    },
    {
        "db_id": "e_commerce",
        "question": "最早的订单的日期是什么？所有超过一个物品的订单的日期是什么？",
        "query": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
        "mask_query": "SELECT min(<unk>) FROM <mask> UNION SELECT T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "art_1",
        "question": "240号画廊展出的绘画作品总数是多少？",
        "query": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
        "mask_query": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\""
    },
    {
        "db_id": "school_player",
        "question": "哪个队的球员年龄最大？",
        "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "news_report",
        "question": "列出没有报道任何事件的记者的名字。",
        "query": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "icfp_1",
        "question": "“中南大学”发表的论文有哪些？",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"中南大学\"",
        "mask_query": "SELECT DISTINCT t1.<unk> FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.<unk>  =  \"中南大学\""
    },
    {
        "db_id": "gymnast",
        "question": "这些人有多少不同的家乡？",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "tracking_orders",
        "question": "按字母顺序列出所有不同产品的名称。",
        "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "mask_query": "SELECT DISTINCT <unk> FROM products ORDER BY <unk>"
    },
    {
        "db_id": "customer_complaints",
        "question": "所有不同的产品名称是什么 ，以及每个收到多少投诉？",
        "query": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "mask_query": "SELECT t1.<unk> ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk>"
    },
    {
        "db_id": "movie_2",
        "question": "电影院里有多少部电影？",
        "query": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "mask_query": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "e_commerce",
        "question": "产品平均价格是多少？",
        "query": "SELECT avg(product_price) FROM Products",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "music_4",
        "question": "所有专辑的最大和最小登顶周是多少？",
        "query": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "tvshow",
        "question": "“李辉”导演的动画片的数量是多少？",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"李辉\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"李辉\";"
    },
    {
        "db_id": "soccer_3",
        "question": "返回玩家的名字，按赢的次数升序排列。",
        "query": "SELECT Name FROM player ORDER BY Wins_count ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "county_public_safety",
        "question": "显示城市名称和所在省的名称。",
        "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "imdb",
        "question": "谁扮演“狄仁杰”的角色",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"狄仁杰\";",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"狄仁杰\";"
    },
    {
        "db_id": "department_store",
        "question": "给最频繁订购的产品的ID。",
        "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM order_items GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "世界上使用的不同语言的数量是多少？",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "mask_query": "SELECT count(DISTINCT LANGUAGE) FROM <mask>"
    },
    {
        "db_id": "dog_kennels",
        "question": "每个专家的名字和所实施的治疗的描述是什么？",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T3.<unk> FROM professionals AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Treatment_types AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "college_2",
        "question": "给出“统计”系最低收入的导师的名字。",
        "query": "SELECT name FROM instructor WHERE dept_name  =  '统计学' ORDER BY salary LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '统计学' ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "soccer_2",
        "question": "那些招生人数比其他大学少的大学所在的省是什么？",
        "query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "mask_query": "SELECT DISTINCT <unk> FROM college WHERE <unk>  <  (SELECT max(<unk>) FROM college)"
    },
    {
        "db_id": "book_2",
        "question": "显示已经出版的一本价格超过4000000的书的作家。",
        "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  4000000"
    },
    {
        "db_id": "customers_and_orders",
        "question": "没有下订单的客户的id是什么？",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM Customer_orders"
    },
    {
        "db_id": "swimming",
        "question": "找出没有记录的游泳运动员的名字。",
        "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE id NOT IN (SELECT swimmer_id FROM <mask>)"
    },
    {
        "db_id": "e_commerce",
        "question": "有多少客户没有列出付款方式？",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "movie_1",
        "question": "2000年后“姜文”导演的所有电影的片名是什么？",
        "query": "SELECT title FROM Movie WHERE director = '姜文' AND YEAR  >  2000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = '姜文' AND YEAR  >  2000"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "对于拥有的不同文档数量最多的文档子集，子集的id和名称以及文档数量是多少？",
        "query": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID ORDER BY count(DISTINCT T1.Document_Object_ID) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> , count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(DISTINCT T1.<unk>) DESC LIMIT 1;"
    },
    {
        "db_id": "wta_1",
        "question": "找出所有球员所属的不同的国家代码的数量。",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "news_report",
        "question": "显示来自“英格兰”或“威尔士”的记者姓名。",
        "query": "SELECT Name FROM journalist WHERE Nationality  =  \"英格兰\" OR Nationality  =  \"威尔士\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"英格兰\" OR <unk>  =  \"威尔士\""
    },
    {
        "db_id": "swimming",
        "question": "找出“世界杯”活动发生的体育场的名称及其容量。",
        "query": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  '世界杯'",
        "mask_query": "SELECT t1.<unk> ,  t1.capacity FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.stadium_id WHERE t2.<unk>  =  '世界杯'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "找出参加任何活动的学生的个人资料和活动日期。",
        "query": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "allergy_1",
        "question": "显示男女学生的平均年龄。",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "mask_query": "SELECT avg(age) ,  sex FROM <mask> GROUP BY sex"
    },
    {
        "db_id": "movie_2",
        "question": "播放分级是G级电影的电影院叫什么名字？",
        "query": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
        "mask_query": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'"
    },
    {
        "db_id": "music_1",
        "question": "列出所有评分在9以上的歌曲的歌手的姓名和原籍国。",
        "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  9"
    },
    {
        "db_id": "hospital_1",
        "question": "找出三个最昂贵的手术。",
        "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "mask_query": "SELECT name FROM procedures ORDER BY cost LIMIT 3"
    },
    {
        "db_id": "restaurant_1",
        "question": "哪个专业的学生最少？列出专业和学生人数。",
        "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(<unk>) ASC LIMIT 1;"
    },
    {
        "db_id": "school_finance",
        "question": "“理工大学”学校所有年的预算总额是多少？",
        "query": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  '理工大学'",
        "mask_query": "SELECT sum(T1.budgeted) FROM <mask> AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  '理工大学'"
    },
    {
        "db_id": "academic",
        "question": "返回在“数据库”领域的论文被引用最多的“北京理工大学”的作者。",
        "query": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"数据库\" AND t6.name  =  \"北京理工大学\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM DOMAIN AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t6 ON t6.<unk>  =  t1.<unk> WHERE t4.<unk>  =  \"数据库\" AND t6.<unk>  =  \"北京理工大学\" GROUP BY t1.<unk> ORDER BY SUM ( t5.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "apartment_rentals",
        "question": "按房间数升序，返回所有公寓的号码。",
        "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "所有日历日期和日期号码是什么？",
        "query": "SELECT calendar_date ,  day_Number FROM Ref_calendar",
        "mask_query": "SELECT calendar_date ,  day_Number FROM Ref_calendar"
    },
    {
        "db_id": "manufactory_1",
        "question": "找到由“创新实验室”和“索尼”两家公司生产的产品的名称。",
        "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  '创造' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  '索尼'",
        "mask_query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.<unk>  =  T2.code WHERE T2.name  =  '创造' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.<unk>  =  T2.code WHERE T2.name  =  '索尼'"
    },
    {
        "db_id": "bike_1",
        "question": "什么邮政编码地区有一个最高温度大于或等于80的车站，什么时候达到这个温度？",
        "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >=  80"
    },
    {
        "db_id": "flight_1",
        "question": "拥有最多飞机证件的员工的薪资和姓名是什么？",
        "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM Employee AS T1 JOIN Certificate AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "question": "找到写论文“注意力模型”的作者的姓氏。",
        "query": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"注意力模型\"",
        "mask_query": "SELECT t1.<unk> ,  t1.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.<unk>  =  \"注意力模型\""
    },
    {
        "db_id": "scholar",
        "question": "ACL 2014的主题",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t3.<unk>  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "db_id": "theme_gallery",
        "question": "展览平均吸引200多位参展者的艺术家的名字是什么？",
        "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
        "mask_query": "SELECT T3.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN <mask> AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200"
    },
    {
        "db_id": "protein_institute",
        "question": "有多少蛋白质与1880年后建立的机构或具有“私立”类型的机构相关？",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  '私立'",
        "mask_query": "SELECT count(*) FROM institution AS T1 JOIN <mask> AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  '私立'"
    },
    {
        "db_id": "game_1",
        "question": "什么类型的游戏最少？",
        "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "question": "会计专业排名第一的大学的名称、所在城市及所在州分别是什么？",
        "query": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
        "mask_query": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'"
    },
    {
        "db_id": "aan_1",
        "question": "统计哥伦比亚大学2009年发表的论文数量。",
        "query": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
        "mask_query": "SELECT count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"Columbia University\" AND T1.<unk>  =  2009"
    },
    {
        "db_id": "game_1",
        "question": "所有获得奖学金的运动生的ID是什么？",
        "query": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  \"Y\"",
        "mask_query": "SELECT <unk> FROM Sportsinfo WHERE onscholarship  =  \"Y\""
    },
    {
        "db_id": "allergy_1",
        "question": "过敏和它们的类型是什么？",
        "query": "SELECT allergy ,  allergytype FROM Allergy_type",
        "mask_query": "SELECT allergy ,  allergytype FROM Allergy_type"
    },
    {
        "db_id": "chinook_1",
        "question": "找到“陈奕迅”艺术家的专辑数量。",
        "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"陈奕迅\"",
        "mask_query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"陈奕迅\""
    },
    {
        "db_id": "film_rank",
        "question": "返回1995年电影市场的估计类型。",
        "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995",
        "mask_query": "SELECT TYPE FROM <mask> WHERE YEAR  =  1995"
    },
    {
        "db_id": "poker_player",
        "question": "身高在200以上的扑克玩家的平均收入是多少？",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "mask_query": "SELECT avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  200"
    },
    {
        "db_id": "geo",
        "question": "有多少省没有河流",
        "query": "SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> );"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "每个员工的姓名和详细情况是什么？",
        "query": "SELECT Name ,  Other_Details FROM Staff",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "gas_company",
        "question": "按市值下降排列的所有公司的名称和总部是什么？",
        "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "mask_query": "SELECT <mask> ,  headquarters FROM <mask> ORDER BY market_value DESC"
    },
    {
        "db_id": "phone_1",
        "question": "“小米”生产的手机的平均ROM尺寸是多少？",
        "query": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"小米\";",
        "mask_query": "SELECT avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<mask> WHERE T2.<unk> = \"小米\";"
    },
    {
        "db_id": "sports_competition",
        "question": "一个俱乐部的平均金牌数是多少？",
        "query": "SELECT avg(Gold) FROM club_rank",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "什么是不同的地名？",
        "query": "SELECT DISTINCT Location_Name FROM LOCATIONS",
        "mask_query": "SELECT DISTINCT <unk> FROM LOCATIONS"
    },
    {
        "db_id": "musical",
        "question": "演员的名字是什么，按字母顺序排列？",
        "query": "SELECT Name FROM actor ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "imdb",
        "question": "找出所有由“许鞍华”创作和制作的电影",
        "query": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"许鞍华\" AND t4.name  =  \"许鞍华\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t3.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t5.<unk>  =  t4.<unk> WHERE t1.<unk>  =  \"许鞍华\" AND t4.<unk>  =  \"许鞍华\";"
    },
    {
        "db_id": "book_press",
        "question": "哪些作者同时出版“mm”和“lt”系列的书？给出作者的名字。",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'"
    },
    {
        "db_id": "geo",
        "question": "最高点所在的省会是什么？",
        "query": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "shop_membership",
        "question": "显示所有没有超过100个会员的分支机构所在的城市。",
        "query": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "mask_query": "SELECT city FROM <mask> EXCEPT SELECT city FROM <mask> WHERE <unk>  >  100"
    },
    {
        "db_id": "geo",
        "question": "那个是“长江”穿过的省的最低点。",
        "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" ) ORDER BY lowest_elevation LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" ) ORDER BY <unk> LIMIT 1;"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "对于“梁” “天一”报告的由“李红” “军”授权关闭的问题的产品标识是什么？",
        "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"梁\" AND T2.staff_last_name = \"天一\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"李红\" AND T2.staff_last_name = \"军\"",
        "mask_query": "SELECT <unk> FROM problems AS T1 JOIN staff AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"梁\" AND T2.<unk> = \"天一\" INTERSECT SELECT <unk> FROM problems AS T1 JOIN staff AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"李红\" AND T2.<unk> = \"军\""
    },
    {
        "db_id": "wta_1",
        "question": "在所有比赛中，三个最年轻的获胜者的名字和等级是什么？",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "mask_query": "SELECT DISTINCT <unk> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 3"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "名称是“齐军的简历”或名称是“御书”的文档的文档类型代码、文档名称和文档描述是什么？",
        "query": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  \"齐军的简历\" OR document_name  =  \"御书\"",
        "mask_query": "SELECT document_type_code ,  document_name ,  document_description FROM <mask> WHERE document_name  =  \"齐军的简历\" OR document_name  =  \"御书\""
    },
    {
        "db_id": "department_store",
        "question": "返回客户代码的最大值和最小值。",
        "query": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "inn_1",
        "question": "哪些房间的价格在120到150之间？返回房间的名字。",
        "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "mask_query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
    },
    {
        "db_id": "election",
        "question": "找到有来自民主党和自由党的代表的委员会。",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"民主\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"自由\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"民主\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"自由\""
    },
    {
        "db_id": "formula_1",
        "question": "2017年举办的所有比赛的名字是什么？",
        "query": "SELECT name FROM races WHERE YEAR = 2017",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR = 2017"
    },
    {
        "db_id": "college_2",
        "question": "找到一个由不止一个院系提供的课程的标题。",
        "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "region_building",
        "question": "面积大于10000的地区的首府是什么？",
        "query": "SELECT Capital FROM region WHERE Area  >  10000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  10000"
    },
    {
        "db_id": "news_report",
        "question": "按工作年份升序列出记者姓名。",
        "query": "SELECT Name FROM journalist ORDER BY Years_working ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "voter_2",
        "question": "居住在城市代号“上海”的城市并在“春季”选举周期有秘书投票的学生的平均年龄是多少？",
        "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"上海\" AND T2.Election_Cycle  =  \"春天\"",
        "mask_query": "SELECT avg(T1.<unk>) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  SECRETARY_Vote WHERE T1.<unk>  =  \"上海\" AND T2.<unk>  =  \"春天\""
    },
    {
        "db_id": "dog_kennels",
        "question": "告诉我最老的狗的年龄。",
        "query": "SELECT max(age) FROM Dogs",
        "mask_query": "SELECT max(<unk>) FROM <mask>"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "“5”星级酒店的价格范围是多少？",
        "query": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
        "mask_query": "SELECT <unk> FROM HOTELS WHERE <unk>  =  \"5\""
    },
    {
        "db_id": "network_2",
        "question": "有年龄在40岁以上但不在30岁以下的朋友的人的名字是什么？",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN (SELECT <unk> FROM <mask> WHERE <unk>  >  40) EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN (SELECT <unk> FROM <mask> WHERE <unk>  <  30)"
    },
    {
        "db_id": "university_rank",
        "question": "所有既有会计专业又有城市教育专业的大学叫什么名字？",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
        "mask_query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'"
    },
    {
        "db_id": "scholar",
        "question": "哪个会议出版了关于“深度学习”最多的论文？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"深度学习\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"深度学习\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;"
    },
    {
        "db_id": "theme_gallery",
        "question": "显示不是来自“美国”的所有艺术家的名字和加入的年份。",
        "query": "SELECT name ,  year_join FROM artist WHERE country != '美国'",
        "mask_query": "SELECT name ,  year_join FROM <mask> WHERE country != '美国'"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "项目细节是“机密”的项目对应的成果描述是什么？",
        "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  '机密'",
        "mask_query": "SELECT T1.<unk> FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '机密'"
    },
    {
        "db_id": "driving_school",
        "question": "那里有多少员工？",
        "query": "SELECT count(*) FROM Staff;",
        "mask_query": "SELECT count(*) FROM <mask>;"
    },
    {
        "db_id": "bakery_1",
        "question": "每种食品有多少件商品？",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "mask_query": "SELECT count(*) ,  food FROM <mask> GROUP BY food"
    },
    {
        "db_id": "book_press",
        "question": "找出每一个出版商的销售量超过1000本的书的数量。同时列出出版社名称。",
        "query": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
        "mask_query": "SELECT count(*) ,  t2.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name"
    },
    {
        "db_id": "loan_1",
        "question": "按贷款总额排序列出所有不同客户的名字。",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.<unk> ORDER BY sum(T2.<unk>)"
    },
    {
        "db_id": "art_1",
        "question": "哪里有1885年以前创作但材料不为油画的绘画作品？",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
        "mask_query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND <unk> != \"canvas\""
    },
    {
        "db_id": "aan_1",
        "question": "由哈佛大学作为附属机构，撰写的论文的标题和论文id是什么？",
        "query": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"Harvard University\""
    },
    {
        "db_id": "yelp",
        "question": "查找名字为“米雪”的用户数",
        "query": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"米雪\";",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM USER WHERE <unk>  =  \"米雪\";"
    },
    {
        "db_id": "college_1",
        "question": "“ACT-211”课程提供多少节不同的课？",
        "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  '美术'",
        "mask_query": "SELECT count(DISTINCT class_section) FROM <mask> WHERE crs_code  =  '美术'"
    },
    {
        "db_id": "culture_company",
        "question": "列出至少在1989年后有两本书的类别。",
        "query": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2",
        "mask_query": "SELECT category FROM <mask> WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "哪些商店没有员工？查找店铺名称",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "mask_query": "SELECT name FROM <mask> WHERE shop_id NOT IN (SELECT shop_id FROM <mask>)"
    },
    {
        "db_id": "hospital_1",
        "question": "找到那些花费5000以上的费用执行手术的医生。",
        "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "mask_query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000"
    },
    {
        "db_id": "store_1",
        "question": "“周杰伦”有多少张专辑？",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"周杰伦\";",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON  T1.<unk> = T2.<unk> WHERE T2.<unk> = \"周杰伦\";"
    },
    {
        "db_id": "flight_2",
        "question": "统计到达“天津”的航班数。",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"天津\"",
        "mask_query": "SELECT count(*) FROM FLIGHTS WHERE <unk>  =  \"天津\""
    },
    {
        "db_id": "car_1",
        "question": "不是“广汽”制造的车中，哪些型号的车比3500轻？",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != '广汽';",
        "mask_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.<unk>  =  T2.<unk> JOIN CARS_DATA AS T3 ON T2.<unk>  =  T3.<unk> JOIN CAR_MAKERS AS T4 ON T1.<unk>  =  T4.<unk> WHERE T3.weight  <  3500 AND T4.<unk> != '广汽';"
    },
    {
        "db_id": "products_for_hire",
        "question": "顾客持500金额优惠券是好还是不好？",
        "query": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  500"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "有多少客户没有账户？",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "manufacturer",
        "question": "请告诉我一些公司制造的家具的名称和价格。",
        "query": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID",
        "mask_query": "SELECT t1.name ,  t2.price_in_dollar FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk>"
    },
    {
        "db_id": "product_catalog",
        "question": "哪些属性数据类型有超过3个属性定义？",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  3"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "不同的交易类型是什么，以及每个交易类型发生了多少次交易？",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "mask_query": "SELECT <unk> ,  count(*) FROM Financial_transactions GROUP BY <unk>"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "老年人居住地址的建筑物、街道和城市是什么？",
        "query": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'Senior Citizen';"
    },
    {
        "db_id": "activity_1",
        "question": "给我参加活动的教职工人数",
        "query": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Faculty_participates_in"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "我们有多少业务流程？",
        "query": "SELECT count(*) FROM Business_processes",
        "mask_query": "SELECT count(*) FROM Business_processes"
    },
    {
        "db_id": "college_2",
        "question": "这个学分最多的院系叫什么名字？",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY sum(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "book_review",
        "question": "有多少书没有评论？",
        "query": "SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "inn_1",
        "question": "“罗”“锋”曾预订过多少次房间。",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"罗\" AND LastName  =  \"锋\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"罗\" AND <unk>  =  \"锋\";"
    },
    {
        "db_id": "manufactory_1",
        "question": "每个类别中最便宜的产品的代码和名称是什么？",
        "query": "SELECT code ,  name ,  min(price) FROM products GROUP BY name",
        "mask_query": "SELECT code ,  name ,  min(price) FROM products GROUP BY name"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "有5张或更多卡的卡类型代码是什么？",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "mask_query": "SELECT <unk> FROM Customers_cards GROUP BY <unk> HAVING count(*)  >=  5"
    },
    {
        "db_id": "icfp_1",
        "question": "按照姓氏的字母顺序排序检索所有作者的名字和姓氏。",
        "query": "SELECT fname ,  lname FROM authors ORDER BY lname",
        "mask_query": "SELECT <unk> ,  <unk> FROM authors ORDER BY <unk>"
    },
    {
        "db_id": "chinook_1",
        "question": "包含“雷鬼”和“摇滚”流派曲目的专辑的名称是什么？",
        "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  '雷鬼' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  '摇滚'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.<unk>  =  '雷鬼' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.<unk>  =  '摇滚'"
    },
    {
        "db_id": "csu_1",
        "question": "找到在1800年之前开办的校园名称。",
        "query": "SELECT campus FROM campuses WHERE YEAR  <  1800",
        "mask_query": "SELECT campus FROM campuses WHERE YEAR  <  1800"
    },
    {
        "db_id": "allergy_1",
        "question": "谁指导1004学生？",
        "query": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  1004"
    },
    {
        "db_id": "geo",
        "question": "有多少省与最大的省接壤？",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "phone_market",
        "question": "显示市场上有超过50家商店销售的手机的名称。",
        "query": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  >  50"
    },
    {
        "db_id": "geo",
        "question": "与“四川”接壤的省的省会是什么？",
        "query": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"四川\" ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" ) );"
    },
    {
        "db_id": "aan_1",
        "question": "按年份进行排序，论文的的不同地点是什么？",
        "query": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
        "mask_query": "SELECT DISTINCT <unk> ,  YEAR FROM paper ORDER BY YEAR"
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”上所有“北京理工大学”的论文。",
        "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t3 ON t5.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\" AND t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "college_1",
        "question": "“信息系统”提供了多少门课程？",
        "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"信息系统\"",
        "mask_query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"信息系统\""
    },
    {
        "db_id": "car_road_race",
        "question": "计算30岁以上或20岁以下驾驶人使用的不同发动机的数量。",
        "query": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> WHERE <unk>  >  30 OR <unk>  <  20"
    },
    {
        "db_id": "college_1",
        "question": "姓“李”的学生选修的课程的描述和学分是什么？",
        "query": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  '李'",
        "mask_query": "SELECT T4.crs_description ,  T4.crs_credit FROM <mask> AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  '李'"
    },
    {
        "db_id": "world_1",
        "question": "使用“英语”或“荷兰语”的地区是什么？",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"英语\" OR T2.Language  =  \"荷兰语\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英语\" OR T2.<unk>  =  \"荷兰语\""
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "包括第一行和第二行的所有地址是什么？",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "mask_query": "SELECT <unk> ,  <unk> FROM addresses"
    },
    {
        "db_id": "entrepreneur",
        "question": "展示申请超过14万的企业家和申请不到12万的企业家所共有的投资者。",
        "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  140000 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  120000"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "那个名字里有“计算机”的学院的描述是什么？",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '计算机'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '计算机'"
    },
    {
        "db_id": "flight_1",
        "question": "最高价航班的航班号和距离是多少？",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM Flight ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "“黄山”的高度是多少？",
        "query": "SELECT mountain_altitude FROM mountain WHERE mountain_name  =  \"黄山\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"黄山\";"
    },
    {
        "db_id": "epinions_1",
        "question": "查找具有最高平均信任分数的源用户的名称。",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY avg(<mask>) DESC LIMIT 1"
    },
    {
        "db_id": "book_review",
        "question": "对于每种图书类型，返回该类型和对应的图书数量。",
        "query": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE",
        "mask_query": "SELECT TYPE ,  COUNT(*) FROM <mask> GROUP BY TYPE"
    },
    {
        "db_id": "product_catalog",
        "question": "查找属性名为“绿色”的属性数据类型。",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"绿色\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"绿色\""
    },
    {
        "db_id": "country_language",
        "question": "计算不同官方语言的数量。",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "region_building",
        "question": "没有建筑物的地区叫什么名字？",
        "query": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "mountain_photos",
        "question": "山的最大高度和平均高度是多少？",
        "query": "SELECT max(height) ,  avg(height) FROM mountain",
        "mask_query": "SELECT max(height) ,  avg(height) FROM <mask>"
    },
    {
        "db_id": "school_player",
        "question": "每个球员的队伍和学校的位置是什么？",
        "query": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议中的关键字个数。",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<mask> ) FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "farm",
        "question": "列出城市中最常见的一种状态。",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "club_1",
        "question": "至少有一个成员且顾问是“1121”的俱乐部是那些？",
        "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
        "mask_query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121"
    },
    {
        "db_id": "body_builder",
        "question": "总分小于315的健美运动员身高是多少？",
        "query": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  <  315"
    },
    {
        "db_id": "store_1",
        "question": "列出所有媒体类型。",
        "query": "SELECT name FROM media_types;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "poker_player",
        "question": "返回按照收入降序排列的扑克玩家的名字。",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "world_1",
        "question": "政府为“美国属地”的国家的平均GNP和总人口是多少？",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"美国属地\"",
        "mask_query": "SELECT avg(<unk>) ,  sum(population) FROM <mask> WHERE <unk>  =  \"美国属地\""
    },
    {
        "db_id": "entrepreneur",
        "question": "显示身高最高的企业家的公司。",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "question": "哪个队赢了一场以上的比赛？",
        "query": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "dog_kennels",
        "question": "找出既有主人又有专家居住的州。",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "mask_query": "SELECT <unk> FROM <mask> INTERSECT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "e_learning",
        "question": "返回具有“失败”结果的所有测试的完成日期。",
        "query": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"失败\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"失败\""
    },
    {
        "db_id": "flight_4",
        "question": "找出“沈阳”市机场的名字。",
        "query": "SELECT name FROM airports WHERE city  =  \"沈阳\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"沈阳\""
    },
    {
        "db_id": "world_1",
        "question": "给出使用最多语言数量的国家的名字。",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "question": "同时拥有杆位詹姆斯·辛奇克利夫和杆位卡尔·斯凯龙的车手叫什么名字？",
        "query": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"Carl Skerlong\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"James Hinchcliffe\""
    },
    {
        "db_id": "activity_1",
        "question": "找出学生参与人数最多的活动的名称。",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "question": "“移动计算”的预备课程是什么？",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  '移动计算')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '移动计算')"
    },
    {
        "db_id": "academic",
        "question": "返回2000年后引用超过200篇的论文。",
        "query": "SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  200 AND YEAR  >  2000;"
    },
    {
        "db_id": "flight_2",
        "question": "美国所有航空公司的航空公司名称和缩写是什么？",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"美国\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM AIRLINES WHERE <unk>  =  \"美国\""
    },
    {
        "db_id": "customers_and_invoices",
        "question": "计算从未订购的产品的数量。",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "mask_query": "SELECT count(*) FROM products WHERE <unk> NOT IN ( SELECT <unk> FROM Order_items )"
    },
    {
        "db_id": "browser_web",
        "question": "显示与名为“Opera”的浏览器不兼容的加速器名称和支持操作系统。",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",
        "mask_query": "SELECT <unk> ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.<unk> ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  'Opera'"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "按详细信息按降序排序列出有关客户主索引的所有信息。",
        "query": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
        "mask_query": "SELECT * FROM customer_master_index ORDER BY <unk> DESC"
    },
    {
        "db_id": "network_1",
        "question": "每个年级有多少高中生？",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "soccer_3",
        "question": "哪些不同国家的球员的收入高于1200000？",
        "query": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  1200000"
    },
    {
        "db_id": "department_management",
        "question": "出生在“浙江”州以外的人的名字是什么？",
        "query": "SELECT name FROM head WHERE born_state != '浙江'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != '浙江'"
    },
    {
        "db_id": "planet_1",
        "question": "火星号的坐标是多少？",
        "query": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Mars\";"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "“公共汽车”或“步行”可到达的旅游景点的名称和开放时间是什么？",
        "query": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"公共汽车\" OR How_to_Get_There  =  \"步行\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM TOURIST_ATTRACTIONS WHERE <unk>  =  \"公共汽车\" OR <unk>  =  \"步行\""
    },
    {
        "db_id": "music_1",
        "question": "有多少歌曲有“4”分钟的持续时间？",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> LIKE \"4:%\""
    },
    {
        "db_id": "solvency_ii",
        "question": "显示跨产品间最常见类型代码。",
        "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回在2000年后发表在“PVLDB”上的被引用最多的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" AND t2.<unk>  >  2000 ORDER BY t2.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "shop_membership",
        "question": "显示所有城市在2001年开设的分支机构，以及超过100个会员的分支机构。",
        "query": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "mask_query": "SELECT city FROM <mask> WHERE open_year  =  2001 AND <unk>  >  100"
    },
    {
        "db_id": "yelp",
        "question": "找出评分高于4分的“赵毅”的所有评论，",
        "query": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"赵毅\";",
        "mask_query": "SELECT t1.<unk> FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  >  4 AND t2.<unk>  =  \"赵毅\";"
    },
    {
        "db_id": "book_1",
        "question": "列出作者出版的所有书籍的标题，他的名字包含字符串“柏拉图”？",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
        "mask_query": "SELECT T1.title FROM <mask> AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN <mask> AS T3 ON T2.<mask>  =  T3.<unk> WHERE T3.name LIKE \"%Plato%\""
    },
    {
        "db_id": "dorm_1",
        "question": "找出“大礼堂”宿舍设施的名称。",
        "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  '大礼堂'",
        "mask_query": "SELECT T3.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  '大礼堂'"
    },
    {
        "db_id": "soccer_2",
        "question": "选拔赛中哪些球员最受欢迎？",
        "query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM tryout GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "music_2",
        "question": "谁演奏了“红日”这首歌？显示其姓名和姓氏。",
        "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"红日\"",
        "mask_query": "SELECT T2.firstname ,  T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> WHERE T3.<unk>  =  \"红日\""
    },
    {
        "db_id": "car_road_race",
        "question": "26岁以上的车手参加的比赛叫什么名字？",
        "query": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >=  26"
    },
    {
        "db_id": "bike_1",
        "question": "纬度小于37.5的所有车站的名称是什么？",
        "query": "SELECT name FROM station WHERE lat  <  37.5",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  37.5"
    },
    {
        "db_id": "chinook_1",
        "question": "名字中有字母“a”的艺术家有哪些？",
        "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"安\"",
        "mask_query": "SELECT <unk> FROM ARTIST WHERE <unk> LIKE \"安\""
    },
    {
        "db_id": "party_people",
        "question": "负责最多项目的成员叫什么名字？",
        "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.member_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "question": "不位于东部的省有哪些不同的警察机关？",
        "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"冬\"",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE LOCATION != \"冬\""
    },
    {
        "db_id": "music_1",
        "question": "按分辨率排序列出所有歌曲的名称。",
        "query": "SELECT song_name FROM song ORDER BY resolution",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "boat_1",
        "question": "按等级降序列出所有船员的姓名和年龄。",
        "query": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "gas_company",
        "question": "没有加油站的公司名称和主要行业。",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "mask_query": "SELECT <mask> ,  main_industry FROM <mask> WHERE company_id NOT IN (SELECT company_id FROM <mask>)"
    },
    {
        "db_id": "college_1",
        "question": "在任何课程中获得成绩是“C”的学生的名字是什么？",
        "query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'",
        "mask_query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'"
    },
    {
        "db_id": "car_1",
        "question": "每个大洲有多少汽车制造商？列出大洲名称和数量。",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.<unk>  =  T2.continent JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk>;"
    },
    {
        "db_id": "voter_2",
        "question": "找出城市编号为“上海”且在“春季”选举周期中有班级干部选票的学生的人数。",
        "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"上海\" AND T2.Election_Cycle  =  \"春天\"",
        "mask_query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  <unk> WHERE T1.<unk>  =  \"上海\" AND T2.<unk>  =  \"春天\""
    },
    {
        "db_id": "film_rank",
        "question": "列出每一部电影的制片厂和该电影制片厂制作的电影数量。",
        "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "hospital_1",
        "question": "字母顺序列出的所有不同的药物是什么？",
        "query": "SELECT DISTINCT name FROM medication ORDER BY name",
        "mask_query": "SELECT DISTINCT name FROM medication ORDER BY name"
    },
    {
        "db_id": "dorm_1",
        "question": "可以容纳超过300名学生住宿的宿舍名字是什么？",
        "query": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
        "mask_query": "SELECT <unk> FROM dorm WHERE <unk>  >  300"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "哪个客户有最多的保险单？给我客户的详细资料。",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "评估记录的日期是什么？",
        "query": "SELECT date_of_notes FROM Assessment_Notes",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "最经常订购的产品是什么？告诉我产品的细节",
        "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.<unk> FROM order_items AS t1 JOIN products AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "有多少人评论了在“四川”“成都”的“小龙坎”“餐厅”？",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"成都\" AND t1.name  =  \"小龙坎\" AND t1.state  =  \"四川\" AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"成都\" AND t1.<unk>  =  \"小龙坎\" AND t1.<unk>  =  \"四川\" AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "department_store",
        "question": "返回供应最多产品的供应商购买的平均数量和购买的金额。",
        "query": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) FROM <mask> WHERE <unk>  =  (SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "按日期戳排序的每个房产历史记录项的日期戳和房产名称是什么？",
        "query": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY <unk>;"
    },
    {
        "db_id": "twitter_1",
        "question": "在记录中找到推文的数量。",
        "query": "SELECT count(*) FROM tweets",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "device",
        "question": "列出最大数量的设备共享的软件平台。",
        "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "decoration_competition",
        "question": "显示成员的姓名和装饰主题。",
        "query": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "world_1",
        "question": "既说“英语”又说“法语”的国家的名字是什么？",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"英语\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"法语\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英语\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"法语\""
    },
    {
        "db_id": "soccer_2",
        "question": "所有按字母顺序参加选拔赛的学生的名字是什么？",
        "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "mask_query": "SELECT T1.<unk> FROM player AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk>"
    },
    {
        "db_id": "department_store",
        "question": "返回比“文书职员”更早被分配到职员部的职员的id。",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  '文书职员')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  (SELECT max(<unk>) FROM <mask> WHERE <unk>  =  '文书职员')"
    },
    {
        "db_id": "bike_1",
        "question": "对于每一个城市来说，其车站的最高纬度是什么？",
        "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "mask_query": "SELECT <unk> ,  max(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "sing_contest",
        "question": "列出歌曲的名称和语言。",
        "query": "SELECT name ,  LANGUAGE FROM songs",
        "mask_query": "SELECT <unk> ,  LANGUAGE FROM <mask>"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "返回名为罗比的用户居住的国家。",
        "query": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'Robbie';"
    },
    {
        "db_id": "epinions_1",
        "question": "有多少用户？",
        "query": "SELECT count(*) FROM useracct",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "browser_web",
        "question": "浏览器“Safari”的ID和市场份额是什么？",
        "query": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  'Safari'"
    },
    {
        "db_id": "decoration_competition",
        "question": "列出没有参加任何回合的成员的姓名。",
        "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "“李” “航”或“白” “博文”的工作人员报告了哪些问题？给出问题的ID。",
        "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"李\" AND T2.staff_last_name = \"航\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"白\" AND T2.staff_last_name = \"博文\"",
        "mask_query": "SELECT <unk> FROM problems AS T1 JOIN staff AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"李\" AND T2.<unk> = \"航\" UNION SELECT <unk> FROM problems AS T1 JOIN staff AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"白\" AND T2.<unk> = \"博文\""
    },
    {
        "db_id": "country_language",
        "question": "给出所有国家的平均司法分数。",
        "query": "SELECT avg(justice_score) FROM countries",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "driving_school",
        "question": "以“子君”为名字，“温”为姓氏的员工教的总课时有多长？",
        "query": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"子君\" AND T2.last_name = \"温\";",
        "mask_query": "SELECT sum(<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"子君\" AND T2.<unk> = \"温\";"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪种技术能用来修复最多的故障？列出技术ID和描述。",
        "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "question": "返回名字是史密斯且年龄是41岁的飞行员驾驶的飞机。",
        "query": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
        "mask_query": "SELECT <unk> FROM pilotskills WHERE <unk>  =  'Smith' AND <unk>  =  41"
    },
    {
        "db_id": "formula_1",
        "question": "对于每个国家，有多少不同的制造商？",
        "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "insurance_fnol",
        "question": "哪些客户使用了名为“取消保单”或“升级保单”的服务？给我客户的名字。",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"取消保单\" OR t3.service_name  =  \"升级保单\"",
        "mask_query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"取消保单\" OR t3.service_name  =  \"升级保单\""
    },
    {
        "db_id": "network_1",
        "question": "显示名字叫“小军”的高中学生的ID。",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"小军\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"小军\""
    },
    {
        "db_id": "soccer_1",
        "question": "“英国”有多少联赛？",
        "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"英格兰\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"英格兰\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "查找按组织类型为“研究”的被授予的授权金额超过5000的文件的发送日期",
        "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  '研究'",
        "mask_query": "SELECT T1.<unk> FROM documents AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> JOIN organisation_Types AS T4 ON T3.<unk>  =  T4.<unk> WHERE T2.<unk>  >  5000 AND T4.<unk>  =  '研究'"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "“研究院”是什么时候开始工作的？",
        "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  '研究院'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  '研究院'"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示所有销毁文件的雇员的ID。",
        "query": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "mask_query": "SELECT DISTINCT <unk> FROM Documents_to_be_destroyed"
    },
    {
        "db_id": "vehicle_driver",
        "question": "返回株洲制造的车辆的最大和平均功率。",
        "query": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
        "mask_query": "SELECT max(power) ,  avg(power) FROM <mask> WHERE builder  =  'Zhuzhou'"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "哪些文件有超过1份草稿？列出文件ID和草稿的数量。",
        "query": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;",
        "mask_query": "SELECT <unk> , count(*) FROM <mask> GROUP BY <unk> HAVING count(*)  >  1;"
    },
    {
        "db_id": "match_season",
        "question": "显示赛季中前3最常见学院的球员。",
        "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "college_1",
        "question": "“生物”系教授的名字和姓氏是什么？",
        "query": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"生物学\"",
        "mask_query": "SELECT T3.<unk> ,  T3.<unk> FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.<unk>  =  T3.<unk> WHERE <unk>  =  \"生物学\""
    },
    {
        "db_id": "customer_complaints",
        "question": "哪个省的客户最多？",
        "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> FROM customers GROUP BY <unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "club_leader",
        "question": "按年龄升序列出会员的姓名。",
        "query": "SELECT Name FROM member ORDER BY Age ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "shop_membership",
        "question": "2016年注册会员人数最多的分支机构名字和其开业的年限是什么？",
        "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.name ,  T2.open_year FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "question": "显示代表和他们所属的县的名称。",
        "query": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.County_id  =  T2.<unk>"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪种性别占员工的大多数？",
        "query": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM staff GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_company",
        "question": "叫“刘明”的飞行员的速度是多少？",
        "query": "SELECT avg(velocity) FROM flight WHERE pilot  =  \"刘明\"",
        "mask_query": "SELECT avg(velocity) FROM <mask> WHERE pilot  =  \"刘明\""
    },
    {
        "db_id": "e_learning",
        "question": "找到课程作者和学生的共同个人名字。",
        "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
        "mask_query": "SELECT <unk> FROM <mask> INTERSECT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "student_1",
        "question": "显示每间教室的教室号码并找出有多少学生在使用它。",
        "query": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
        "mask_query": "SELECT classroom ,  count(*) FROM <mask> GROUP BY classroom"
    },
    {
        "db_id": "flight_1",
        "question": "哪个目的地的航班最少？",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> FROM Flight GROUP BY <unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "school_player",
        "question": "请出示不同的教派和相应的学校的数量。",
        "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "network_2",
        "question": "来自“上海”的所有朋友的名字是什么？",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  '上海'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '上海'"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "申请学生人数最多的学位摘要名称是什么？",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "question": "装运的所有产品的名称和颜色是什么？",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk>"
    },
    {
        "db_id": "geo",
        "question": "最长的河流运行的最小状态是什么？",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> ) ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> ) );"
    },
    {
        "db_id": "network_1",
        "question": "高中生的名字是什么，每个人有多少朋友？",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id GROUP BY T1.<unk>"
    },
    {
        "db_id": "bakery_1",
        "question": "给出价格最贵的蛋糕的ID和味道。",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
        "mask_query": "SELECT id ,  flavor FROM <mask> WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "有多少种不同类型的房间？",
        "query": "SELECT count(DISTINCT roomtype) FROM room",
        "mask_query": "SELECT count(DISTINCT roomtype) FROM room"
    },
    {
        "db_id": "allergy_1",
        "question": "所有不同的“食物\"过敏是什么？",
        "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"食物\"",
        "mask_query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"食物\""
    },
    {
        "db_id": "train_station",
        "question": "显示所有没有至少15个站台的火车站的位置。",
        "query": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15",
        "mask_query": "SELECT LOCATION FROM <mask> EXCEPT SELECT LOCATION FROM <mask> WHERE number_of_platforms  >=  15"
    },
    {
        "db_id": "epinions_1",
        "question": "列出项目表中的所有信息。",
        "query": "SELECT * FROM item",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "“中国邮政”公司运送了多少份文件？",
        "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"中国邮政\";",
        "mask_query": "SELECT count(*) FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = \"中国邮政\";"
    },
    {
        "db_id": "train_station",
        "question": "展示所有有至少15个站台和25个以上乘客的火车站。",
        "query": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25",
        "mask_query": "SELECT DISTINCT LOCATION FROM <mask> WHERE number_of_platforms  >=  15 AND total_passengers  >  25"
    },
    {
        "db_id": "flight_4",
        "question": "有多少家航空公司？",
        "query": "SELECT count(*) FROM airlines",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "election",
        "question": "民主党的副州长和监查官是谁？",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"民主\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"民主\""
    },
    {
        "db_id": "dog_kennels",
        "question": "主人花了1000元以上来治疗的狗的名字是什么？",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN( SELECT <unk> FROM <mask> GROUP BY <unk> HAVING sum(<unk>)  >  1000 )"
    },
    {
        "db_id": "ship_mission",
        "question": "船舶的类型和国籍是什么？",
        "query": "SELECT TYPE ,  Nationality FROM ship",
        "mask_query": "SELECT TYPE ,  <unk> FROM <mask>"
    },
    {
        "db_id": "county_public_safety",
        "question": "按人口递减顺序显示省的人口负担。",
        "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "请列出从未被拘留或从来没有学生贷款的学生的个人资料。",
        "query": "SELECT bio_data FROM Students EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "apartment_rentals",
        "question": "“双人房”型公寓的预订开始和结束日期是什么？",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"双人房\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"双人房\""
    },
    {
        "db_id": "game_1",
        "question": "所有学生的ID和玩的小时数是多少？",
        "query": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "mask_query": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid"
    },
    {
        "db_id": "advertising_agencies",
        "question": "返回代理机构ID和每个机构的工作人员数量。",
        "query": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "购买数量最少的物品的顾客的付款方式是什么？",
        "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> JOIN order_items AS t3 ON t2.<unk>  =  t3.<unk> GROUP BY t1.<unk> ORDER BY sum(t3.<unk>) LIMIT 1"
    },
    {
        "db_id": "roller_coaster",
        "question": "列出两个过山车共享的状态。",
        "query": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "yelp",
        "question": "“米雪”的评论中的平均评级是多少？",
        "query": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"米雪\";",
        "mask_query": "SELECT AVG ( t1.<unk> ) FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"米雪\";"
    },
    {
        "db_id": "world_1",
        "question": "“阿富汗”有多少官方语言？",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"阿富汗\" AND IsOfficial  =  \"T\"",
        "mask_query": "SELECT COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"阿富汗\" AND <unk>  =  \"T\""
    },
    {
        "db_id": "riding_club",
        "question": "显示2011年后开始有教练的球员的名字和性别。",
        "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011",
        "mask_query": "SELECT T3.<unk> ,  T3.gender FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T1.<unk>  >  2011"
    },
    {
        "db_id": "concert_singer",
        "question": "在2014年和2015年同时举办音乐会的场馆名称和地点有哪些？",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "mask_query": "SELECT T2.name ,  T2.location FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.<unk>  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.<unk>  =  2015"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "返回至少有两个文档的项目ID和详细信息。",
        "query": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "mask_query": "SELECT T1.project_id ,  T1.project_details FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"
    },
    {
        "db_id": "video_game",
        "question": "按字母顺序排列的所有玩家的名字是什么？",
        "query": "SELECT Player_name FROM player ORDER BY Player_name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "college_3",
        "question": "给出教授课程数最多的老师住的大楼。",
        "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_4",
        "question": "最高海拔机场的名称，城市和国家是什么？",
        "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "city_record",
        "question": "哪个城市举办过最多的活动？",
        "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<mask> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_1",
        "question": "列出潜能前五名的球员的名字和生日。",
        "query": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY <unk> DESC LIMIT 5"
    },
    {
        "db_id": "e_government",
        "question": "计算组织使用的不同支付方法代码的数量。",
        "query": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM parties"
    },
    {
        "db_id": "world_1",
        "question": "人口前3多的国家的名字是什么？",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "college_2",
        "question": "找出姓名中含有“明”的所有讲师的姓名。",
        "query": "SELECT name FROM instructor WHERE name LIKE '明'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '明'"
    },
    {
        "db_id": "icfp_1",
        "question": "按照字母顺序排列，找出所有作者的名字。",
        "query": "SELECT fname FROM authors ORDER BY fname",
        "mask_query": "SELECT <unk> FROM authors ORDER BY <unk>"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "有多少老师教过没有取得任何成绩的学生？",
        "query": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
        "mask_query": "SELECT count(DISTINCT T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "geo",
        "question": "“长江”的流经的省有哪些城市？",
        "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" );"
    },
    {
        "db_id": "news_report",
        "question": "按升序显示记者姓名和他们报道的事件的名称。",
        "query": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T2.<unk> ASC"
    },
    {
        "db_id": "aan_1",
        "question": "哥伦比亚大学发表论文的地点和年份是什么？",
        "query": "SELECT DISTINCT T1.venue ,  T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"Columbia University\""
    },
    {
        "db_id": "riding_club",
        "question": "列出没有教练的运动员的名字。",
        "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "sports_competition",
        "question": "找出每个位置得分低于30的球员的数量。",
        "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",
        "mask_query": "SELECT count(*) ,  POSITION FROM <mask> WHERE points  <  30 GROUP BY POSITION"
    },
    {
        "db_id": "geo",
        "question": "“贵州”接壤省的最高点是什么？",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"贵州\" ) ORDER BY highest_elevation DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"贵州\" ) ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "government_shift",
        "question": "查找使用服务类型最多的的客户的名称。",
        "query": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(DISTINCT t2.service_id) DESC LIMIT 1",
        "mask_query": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(DISTINCT t2.service_id) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "员工离开项目的最后日期是什么？",
        "query": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "device",
        "question": "列出按字母降序排列的设备的载体。",
        "query": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "vehicle_driver",
        "question": "返回驾驶过功率超过5000的车辆的司机的姓名。",
        "query": "SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.driver_id  =  T2.driver_id JOIN <mask> AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000"
    },
    {
        "db_id": "wine_1",
        "question": "找出葡萄产地是“东南”地区并在2005年之前生产的葡萄酒的最高价格。",
        "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"东南\" AND T2.year  <  2005",
        "mask_query": "SELECT max(T2.<unk>) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"东南\" AND T2.year  <  2005"
    },
    {
        "db_id": "news_report",
        "question": "按照出席人数的下降顺序显示活动的日期、地点和名称。",
        "query": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",
        "mask_query": "SELECT <unk> ,  <unk> ,  venue FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "至少搜索过两次的用户的ID是什么？他们搜索了什么？",
        "query": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> GROUP BY <unk> HAVING count(*) >= 2;"
    },
    {
        "db_id": "flight_1",
        "question": "员工人数是多少？",
        "query": "SELECT count(*) FROM Employee",
        "mask_query": "SELECT count(*) FROM Employee"
    },
    {
        "db_id": "movie_1",
        "question": "“韦浩”没有评价的电影ID是什么？",
        "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"韦浩\"",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"韦浩\""
    },
    {
        "db_id": "phone_1",
        "question": "2002到2004年间推出的模型名称。",
        "query": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> BETWEEN 2002 AND 2004;"
    },
    {
        "db_id": "college_1",
        "question": "成绩最低的学生的系名是什么？",
        "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
        "mask_query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "列出每个事物的id和类型，以及拥有它的组织的详细信息。",
        "query": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id",
        "mask_query": "SELECT T1.<unk> ,  T1.type_of_Thing_Code ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "movie_1",
        "question": "至少一次没有给过4颗星评论的所有评价者的ID是什么？",
        "query": "SELECT rID FROM Rating WHERE stars != 4",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != 4"
    },
    {
        "db_id": "e_commerce",
        "question": "每种性别买多少种产品？",
        "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Order_items AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "college_3",
        "question": "没有学生参与辅修的专业的名字 是什么？",
        "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "mask_query": "SELECT <unk> FROM DEPARTMENT EXCEPT SELECT T1.<unk> FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "显示文档细节和有“个人计划”细节描述的对应的文档名称。",
        "query": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  \"个人计划\"",
        "mask_query": "SELECT T1.statement_details ,  T2.document_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  \"个人计划\""
    },
    {
        "db_id": "world_1",
        "question": "“非洲”中部的平均预期寿命是多少？?",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"非洲\"",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  \"非洲\""
    },
    {
        "db_id": "imdb",
        "question": "“成龙”出演的电影是什么？",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"成龙\";",
        "mask_query": "SELECT t2.<unk> FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"成龙\";"
    },
    {
        "db_id": "college_1",
        "question": "哪个系提供最多的学分？",
        "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "mask_query": "SELECT T3.dept_name FROM course AS T1 JOIN <mask> AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1"
    },
    {
        "db_id": "department_management",
        "question": "列出每个部门的创建年份、名称和预算。",
        "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
        "mask_query": "SELECT creation ,  <unk> ,  budget_in_billions FROM <mask>"
    },
    {
        "db_id": "car_1",
        "question": "哪些车型是“上汽”公司生产的，或者重量超过3500？",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  '上汽' OR T4.weight  >  3500;",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.<unk>  =  T2.<unk> JOIN CAR_MAKERS AS T3 ON T2.<unk>  =  T3.<unk> JOIN CARS_DATA AS T4 ON T1.<unk>  =  T4.<unk> WHERE T3.<unk>  =  '上汽' OR T4.weight  >  3500;"
    },
    {
        "db_id": "formula_1",
        "question": "找出ID为841的比赛中所有比一些车手停站时间更少的车手的ID和停站次数。",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",
        "mask_query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE <unk>  <  (SELECT max(<unk>) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "db_id": "cinema",
        "question": "找到有电影院的不同地点。",
        "query": "SELECT DISTINCT LOCATION FROM cinema",
        "mask_query": "SELECT DISTINCT LOCATION FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "哪些员工没有销毁过任何文件？找到他们的雇员ID。",
        "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "mask_query": "SELECT employee_id FROM <mask> EXCEPT SELECT <unk> FROM Documents_to_be_destroyed"
    },
    {
        "db_id": "academic",
        "question": "把在2005年之前发表在“PVLDB”中的论文的总引用量返回。",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" AND t2.<unk>  <  2005;"
    },
    {
        "db_id": "culture_company",
        "question": "有多少读书俱乐部？",
        "query": "SELECT count(*) FROM book_club",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "club_leader",
        "question": "会员的姓名和国籍是什么？",
        "query": "SELECT Name ,  Nationality FROM member",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "warehouse_1",
        "question": "找到所有价值高于任何以岩石为存储物的价值的箱子的代码。",
        "query": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "mask_query": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "哪个组织雇佣了最多的研究人员？列出组织ID、类型和细节。",
        "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_1",
        "question": "学生们在哪家餐厅花费最少的时间？列出餐厅和学生的总花费时间。",
        "query": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;",
        "mask_query": "SELECT <mask>.<unk> ,  sum(<mask>.<unk>) FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> GROUP BY <mask>.<unk> ORDER BY sum(<mask>.<unk>) ASC LIMIT 1;"
    },
    {
        "db_id": "coffee_shop",
        "question": "找到每个住址的会员的数量。",
        "query": "SELECT count(*) ,  address FROM member GROUP BY address",
        "mask_query": "SELECT count(*) ,  address FROM <mask> GROUP BY address"
    },
    {
        "db_id": "device",
        "question": "有设备的库存种类最多的商店叫什么名字？",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "decoration_competition",
        "question": "显示国家“美国”或“加拿大”的成员的名字。",
        "query": "SELECT Name FROM member WHERE Country  =  \"美国\" OR Country  =  \"加拿大\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"美国\" OR <unk>  =  \"加拿大\""
    },
    {
        "db_id": "device",
        "question": "按开业年度升序排序返回店铺的名称。",
        "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "geo",
        "question": "人口最小的国家的最高点是什么？",
        "query": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "imdb",
        "question": "找出所有“刘德华”扮演“狄仁杰”的电影",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"刘德华\" AND t3.role  =  \"狄仁杰\";",
        "mask_query": "SELECT t2.<unk> FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"刘德华\" AND t3.<unk>  =  \"狄仁杰\";"
    },
    {
        "db_id": "yelp",
        "question": "找出评级高于4.5分的“成都”“餐厅”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"成都\" AND t1.rating  >  4.5 AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"成都\" AND t1.<unk>  >  4.5 AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "scholar",
        "question": "谁在“CHI”发布了最多数量的论文？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"CHI\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.venueid  =  t2.venueid JOIN <mask> AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"CHI\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
    },
    {
        "db_id": "poker_player",
        "question": "有哪些不同的民族，来自每个民族的相应人数是多少？",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "warehouse_1",
        "question": "箱子的平均值是多少？",
        "query": "SELECT avg(value) FROM boxes",
        "mask_query": "SELECT avg(value) FROM boxes"
    },
    {
        "db_id": "swimming",
        "question": "找出所有游泳运动员的名字，按他们的100米成绩按升序排列。",
        "query": "SELECT name FROM swimmer ORDER BY meter_100",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "bike_racing",
        "question": "有多少自行车比780克重？",
        "query": "SELECT count(*) FROM bike WHERE weight  >  780",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  780"
    },
    {
        "db_id": "music_1",
        "question": "在“现代”音乐流派中，所有具有高于平均分辨率的歌曲的id是什么？",
        "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"现代\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  \"现代\")"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "我们有多少交易？",
        "query": "SELECT count(*) FROM Financial_transactions",
        "mask_query": "SELECT count(*) FROM Financial_transactions"
    },
    {
        "db_id": "imdb",
        "question": "哪部电影“中国”演员最多？",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"中国\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM CAST AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"中国\" GROUP BY t2.<unk> ORDER BY COUNT ( DISTINCT t1.<unk>  ) DESC LIMIT 1;"
    },
    {
        "db_id": "college_2",
        "question": "按薪水递增顺序列出所有教员的信息。",
        "query": "SELECT * FROM instructor ORDER BY salary",
        "mask_query": "SELECT * FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "club_1",
        "question": "“北大创业俱乐部”俱乐部的成员都有谁？显示他们的姓氏。",
        "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"北大创业俱乐部\"",
        "mask_query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"北大创业俱乐部\""
    },
    {
        "db_id": "bbc_channels",
        "question": "找出最老的导演的名字。",
        "query": "SELECT name FROM director ORDER BY age DESC LIMIT 1",
        "mask_query": "SELECT name FROM <mask> ORDER BY age DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "列出具有完成状态和“论文”类型且不是由名为“中国邮政”公司代理运输的文件的文件ID。",
        "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"完结\" AND document_type_code = \"论文\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"中国邮政\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"完结\" AND <unk> = \"论文\" EXCEPT SELECT <unk> FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = \"中国邮政\";"
    },
    {
        "db_id": "concert_singer",
        "question": "最年轻歌手的所有歌曲的名字和发行年是多少？",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "mask_query": "SELECT song_name ,  song_release_year FROM <mask> ORDER BY age LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "2010年什么期刊发表了关于“营养级联”的文章？",
        "query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"营养级联\" AND t3.year  =  2010 GROUP BY t3.journalid;",
        "mask_query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"营养级联\" AND t3.<unk>  =  2010 GROUP BY t3.journalid;"
    },
    {
        "db_id": "geo",
        "question": "最低点的省会是那个",
        "query": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) ;"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "文档子集的名称是什么？",
        "query": "SELECT Document_Subset_Name FROM Document_Subsets;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "driving_school",
        "question": "客户的最大、最小和平均金额是多少？",
        "query": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) ,  avg(<unk>) FROM <mask>;"
    },
    {
        "db_id": "club_1",
        "question": "返回俱乐部“网球俱乐部”会员的平均年龄。",
        "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"网球俱乐部\"",
        "mask_query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"网球俱乐部\""
    },
    {
        "db_id": "race_track",
        "question": "有最多比赛次数的赛道的名字是什么？",
        "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "国家元首是“布什”的国家使用的官方语言是什么？",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"Beatrix\" AND T2.<unk>  =  \"T\""
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "查找最常用保险单的类型代码。",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "video_game",
        "question": "显示来自“俄克拉何马”大学和“奥本”大学的玩家所玩游戏的名称。",
        "query": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"Oklahoma\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"Auburn\""
    },
    {
        "db_id": "election",
        "question": "查找与第1区或第2区的代表相关的各党。谁担任这些政党的监查官？",
        "query": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  1 OR T1.<unk>  =  2"
    },
    {
        "db_id": "allergy_1",
        "question": "所有学生的全名是什么？",
        "query": "SELECT Fname ,  Lname FROM Student",
        "mask_query": "SELECT <unk> ,  Lname FROM <mask>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "显示项目的数量。",
        "query": "SELECT count(*) FROM Projects",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "department_store",
        "question": "查找地址包含“湖南”省且不使用“信用卡”付款的客户的ID和名字。",
        "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"湖南\" AND payment_method_code != \"信用卡\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers WHERE <unk> LIKE \"湖南\" AND <unk> != \"信用卡\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "取得最多的成果的项目细节和ID是什么？",
        "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Project_outcomes AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "question": "列出那些抓举成绩高于140分或身高高于200的健美运动员的体重。",
        "query": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;",
        "mask_query": "SELECT T2.weight FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;"
    },
    {
        "db_id": "scholar",
        "question": "有多少份论文？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM <mask>;"
    },
    {
        "db_id": "driving_school",
        "question": "“温”“子君” 住在哪个城市？",
        "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"子君\" AND T2.last_name = \"温\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"子君\" AND T2.<unk> = \"温\";"
    },
    {
        "db_id": "college_1",
        "question": "找到员工总数。",
        "query": "SELECT count(*) FROM employee",
        "mask_query": "SELECT count(*) FROM employee"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "给出账户最少的客户的全名和客户ID。",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“杰米·卡兰”每年发表的论文",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"杰米·卡兰\" ORDER BY t3.year;",
        "mask_query": "SELECT DISTINCT t3.paperid  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"杰米·卡兰\" ORDER BY t3.<unk>;"
    },
    {
        "db_id": "address_1",
        "question": "离波士顿最远的城市叫什么名字？",
        "query": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"Boston\" ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "car_1",
        "question": "法国的汽车制造商有多少？",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  '法国';",
        "mask_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '法国';"
    },
    {
        "db_id": "network_2",
        "question": "年龄最大的“学生”叫什么名字？",
        "query": "SELECT name FROM Person WHERE job  =  '学生' AND age  =  (SELECT max(age) FROM person WHERE job  =  '学生' )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '学生' AND <unk>  =  (SELECT max(<unk>) FROM person WHERE <unk>  =  '学生' )"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "返回批次细节和投资者ID 。",
        "query": "SELECT lot_details ,  investor_id FROM LOTS",
        "mask_query": "SELECT <unk> ,  <unk> FROM LOTS"
    },
    {
        "db_id": "perpetrator",
        "question": "列出那些不是犯罪者的人的名字。",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "hr_1",
        "question": "显示名字不包含“男”字的雇员的全名（名字和姓氏）、雇用日期、工资和部门号码。",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '男'",
        "mask_query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM <mask> WHERE first_name NOT LIKE '男'"
    },
    {
        "db_id": "course_teach",
        "question": "列出最常见的教师的家乡。",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "最近一次搜索是什么时候？",
        "query": "SELECT max(search_datetime) FROM User_Searches;",
        "mask_query": "SELECT max(<unk>) FROM <mask>;"
    },
    {
        "db_id": "department_store",
        "question": "每种付款方式有多少客户使用？",
        "query": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM customers GROUP BY <unk>"
    },
    {
        "db_id": "musical",
        "question": "返回每个演员的角色和持续时间。",
        "query": "SELECT Character ,  Duration FROM actor",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "storm_record",
        "question": "显示至少影响两个地区和10个城市的风暴名称。",
        "query": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "mask_query": "SELECT T1.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"
    },
    {
        "db_id": "department_store",
        "question": "既有“新”订单又有“延迟”的客户的姓名和地址是什么？",
        "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"新\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"延迟\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"新\" INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"延迟\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示超过1个浴室的公寓中出现次数最多的公寓类型代码。",
        "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  1 GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "school_finance",
        "question": "除捐献金额小于9的捐赠者外，其他捐赠者的姓名。",
        "query": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask> WHERE <unk>  <  9"
    },
    {
        "db_id": "art_1",
        "question": "宽度小于600或高度大于800的绘画作品的名称是什么？",
        "query": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
        "mask_query": "SELECT <unk> FROM paintings WHERE <unk>  <  600 OR <unk>  >  800"
    },
    {
        "db_id": "bike_1",
        "question": "对于每个城市，按其最高站点纬度降序排列，列出它们的名称。",
        "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY max(<unk>) DESC"
    },
    {
        "db_id": "device",
        "question": "显示库存量最大的商店的名称。",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY SUM(T1.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "2015岁的电影“欢乐”的导演是谁？",
        "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"欢乐\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t3.<unk>  =  2015 AND t3.<unk>  =  \"欢乐\";"
    },
    {
        "db_id": "college_3",
        "question": "在“管理部”部门或在“财务部”部门和建筑“行政”部门的名称是什么？",
        "query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"管理部\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"财务部\" AND Building  =  \"行政\"",
        "mask_query": "SELECT <unk> FROM DEPARTMENT WHERE <unk>  =  \"管理部\" UNION SELECT <unk> FROM DEPARTMENT WHERE <unk>  =  \"财务部\" AND <unk>  =  \"行政\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "查找戏剧工作组使用的不同货币代码的数量。",
        "query": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "book_2",
        "question": "不同出版日期的出版物数量是多少？",
        "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
        "mask_query": "SELECT COUNT (DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "wine_1",
        "question": "列出所有的葡萄产地的地区和县。",
        "query": "SELECT Area ,  County FROM APPELLATIONS",
        "mask_query": "SELECT <unk> ,  <unk> FROM APPELLATIONS"
    },
    {
        "db_id": "yelp",
        "question": "找出所有超过100个评论的“宠物梳理师”",
        "query": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"宠物梳理师\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  >  100 AND t2.<unk>  =  \"宠物梳理师\";"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "没有任何房产的用户输入了哪些搜索字符串？",
        "query": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>;"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”的论文所在期刊的数量。",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "store_product",
        "question": "查找城市区域降序排列的所有区域名称。",
        "query": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> ORDER BY city_area DESC"
    },
    {
        "db_id": "academic",
        "question": "返回有超过10篇论文包含关键字“关系型数据库”的作者。",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"关系型数据库\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"关系型数据库\" GROUP BY t2.<unk> HAVING COUNT ( DISTINCT t3.<unk> )  >  10;"
    },
    {
        "db_id": "music_1",
        "question": "找出“孟加拉语”歌曲数量前3多的艺术家。",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"孟加拉语\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"孟加拉语\" GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "insurance_policies",
        "question": "在所有索赔中，索赔金额最少的索赔额是多少？列出结算金额和索赔金额。",
        "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "在“厦门”找出所有拥有至少30条评论且平均评级高于3分的“酒吧”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"厦门\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"酒吧\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"厦门\" AND t1.<unk>  >  3 AND t1.<unk>  >  30 AND t2.<unk>  =  \"酒吧\";"
    },
    {
        "db_id": "store_1",
        "question": "“摇滚”是什么类型的曲目的名字？",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"摇滚\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"摇滚\";"
    },
    {
        "db_id": "academic",
        "question": "返回在2000年后在“数据库”领域中引用次数最多的论文。",
        "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"数据库\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1;",
        "mask_query": "SELECT t3.<unk> FROM DOMAIN AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"数据库\" AND t3.<unk>  >  2000 ORDER BY t3.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "document_management",
        "question": "用户的角色代码有哪些，每个用户有多少个？",
        "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code",
        "mask_query": "SELECT count(*) ,  <unk> FROM users GROUP BY <unk>"
    },
    {
        "db_id": "sports_competition",
        "question": "哪个国家参加过最多的比赛？",
        "query": "SELECT country FROM competition WHERE competition_type  =  '锦标赛' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT country FROM <mask> WHERE competition_type  =  '锦标赛' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "orchestra",
        "question": "指挥过最多的管弦乐队的指挥家叫什么名字？",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "video_game",
        "question": "列出游戏数量最多的专营店的名称。",
        "query": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "university_rank",
        "question": "研究点数最高的大学叫什么？",
        "query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
        "mask_query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示所有作出任何交易且股票计数超过100的投资者的细节。",
        "query": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100",
        "mask_query": "SELECT T1.<unk> FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  100"
    },
    {
        "db_id": "geo",
        "question": "最小的省的人口是多少？",
        "query": "SELECT population FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "entertainment_awards",
        "question": "显示提及“抽象”类型的艺术品的艺术节名称。",
        "query": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"抽象\"",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"抽象\""
    },
    {
        "db_id": "insurance_fnol",
        "question": "哪些保险单类型在保险单中出现最多？",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM available_policies GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "question": "每门课程有多少注册学生？列出课程名称和注册的学生人数？",
        "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
        "mask_query": "SELECT T3.<unk> ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.<unk> = T2.<unk> JOIN courses AS T3 ON T2.<unk> = T3.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "coffee_shop",
        "question": "哪一个月有最多的快乐时间？",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT MONTH FROM <mask> GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出每个地区的发言人人数，以及显示地区名称。",
        "query": "SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID",
        "mask_query": "SELECT t1.name ,  count(*) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk>"
    },
    {
        "db_id": "music_1",
        "question": "每种语言具有最多数量超过500分辨率的歌曲的歌手叫什么名字？",
        "query": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  500 GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "谁引用“丹尼尔·里德尔”次数最多",
        "query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"丹尼尔·里德尔\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t4 ON t2.paperid  =  t4.citedpaperid JOIN <mask> AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"丹尼尔·里德尔\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
    },
    {
        "db_id": "orchestra",
        "question": "那位工作时间最长的指挥家叫什么名字？",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "question": "返回最早租房的客户的全名。",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示类型代码为“销售中”的所有交易的日期。",
        "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"销售中\"",
        "mask_query": "SELECT <unk> FROM TRANSACTIONS WHERE <unk>  =  \"销售中\""
    },
    {
        "db_id": "college_2",
        "question": "50到100个学生可以坐的教室号码和相应的建筑是什么？",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> BETWEEN 50 AND 100"
    },
    {
        "db_id": "phone_1",
        "question": "列出“小米”生产的或屏幕模式类型为“图像”的手机的硬件型号名称。",
        "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"图像\" OR t2.Company_name  =  \"小米\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<mask> WHERE T1.<unk>  =  \"图像\" OR t2.<unk>  =  \"小米\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "哪一个营销区域有最多的戏剧工作群？给出区域号。",
        "query": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "swimming",
        "question": "找出那些游泳运动员去过的体育场馆的名称。",
        "query": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.event_id  =  t2.id JOIN <mask> AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "news_report",
        "question": "所有事件的平均和最大出席率是多少？",
        "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
        "mask_query": "SELECT avg(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "club_1",
        "question": "查找至少有一个成员来自城市的代码是“重庆”的城市的俱乐部的名称，。",
        "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"重庆\"",
        "mask_query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.<unk>  =  \"重庆\""
    },
    {
        "db_id": "college_2",
        "question": "统计有顾问的学生人数。",
        "query": "SELECT count(DISTINCT s_id) FROM advisor",
        "mask_query": "SELECT count(DISTINCT s_id) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "把“PVLDB”的每一篇论文的引用数返回。",
        "query": "SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "flight_4",
        "question": "航线最多的航空公司叫什么名字？",
        "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "browser_web",
        "question": "列出与“CACHEbox”和“Fasterfox”兼容的浏览器的名称。",
        "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'",
        "mask_query": "SELECT T3.<unk> FROM web_client_accelerator AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  'CACHEbox' INTERSECT SELECT T3.<unk> FROM web_client_accelerator AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  'Fasterfox'"
    },
    {
        "db_id": "customers_and_orders",
        "question": "最常见的产品类型代码是什么？",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“布莱恩·德兰奇”的主要主题",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"布莱恩·德兰奇\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "mask_query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"布莱恩·德兰奇\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;"
    },
    {
        "db_id": "department_management",
        "question": "显示由临时代理值为“是”的负责人所管理的部门的员工姓名和数目？",
        "query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  '是'",
        "mask_query": "SELECT T1.<unk> ,  T1.num_employees FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id WHERE T2.<unk>  =  '是'"
    },
    {
        "db_id": "movie_1",
        "question": "一个评分能得到的最大和最小的星数是多少？",
        "query": "SELECT max(stars) ,  min(stars) FROM Rating",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "baseball_1",
        "question": "计算“广州恒大队”的球员的平均工资。",
        "query": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = '广州恒大队'",
        "mask_query": "SELECT avg(T1.<mask>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  = '广州恒大队'"
    },
    {
        "db_id": "baseball_1",
        "question": "从2000年到2010年“广州恒大队”主场的比赛数是多少？",
        "query": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  '广州恒大队' AND T1.year BETWEEN 2000 AND 2010;",
        "mask_query": "SELECT sum(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '广州恒大队' AND T1.<unk> BETWEEN 2000 AND 2010;"
    },
    {
        "db_id": "customer_deliveries",
        "question": "查找前5名客户的姓名。",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> LIMIT 5"
    },
    {
        "db_id": "world_1",
        "question": "哪一个大陆有最多不同种的语言？",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "school_bus",
        "question": "显示所有校车的学校名称和司机姓名。",
        "query": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
        "mask_query": "SELECT T2.<mask> ,  T3.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.school_id  =  T2.school_id JOIN <mask> AS T3 ON T1.driver_id  =  T3.driver_id"
    },
    {
        "db_id": "insurance_fnol",
        "question": "给我一个按字母顺序排序的所有服务名称的列表。",
        "query": "SELECT service_name FROM services ORDER BY service_name",
        "mask_query": "SELECT service_name FROM services ORDER BY service_name"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "那些以停车或购物为特色的旅游景点叫什么名字？",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  \"park\" UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  \"shopping\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.feature_Details  =  \"park\" UNION SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.feature_Details  =  \"shopping\""
    },
    {
        "db_id": "epinions_1",
        "question": "查找提供最多评论的用户的名称。",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "entertainment_awards",
        "question": "列出最常见的艺术品类型。",
        "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE FROM <mask> GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "party_host",
        "question": "以主持人数量升序列出各个聚会的主题。",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "scholar",
        "question": "那一年“曹烨”出版了最多数量论文？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"%曹烨%\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"%曹烨%\" GROUP BY t3.<unk> ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;"
    },
    {
        "db_id": "wrestler",
        "question": "所有摔跤运动员的统治和保持日子是怎样的？",
        "query": "SELECT Reign ,  Days_held FROM wrestler",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "参与者的详细信息不包含“李强”的活动的id是什么？",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  '李强'",
        "mask_query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  '李强'"
    },
    {
        "db_id": "sports_competition",
        "question": "所有得分高于平均分数的球员的名字是什么？",
        "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE points  >  (SELECT avg(points) FROM <mask>)"
    },
    {
        "db_id": "advertising_agencies",
        "question": "按会议ID统计每次会议的工作人员数量。",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM Staff_in_meetings GROUP BY <unk>"
    },
    {
        "db_id": "swimming",
        "question": "有多少个体育场？",
        "query": "SELECT count(*) FROM stadium",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "movie_1",
        "question": "按年份由远及近列出有电影获得4或5星级的评分的年份有哪些？",
        "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
        "mask_query": "SELECT DISTINCT YEAR FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >=  4 ORDER BY T1.<unk>"
    },
    {
        "db_id": "loan_1",
        "question": "来自“江西”或“云南”的每个客户的总账户余额是多少？",
        "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  '江西' OR state  =  '云南'",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  '江西' OR <unk>  =  '云南'"
    },
    {
        "db_id": "boat_1",
        "question": "有多少艘船？",
        "query": "SELECT count(*) FROM Boats",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回在“北京理工大学”“数据库”领域的有5000多篇论文总引用的作者。",
        "query": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"数据库\" AND t5.name  =  \"北京理工大学\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t6 JOIN <mask> AS t1 ON t6.<unk>  =  t1.<unk> JOIN DOMAIN AS t3 ON t3.<unk>  =  t6.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t2.<unk>  =  t4.<unk> WHERE t3.<unk>  =  \"数据库\" AND t5.<unk>  =  \"北京理工大学\" GROUP BY t1.<unk> HAVING SUM ( t4.<unk> )  >  5000;"
    },
    {
        "db_id": "e_government",
        "question": "找处最流行的组织形式的组织电子邮件。",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT t1.<unk> FROM parties AS t1 JOIN party_forms AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  (SELECT <unk> FROM party_forms GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "icfp_1",
        "question": "找到“百度”出版的所有论文。",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"百度\"",
        "mask_query": "SELECT DISTINCT t1.<unk> FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.<unk>  =  \"百度\""
    },
    {
        "db_id": "inn_1",
        "question": "找出客户名包括'浩'字的客户预定的房间的名称。",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '浩'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE firstname LIKE '浩'"
    },
    {
        "db_id": "club_1",
        "question": "“文学”俱乐部的描述是什么？",
        "query": "SELECT clubdesc FROM club WHERE clubname  =  \"文学\"",
        "mask_query": "SELECT clubdesc FROM club WHERE clubname  =  \"文学\""
    },
    {
        "db_id": "music_1",
        "question": "找出所有比“英文”歌曲分辨率更高的歌曲的不同名称。",
        "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"英文\")",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  (SELECT min(<unk>) FROM <mask> WHERE <unk>  =  \"英文\")"
    },
    {
        "db_id": "address_1",
        "question": "显示居住在马里兰州的学生的名字和姓氏。",
        "query": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
        "mask_query": "SELECT T2.<unk> ,  T2.Lname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"MD\""
    },
    {
        "db_id": "world_1",
        "question": "有多少洲说“汉语”？",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"汉语\"",
        "mask_query": "SELECT COUNT( DISTINCT <unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"汉语\""
    },
    {
        "db_id": "icfp_1",
        "question": "哪篇文章的标题包含“数据库”一词？",
        "query": "SELECT title FROM papers WHERE title LIKE \"数据库\"",
        "mask_query": "SELECT <unk> FROM papers WHERE <unk> LIKE \"数据库\""
    },
    {
        "db_id": "customer_deliveries",
        "question": "有多少种不同的支付方式？",
        "query": "SELECT count(DISTINCT payment_method) FROM customers",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM customers"
    },
    {
        "db_id": "academic",
        "question": "返回作者是“李政道”的论文数量。",
        "query": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "theme_gallery",
        "question": "数一数出席人数超过100人或门票价格低于10人的展览会数量。",
        "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10"
    },
    {
        "db_id": "mountain_photos",
        "question": "根据照片的数量排序的每个镜头的名称和用该镜头拍摄照片的数量是多少？",
        "query": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*)"
    },
    {
        "db_id": "college_3",
        "question": "按学分排序列出的课程名称。",
        "query": "SELECT CName FROM COURSE ORDER BY Credits",
        "mask_query": "SELECT <unk> FROM COURSE ORDER BY <unk>"
    },
    {
        "db_id": "institution_sports",
        "question": "机构所在的城市和省份是什么？",
        "query": "SELECT City ,  Province FROM institution",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "hospital_1",
        "question": "那些没有服用“扑热息痛”的患者的姓名是什么？",
        "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  '扑热息痛'",
        "mask_query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN <mask> AS T2 ON T2.<mask>  =  T1.<unk> JOIN <mask> AS T3 ON T2.<mask>  =  T3.<unk> WHERE T3.name  =  '扑热息痛'"
    },
    {
        "db_id": "bakery_1",
        "question": "给出3到7美元的饼干或蛋糕的ID。",
        "query": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
        "mask_query": "SELECT id FROM <mask> WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7"
    },
    {
        "db_id": "activity_1",
        "question": "我们有什么等级的教员？",
        "query": "SELECT DISTINCT rank FROM Faculty",
        "mask_query": "SELECT DISTINCT rank FROM <mask>"
    },
    {
        "db_id": "imdb",
        "question": "“张家辉”出生于哪一年？",
        "query": "SELECT birth_year FROM actor WHERE name  =  \"张家辉\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"张家辉\";"
    },
    {
        "db_id": "hr_1",
        "question": "找到在所有部门中挣的工资最低的员工的名字、姓氏和部门id。",
        "query": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "mask_query": "SELECT first_name ,  last_name ,  department_id FROM <mask> WHERE salary IN (SELECT MIN(salary) FROM <mask> GROUP BY department_id)"
    },
    {
        "db_id": "hr_1",
        "question": "显示工资在8000到12000范围内且佣金不为“空”或部门编号不等于40的员工的所有信息。",
        "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"空\" OR  department_id != 40",
        "mask_query": "SELECT * FROM <mask> WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"空\" OR  department_id != 40"
    },
    {
        "db_id": "network_2",
        "question": "找出与“丽丽”成为朋友时间最短的人的名字。",
        "query": "SELECT name FROM PersonFriend WHERE friend =  '丽丽' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  '丽丽')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> =  '丽丽' AND YEAR  =  (SELECT min(YEAR) FROM <mask> WHERE <unk> =  '丽丽')"
    },
    {
        "db_id": "conference",
        "question": "没有参加任何ACL会议的人的姓名和国籍是什么？",
        "query": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
        "mask_query": "SELECT <unk> ,  nationality FROM <mask> WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.<unk>  =  \"ACL\")"
    },
    {
        "db_id": "planet_1",
        "question": "每个星球的总出货量是多少？列出行星名称和总发货量。",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> GROUP BY T1.<mask>;"
    },
    {
        "db_id": "imdb",
        "question": "谁在电影“霸王别姬”中扮演“程蝶衣”？",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"程蝶衣\" AND t3.title  =  \"霸王别姬\";",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"程蝶衣\" AND t3.<unk>  =  \"霸王别姬\";"
    },
    {
        "db_id": "body_builder",
        "question": "体重最大的健美运动员叫什么名字？",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "battle_death",
        "question": "在保加利亚指挥官“卡洛扬”和拉丁指挥官“鲍德温一世”之间，有哪些不同的战斗名称？",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  '卡洛扬' AND latin_commander  =  '鲍德温一世'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '卡洛扬' AND <unk>  =  '鲍德温一世'"
    },
    {
        "db_id": "party_host",
        "question": "显示最老主持人的名字和国籍。",
        "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM HOST ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "在“成都”有多少间“酒吧”的评级在3.5以上？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"成都\" AND t1.rating  >  3.5 AND t2.category_name  =  \"酒吧\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"成都\" AND t1.<unk>  >  3.5 AND t2.<unk>  =  \"酒吧\";"
    },
    {
        "db_id": "allergy_1",
        "question": "列出了多少不同的顾问？",
        "query": "SELECT count(DISTINCT advisor) FROM Student",
        "mask_query": "SELECT count(DISTINCT advisor) FROM <mask>"
    },
    {
        "db_id": "headphone_store",
        "question": "哪款耳机价格最高？",
        "query": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
        "mask_query": "SELECT model FROM <mask> ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "question": "查找评价日期为'空'的所有评论者的姓名。",
        "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"null\""
    },
    {
        "db_id": "art_1",
        "question": "列出按年份订购的材料为油画的油画编号、位置和名称。",
        "query": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
        "mask_query": "SELECT <unk> ,  <unk> ,  LOCATION FROM paintings WHERE <unk>  =  \"oil\" ORDER BY YEAR"
    },
    {
        "db_id": "hospital_1",
        "question": "按字母顺序排序的护士名字是什么？",
        "query": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "mask_query": "SELECT DISTINCT name FROM nurse ORDER BY name"
    },
    {
        "db_id": "online_exams",
        "question": "列出没有答案的学生的名字。",
        "query": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "farm",
        "question": "返回城市的不同状态，按频率递增排序。",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "restaurant_1",
        "question": "列出所有餐厅类型。",
        "query": "SELECT ResTypeName FROM Restaurant_Type;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "e_commerce",
        "question": "有多少不同的顾客订过东西？",
        "query": "SELECT count(DISTINCT customer_id) FROM Orders",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "match_season",
        "question": "不同的球员是谁，他们参加了多少年？",
        "query": "SELECT Player ,  Years_Played FROM player",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "voter_2",
        "question": "那些有副主席选票并居住在城市代码不是“沪”的城市的学生的名字是什么？",
        "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"沪\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT <unk> FROM STUDENT WHERE <unk>  =  \"沪\""
    },
    {
        "db_id": "roller_coaster",
        "question": "按长度递增的顺序列出过山车的名称。",
        "query": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY LENGTH ASC"
    },
    {
        "db_id": "yelp",
        "question": "找出“星期日”在每一个省的“意大利”“餐厅”的总访问数",
        "query": "SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"意大利\" AND t3.category_name  =  \"餐馆\" AND t4.day  =  \"星期日\" GROUP BY t1.state;",
        "mask_query": "SELECT t1.<unk>  ,  SUM ( t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"意大利\" AND t3.<unk>  =  \"餐馆\" AND t4.<unk>  =  \"星期日\" GROUP BY t1.<unk>;"
    },
    {
        "db_id": "pets_1",
        "question": "找到没有宠物猫的学生的ID。",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫'",
        "mask_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫'"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "有销售区域代码为“西南”的商店地址所在的省或县是什么？",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"西南\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"西南\""
    },
    {
        "db_id": "news_report",
        "question": "列出参加人数最多的2个的活动的地点和名称。",
        "query": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
        "mask_query": "SELECT venue ,  name FROM <mask> ORDER BY <unk> DESC LIMIT 2"
    },
    {
        "db_id": "car_racing",
        "question": "请返回每个司机的姓名和国家。",
        "query": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Country_ID  =  T2.<unk>"
    },
    {
        "db_id": "music_4",
        "question": "请显示音乐节的结果和以此计数的音乐节的数量。",
        "query": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
        "mask_query": "SELECT RESULT ,  COUNT(*) FROM <mask> GROUP BY RESULT ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "game_1",
        "question": "不踢“足球”的所有男生的ID是什么？",
        "query": "SELECT StuID FROM Student WHERE sex  =  \"M\" EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"足球\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE sex  =  \"M\" EXCEPT SELECT <unk> FROM Sportsinfo WHERE sportname  =  \"足球\""
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”的网站主页。",
        "query": "SELECT homepage FROM organization WHERE name  =  \"北京理工大学\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "university_basketball",
        "question": "统计不参加篮球比赛的大学数量。",
        "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE school_id NOT IN (SELECT school_id FROM <mask>)"
    },
    {
        "db_id": "department_store",
        "question": "返回所有订购三次以上或购买金额为80000以上的产品的标识。",
        "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  3 UNION SELECT <unk> FROM <mask> GROUP BY <unk> HAVING sum(<unk>)  >  80000"
    },
    {
        "db_id": "poker_player",
        "question": "有多少扑克玩家？",
        "query": "SELECT count(*) FROM poker_player",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "city_record",
        "question": "找出人口最多的城市的GDP。",
        "query": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "mask_query": "SELECT gdp FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "在2015年“王岩”写了多少评论",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"王岩\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  2015 AND t2.<unk>  =  \"王岩\";"
    },
    {
        "db_id": "film_rank",
        "question": "统计城市数量少于300的市场数量。",
        "query": "SELECT count(*) FROM market WHERE Number_cities  <  300",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  <  300"
    },
    {
        "db_id": "pilot_1",
        "question": "找到那些拥有单翼飞机或F-14战斗机的飞行员的名字。",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
        "mask_query": "SELECT <unk> FROM pilotskills WHERE <unk>  =  'Piper Cub' OR <unk>  =  'F-14 Fighter'"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "返回产品名为“芝麻”的特征名称。",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"芝麻\"",
        "mask_query": "SELECT t3.<unk> FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"芝麻\""
    },
    {
        "db_id": "scholar",
        "question": "第一篇“深度学习”的论文是什么？",
        "query": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"深度学习\" ORDER BY t4.year ASC;",
        "mask_query": "SELECT DISTINCT t2.datasetid  ,  t4.<unk> FROM paperdataset AS t3 JOIN <mask> AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"深度学习\" ORDER BY t4.<unk> ASC;"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "段落包含文本“巴西”和“爱尔兰”的文档的ID是什么？",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  '巴西' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  '爱尔兰'",
        "mask_query": "SELECT document_id FROM <mask> WHERE paragraph_text  =  '巴西' INTERSECT SELECT document_id FROM <mask> WHERE paragraph_text  =  '爱尔兰'"
    },
    {
        "db_id": "singer",
        "question": "请显示歌手最常见的国籍。",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "film_rank",
        "question": "列出所有电影的不同导演。",
        "query": "SELECT DISTINCT Director FROM film",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "vehicle_rent",
        "question": "显示租赁历史记录最多的车辆的名称和车型年份。",
        "query": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "“马” “志强”拥有的客户数是多少？",
        "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"马\" AND T1.last_name = \"志强\";",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk> = T1.<unk> WHERE T1.<unk> = \"马\" AND T1.<unk> = \"志强\";"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "所有的付款方式是什么？",
        "query": "SELECT DISTINCT payment_method FROM customers",
        "mask_query": "SELECT DISTINCT <unk> FROM customers"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "按照月租金降序排序，查找学生住址的所有信息。",
        "query": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
        "mask_query": "SELECT * FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "allergy_1",
        "question": "显示所有城市和相应的学生数量。",
        "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "company_employee",
        "question": "所有公司的总部和产业是什么？",
        "query": "SELECT Headquarters ,  Industry FROM company",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "imdb",
        "question": "找出所有和“周润发”出演同一部电影的演员",
        "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"周润发\";",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t4.<unk> JOIN CAST AS t3 ON t5.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"周润发\";"
    },
    {
        "db_id": "government_shift",
        "question": "有多少交互平台是成功的？",
        "query": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
        "mask_query": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\""
    },
    {
        "db_id": "wine_1",
        "question": "统计“通化”的葡萄产地数量。",
        "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"通化\"",
        "mask_query": "SELECT count(*) FROM APPELLATIONS WHERE <unk>  =  \"通化\""
    },
    {
        "db_id": "flight_1",
        "question": "所有员工的平均工资和最高工资是多少？",
        "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
        "mask_query": "SELECT avg(<unk>) ,  max(<unk>) FROM Employee"
    },
    {
        "db_id": "shop_membership",
        "question": "会员人数最多的三大分支机构是什么？",
        "query": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "mask_query": "SELECT name FROM <mask> ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "manufactory_1",
        "question": "计算所有产品的平均价格。",
        "query": "SELECT avg(price) FROM products",
        "mask_query": "SELECT avg(price) FROM products"
    },
    {
        "db_id": "club_1",
        "question": "找出“北大创业俱乐部”俱乐部的“CTO”的姓名和姓氏。",
        "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"北大创业俱乐部\" AND t2.position  =  \"CTO\"",
        "mask_query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"北大创业俱乐部\" AND t2.position  =  \"CTO\""
    },
    {
        "db_id": "manufactory_1",
        "question": "有多少种产品不是“索尼”制造的？",
        "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  '索尼')",
        "mask_query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.<unk>  =  T2.code WHERE T2.name  =  '索尼')"
    },
    {
        "db_id": "entrepreneur",
        "question": "列出企业家的公司和投资者。",
        "query": "SELECT Company ,  Investor FROM entrepreneur",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "geo",
        "question": "“山西”的大小有多大？",
        "query": "SELECT area FROM state WHERE state_name  =  \"山西\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"山西\";"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示员工ID和出席会议但出席率最低的员工参加的会议数。",
        "query": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  count(*) FROM Staff_in_meetings GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "question": "找出支付高于房间底价的人的名字和姓氏。",
        "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "mask_query": "SELECT T1.firstname ,  T1.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> - T2.<unk>  >  0"
    },
    {
        "db_id": "music_1",
        "question": "按字母顺序列出所有流派的名称及他们对应的评级。",
        "query": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "student_1",
        "question": "找出“卫”“聪”老师教的学生数。",
        "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"卫\" AND T2.lastname  =  \"聪\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"卫\" AND T2.lastname  =  \"聪\""
    },
    {
        "db_id": "city_record",
        "question": "“南京 (江苏)”主办的“1994年世界杯资格赛”的比赛地点是什么？",
        "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"南京 (江苏)\" AND T3.competition = \"1994年世界杯资格赛\"",
        "mask_query": "SELECT T3.venue FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.<mask> = \"南京 (江苏)\" AND T3.competition = \"1994年世界杯资格赛\""
    },
    {
        "db_id": "voter_1",
        "question": "至少有两张选票的参赛者号码和参赛者名字是什么？",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> , T1.<unk> FROM contestants AS T1 JOIN votes AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "boat_1",
        "question": "找到没有预定船只的水手的id？",
        "query": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "station_weather",
        "question": "查找经过属于地方当局为“洛阳”的车站的火车的名称和时间。",
        "query": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"洛阳\"",
        "mask_query": "SELECT t3.<unk> ,  t3.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"洛阳\""
    },
    {
        "db_id": "flight_company",
        "question": "运营速度小于200的公司有哪些独特的类型？",
        "query": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200",
        "mask_query": "SELECT DISTINCT T1.type FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> WHERE T2.velocity  <  200"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "哪些事件有一到三的记录？列出事件ID和属性ID。",
        "query": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
        "mask_query": "SELECT T1.<unk>  ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3"
    },
    {
        "db_id": "geo",
        "question": "中国有多少个叫“长沙”的城市？",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE city_name  =  \"长沙\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  \"长沙\";"
    },
    {
        "db_id": "address_1",
        "question": "给出巴尔和芝加哥之间的距离。",
        "query": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"BAL\" AND <unk>  =  \"CHI\""
    },
    {
        "db_id": "world_1",
        "question": "那个语言被最多的国家使用？",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT LANGUAGE FROM <mask> GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_1",
        "question": "名字为“郑”“小强”的学生有多少老师？",
        "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"郑\" AND T1.lastname  =  \"小强\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"郑\" AND T1.lastname  =  \"小强\""
    },
    {
        "db_id": "college_2",
        "question": "找出教授平均工资最高的系名。",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY avg(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "制作评分最高的三首歌曲的艺术家的名字和原籍国是什么？",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 3"
    },
    {
        "db_id": "coffee_shop",
        "question": "哪个地址没有黑色会员卡的会员？",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  '黑卡'",
        "mask_query": "SELECT address FROM <mask> EXCEPT SELECT address FROM <mask> WHERE <unk>  =  '黑卡'"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "带有文字“年”的任何费用预算的文件的ID是什么？",
        "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE \"%年%\"",
        "mask_query": "SELECT T1.document_id FROM <mask> AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE \"%年%\""
    },
    {
        "db_id": "twitter_1",
        "question": "查找拥有超过1000个追随者的用户的姓名和电子邮件。",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  1000"
    },
    {
        "db_id": "yelp",
        "question": "哪个企业访问的次数最多",
        "query": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> GROUP BY t1.<unk> ORDER BY SUM ( t2.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "election",
        "question": "每个选举记录的代表和委员会信息是什么？",
        "query": "SELECT Delegate ,  Committee FROM election",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "pilot_1",
        "question": "按字母顺序列出年龄大于拥有单翼飞机飞行员的飞行员姓名。",
        "query": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
        "mask_query": "SELECT <unk> FROM pilotskills WHERE <unk>  >  (SELECT min(<unk>) FROM pilotskills WHERE <unk>  =  'Piper Cub') ORDER BY <unk>"
    },
    {
        "db_id": "hr_1",
        "question": "工资高于id为163的员工的那些员工的全名（姓、名）是多少？",
        "query": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "mask_query": "SELECT first_name ,  last_name FROM <mask> WHERE salary  >  (SELECT salary FROM <mask> WHERE employee_id = 163 )"
    },
    {
        "db_id": "scholar",
        "question": "“谢尔盖·莱文”在哪里发表了他的最后一篇论文？",
        "query": "SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"谢尔盖·莱文\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;",
        "mask_query": "SELECT DISTINCT t3.venueid  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"谢尔盖·莱文\" GROUP BY t3.venueid  ,  t3.<unk> ORDER BY t3.<unk> DESC;"
    },
    {
        "db_id": "advertising_agencies",
        "question": "没有付款的发票的发票ID和状态是什么？",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "e_commerce",
        "question": "最常订购的产品的ID、名称和价格是多少？",
        "query": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_orders",
        "question": "哪些客户在“2009-01-01”和“2010-01-01”之间发出订单？找出他们的名字。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> >= \"2009-01-01\" AND T2.<unk> <= \"2010-01-01\""
    },
    {
        "db_id": "movie_1",
        "question": "对于每个导演不止一部电影的导演，他们导演的电影的片名和发行日期是什么？",
        "query": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> != T2.<unk>"
    },
    {
        "db_id": "college_1",
        "question": "姓氏以字母“少”开头而且正在上“美术”课的学生的名字是什么？",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  '美术' AND T1.stu_lname LIKE '少'",
        "mask_query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN <mask> AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  '美术' AND T1.stu_lname LIKE '少'"
    },
    {
        "db_id": "geo",
        "question": "中国的主要河流是什么？",
        "query": "SELECT river_name FROM river;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "club_1",
        "question": "找出所有在“济南”的俱乐部的名字。",
        "query": "SELECT clubname FROM club WHERE clublocation  =  \"济南\"",
        "mask_query": "SELECT clubname FROM club WHERE clublocation  =  \"济南\""
    },
    {
        "db_id": "assets_maintenance",
        "question": "列出所有工程师的名字、姓氏、详细情况以及相应的技能描述。",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "election",
        "question": "展示人口最少的3个县。",
        "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 3"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "谁在一个学期内修读了2个学位课程？列出名字、中间名、姓氏和ID。",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  =  2"
    },
    {
        "db_id": "institution_sports",
        "question": "计算机构数量。",
        "query": "SELECT count(*) FROM institution",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "aan_1",
        "question": "计算凯萨琳麦基翁引用的论文数。",
        "query": "SELECT count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"%Mckeown ,  Kathleen%\""
    },
    {
        "db_id": "movie_2",
        "question": "在奥登电影院放映的电影的片名是什么？",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "mask_query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'"
    },
    {
        "db_id": "mountain_photos",
        "question": "拍摄照片时没有使用的镜头数有多少？",
        "query": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "酶和药物之间最常见的相互作用类型是什么？有多少？",
        "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "question": "找到发表论文最多的国家。",
        "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "哪个省拥有最小的城市人口？",
        "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY SUM ( <unk> ) LIMIT 1;"
    },
    {
        "db_id": "geo",
        "question": "中国最大的城市有多少公民？",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "geo",
        "question": "中国最高海拔是多少？",
        "query": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "mask_query": "SELECT MAX ( <unk> ) FROM <mask>;"
    },
    {
        "db_id": "assets_maintenance",
        "question": "在故障日志部件表中记录了多少故障状态代码？",
        "query": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "university_rank",
        "question": "哪个州的大学数量最多？",
        "query": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "显示至少有2个邮件的客户且结果代码是“预定”的客户姓名。",
        "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  '预定' GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  '预定' GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "warehouse_1",
        "question": "在纽约的仓库里找不到什么存储物的类型？",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "mask_query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "hr_1",
        "question": "最高工资在12000至1800之间的工作名称，以及工资范围是什么？",
        "query": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "mask_query": "SELECT job_title ,  max_salary - min_salary FROM <mask> WHERE max_salary BETWEEN 12000 AND 18000"
    },
    {
        "db_id": "restaurants",
        "question": "“厦门”有什么好的餐馆？",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"厦门\" ) AND t1.rating  >  2.5;",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM <mask> AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"厦门\" ) AND t1.rating  >  2.5;"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议上超过100篇论文中所包含的关键词。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"VLDB\" GROUP BY t1.<mask> HAVING COUNT ( DISTINCT t3.<unk> )  >  100;"
    },
    {
        "db_id": "candidate_poll",
        "question": "返回所有候选人的最大支持率、最小考虑率和最小反对率？",
        "query": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "mask_query": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM <mask>"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示所有会议ID、会议结果、会议类型以及参与会议的客户的详细信息。",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM meetings AS T1 JOIN clients AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "yelp",
        "question": "找出平均评论分数低于3的用户",
        "query": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating )  <  3;",
        "mask_query": "SELECT t2.<unk> FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> GROUP BY t2.<unk> HAVING AVG ( t1.<unk> )  <  3;"
    },
    {
        "db_id": "scientist_1",
        "question": "找出所有项目的平均小时数。",
        "query": "SELECT avg(hours) FROM projects",
        "mask_query": "SELECT avg(hours) FROM projects"
    },
    {
        "db_id": "shop_membership",
        "question": "按开业年份分列出所有分行名称、地址、道路和城市。",
        "query": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year",
        "mask_query": "SELECT name ,  address_road ,  city FROM <mask> ORDER BY open_year"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "查找具有至少两个特征的产品的id和颜色描述。",
        "query": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "mask_query": "SELECT t1.<unk> ,  t2.<unk> FROM products AS t1 JOIN ref_colors AS t2 ON t1.<unk>  =  t2.<unk> JOIN product_characteristics AS t3 ON t1.<unk>  =  t3.<unk> GROUP BY t1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "soccer_2",
        "question": "找出学生的选拔赛决定是“确定”的平均和最长时间。",
        "query": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  '确定'",
        "mask_query": "SELECT avg(T1.<unk>) ,  max(T1.<unk>) FROM player AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '确定'"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "计算对应于每个帐户ID的金融交易数量。",
        "query": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "mask_query": "SELECT count(*) ,  <unk> FROM Financial_transactions"
    },
    {
        "db_id": "dorm_1",
        "question": "每个城市有多少学生，哪个城市有不止一个城市？",
        "query": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1",
        "mask_query": "SELECT count(*) ,  <unk> FROM student GROUP BY <unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "book_review",
        "question": "按字母升序列出书名。",
        "query": "SELECT Title FROM book ORDER BY Title ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "scholar",
        "question": "“阿里·法拉迪”在2016年的ECCV会议有论文吗？",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"阿里·法拉迪\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "mask_query": "SELECT DISTINCT t3.paperid FROM <mask> AS t4 JOIN <mask> AS t3 ON t4.venueid  =  t3.venueid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"阿里·法拉迪\" AND t3.<unk>  =  2016 AND t4.venuename  =  \"eccv\";"
    },
    {
        "db_id": "book_press",
        "question": "出版了两本书以上的出版社的名称是什么及其年利润有几十亿？",
        "query": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
        "mask_query": "SELECT t2.name ,  t2.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2"
    },
    {
        "db_id": "body_builder",
        "question": "健美运动员的名字是什么？",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "riding_club",
        "question": "票数最多的运动员叫什么名字？",
        "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "game_injury",
        "question": "哪个赛季导致球员“郑智”受伤？",
        "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  '郑智'",
        "mask_query": "SELECT T1.season FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.player  =  '郑智'"
    },
    {
        "db_id": "art_1",
        "question": "不仅创作过油画，而且又创作过平版画的艺术家的名字和姓氏是什么？",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"oil\" INTERSECT SELECT T3.<unk> ,  T3.<unk> FROM artists AS T3 JOIN paintings AS T4 ON T3.<unk>  =  T4.<unk> WHERE T4.<unk>  =  \"lithograph\""
    },
    {
        "db_id": "book_2",
        "question": "按字母顺序列出书的作者。",
        "query": "SELECT Writer FROM book ORDER BY Writer ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "mountain_photos",
        "question": "有多少种不同的镜片品牌？",
        "query": "SELECT count(DISTINCT brand) FROM camera_lens",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "car_1",
        "question": "生产超过3种型号汽车的所有制造商的名称和ID是什么？",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  3;"
    },
    {
        "db_id": "race_track",
        "question": "找到有超过90000个座位的赛道和少于70000个座位的赛道的位置。",
        "query": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM <mask> WHERE seating  <  70000"
    },
    {
        "db_id": "assets_maintenance",
        "question": "所有工程师的不同姓氏有哪些？",
        "query": "SELECT DISTINCT last_name FROM Maintenance_Engineers",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“迈克尔·斯通布雷克”的“GIS数据”是什么时候发布的？",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"迈克尔·斯通布雷克\" AND t5.keyphrasename  =  \"GIS数据\";",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM paperkeyphrase AS t2 JOIN <mask> AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"迈克尔·斯通布雷克\" AND t5.keyphrasename  =  \"GIS数据\";"
    },
    {
        "db_id": "ship_mission",
        "question": "列出拥有两艘船以上的国家。",
        "query": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "restaurant_1",
        "question": "“李” “琳”什么时候去“全聚德”的？",
        "query": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"李\" AND Student.Lname = \"琳\" AND Restaurant.ResName = \"全聚德\";",
        "mask_query": "SELECT TIME FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = \"李\" AND <mask>.Lname = \"琳\" AND <mask>.<unk> = \"全聚德\";"
    },
    {
        "db_id": "aircraft",
        "question": "所有机场过境旅客的最大值和最小值是多少？",
        "query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "bakery_1",
        "question": "至少在面包店购物15次的顾客的ID是多少？",
        "query": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  15"
    },
    {
        "db_id": "art_1",
        "question": "以画板和画布为材料的绘画的位置是什么？",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
        "mask_query": "SELECT DISTINCT LOCATION FROM paintings WHERE <unk>  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE <unk>  =  \"canvas\""
    },
    {
        "db_id": "boat_1",
        "question": "id是1的水手预定了哪些不同的船号？",
        "query": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk> = 1"
    },
    {
        "db_id": "bakery_1",
        "question": "价格高于所有商品平均价格两倍的商品的ID是多少？",
        "query": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
        "mask_query": "SELECT id FROM <mask> WHERE price  >  (SELECT avg(price) FROM <mask>)"
    },
    {
        "db_id": "flight_2",
        "question": "返回机场的数量。",
        "query": "SELECT count(*) FROM AIRPORTS",
        "mask_query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "db_id": "wrestler",
        "question": "摔跤选手和他们的淘汰赛队伍的名字是什么？",
        "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM elimination AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "workshop_paper",
        "question": "计算提交的平均分数。",
        "query": "SELECT avg(Scores) FROM submission",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "book_press",
        "question": "找出每个性别30岁以上的作者人数。",
        "query": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
        "mask_query": "SELECT count(*) ,  gender FROM <mask> WHERE age  >  30 GROUP BY gender"
    },
    {
        "db_id": "phone_market",
        "question": "按照市场排名的上升顺序显示手机的名称和所在的市场区域。",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T2.<unk>"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "哪些员工销毁了文件或授权其他员工销毁文件？返回他们的雇员ID。",
        "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "mask_query": "SELECT <unk> FROM Documents_to_be_destroyed UNION SELECT <unk> FROM Documents_to_be_destroyed"
    },
    {
        "db_id": "planet_1",
        "question": "计算装在火星号上的包裹的总重量。",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
        "mask_query": "SELECT sum(T1.<unk>) FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T2.<mask> = T3.<unk> WHERE T3.<unk> = \"Mars\";"
    },
    {
        "db_id": "restaurants",
        "question": "“深圳”的“四川”菜餐馆在哪里？",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t1.name  =  \"四川\";",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t1.name  =  \"四川\";"
    },
    {
        "db_id": "headphone_store",
        "question": "统计商店所在的不同街区的数量。",
        "query": "SELECT count(DISTINCT neighborhood) FROM store",
        "mask_query": "SELECT count(DISTINCT neighborhood) FROM <mask>"
    },
    {
        "db_id": "course_teach",
        "question": "至少有两位教师来自的家乡是哪些？",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "wine_1",
        "question": "给出葡萄酒平均价格最高的葡萄的颜色。",
        "query": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY AVG(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "manufactory_1",
        "question": "选择每个制造商产品的平均价格，只显示制造商的代码。",
        "query": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",
        "mask_query": "SELECT AVG(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "music_2",
        "question": "那位姓“刘”的音乐家在“冰雨”中演奏了什么乐器？",
        "query": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"刘\" AND T3.title  =  \"冰雨\"",
        "mask_query": "SELECT T4.instrument FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> JOIN <mask> AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"刘\" AND T3.title  =  \"冰雨\""
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "“ALA合酶”和药物“阿立哌唑”的相互作用类型是什么？",
        "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA合酶' AND T2.name  =  '阿立哌唑'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  =  'ALA合酶' AND T2.<unk>  =  '阿立哌唑'"
    },
    {
        "db_id": "flight_1",
        "question": "最短航班的号码是多少？",
        "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "mask_query": "SELECT <unk> FROM Flight ORDER BY <unk> ASC LIMIT 3"
    },
    {
        "db_id": "warehouse_1",
        "question": "找出存储石头但没有存储剪刀的仓库的位置。",
        "query": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "mask_query": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'"
    },
    {
        "db_id": "book_press",
        "question": "哪一个图书系列既有销售量在1000以上的图书，也有销售量在500以下的图书？",
        "query": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
        "mask_query": "SELECT book_series FROM <mask> WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM <mask> WHERE sale_amount  <  500"
    },
    {
        "db_id": "insurance_policies",
        "question": "总共有多少次清算？",
        "query": "SELECT count(*) FROM Settlements",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "按升序对结果进行排序的所有被描述为“赞助商”组织的细节是什么？",
        "query": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  '赞助商' ORDER BY organisation_details",
        "mask_query": "SELECT <unk> FROM <mask> AS T1 JOIN organisation_Types AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '赞助商' ORDER BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”发表的论文中的关键词。",
        "query": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"北京理工大学\";",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t6 JOIN <mask> AS t2 ON t6.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t3 ON t5.<unk>  =  t3.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t6.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "car_road_race",
        "question": "请出示车手的名字和他们参加的比赛的名字。",
        "query": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "yelp",
        "question": "列出“米雪”为“意大利”“餐馆”所做的所有评论",
        "query": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"意大利\" AND t3.category_name  =  \"餐馆\" AND t5.name  =  \"米雪\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> JOIN USER AS t5 ON t5.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"意大利\" AND t3.<unk>  =  \"餐馆\" AND t5.<unk>  =  \"米雪\";"
    },
    {
        "db_id": "small_bank_1",
        "question": "支票余额低于平均支票余额的客户的名字是什么？",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "mask_query": "SELECT T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  (SELECT avg(<unk>) FROM checking)"
    },
    {
        "db_id": "architecture",
        "question": "最常见的工厂类型是什么，有多少个？",
        "query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE ,  count(*) FROM <mask> GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "question": "按字母顺序排列的每一幅画的名字是什么？",
        "query": "SELECT DISTINCT title FROM paintings ORDER BY title",
        "mask_query": "SELECT DISTINCT <unk> FROM paintings ORDER BY <unk>"
    },
    {
        "db_id": "art_1",
        "question": "哪些艺术家的油画最多？",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"oil\" GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "有哪些不同的卡片类型？每种类型有多少张卡片？",
        "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM Customers_cards GROUP BY <unk>"
    },
    {
        "db_id": "browser_web",
        "question": "列出的浏览器的最大、最小和平均市场占有率是多少？",
        "query": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) ,  avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "e_learning",
        "question": "查找课程作者和学生的共同登录名。",
        "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
        "mask_query": "SELECT <unk> FROM <mask> INTERSECT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "government_shift",
        "question": "客户使用哪项服务超过3次？把服务细节给我。",
        "query": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3",
        "mask_query": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3"
    },
    {
        "db_id": "chinook_1",
        "question": "不同发票的收费国家有哪些？",
        "query": "SELECT distinct(BillingCountry) FROM INVOICE",
        "mask_query": "SELECT distinct(<unk>) FROM INVOICE"
    },
    {
        "db_id": "gas_company",
        "question": "资产规模最大的3家公司所拥有的加油站的地点和代表姓名是什么？",
        "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "mask_query": "SELECT T3.location ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.company_id  =  T2.company_id JOIN <mask> AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.<unk> DESC LIMIT 3"
    },
    {
        "db_id": "soccer_2",
        "question": "找出那些有学生在选拔赛中打“前锋”位置的大学的所在省。",
        "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  '前锋'",
        "mask_query": "SELECT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '前锋'"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”发表了最多数量论文的期刊。",
        "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" GROUP BY t2.<unk> ORDER BY COUNT ( DISTINCT t4.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "driving_school",
        "question": "所有车辆的ID是什么？",
        "query": "SELECT vehicle_id FROM Vehicles;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "yelp",
        "question": "“一点点”有多少评论？",
        "query": "SELECT review_count FROM business WHERE name  =  \"一点点\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"一点点\";"
    },
    {
        "db_id": "geo",
        "question": "“湄公河”的里程有多长？",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"湄公河\";",
        "mask_query": "SELECT LENGTH FROM <mask> WHERE <unk>  =  \"湄公河\";"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示角色名称是“校对员”的描述。",
        "query": "SELECT role_description FROM ROLES WHERE role_name  =  \"校对员\"",
        "mask_query": "SELECT role_description FROM ROLES WHERE role_name  =  \"校对员\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "找到没有设施的公寓数量。",
        "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "wta_1",
        "question": "每年有多少场比赛？",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "mask_query": "SELECT count(*) ,  YEAR FROM <mask> GROUP BY YEAR"
    },
    {
        "db_id": "student_assessment",
        "question": "对于每个注册了某些课程的学生，他们注册了多少课程？",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "car_1",
        "question": "大洲的数量是多少？",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "mask_query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示最少的雇员的角色代码。",
        "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT role_code FROM <mask> GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "baseball_1",
        "question": "列出体重大于220或身高小于75的运动员的名字和姓氏。",
        "query": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  220 OR <unk>  <  75"
    },
    {
        "db_id": "gas_company",
        "question": "在银行和石油天然气公司行业都有公司的总部是什么？",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  '银行业' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  '天然气'",
        "mask_query": "SELECT headquarters FROM <mask> WHERE main_industry  =  '银行业' INTERSECT SELECT headquarters FROM <mask> WHERE main_industry  =  '天然气'"
    },
    {
        "db_id": "mountain_photos",
        "question": "拍摄了最多山脉的照相机的名字是什么？",
        "query": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "question": "找出每个类别价格高于200的耳机数量。",
        "query": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
        "mask_query": "SELECT count(*) ,  CLASS FROM <mask> WHERE price  >  200 GROUP BY CLASS"
    },
    {
        "db_id": "match_season",
        "question": "显示所有国家的国家名称和首都。",
        "query": "SELECT Country_name ,  Capital FROM country",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "formula_1",
        "question": "超过8次停站或参加5场以上比赛的车手的名字、姓氏和ID是什么？",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.driverid FROM <mask> AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.<unk> ,  T1.<unk> ,  T1.driverid FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "customer_complaints",
        "question": "处理投诉最多的前5名员工的名字是什么？",
        "query": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "mask_query": "SELECT t1.<unk> FROM staff AS t1 JOIN complaints AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) LIMIT 5"
    },
    {
        "db_id": "activity_1",
        "question": "谁是“张”“晴”的导师？给我名字和姓氏。",
        "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"晴\" AND T2.lname  =  \"张\"",
        "mask_query": "SELECT T1.fname ,  T1.lname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.advisor WHERE T2.fname  =  \"晴\" AND T2.lname  =  \"张\""
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "已发表的项目有哪些细节？",
        "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '已发表'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN Project_outcomes AS T2 ON T1.<unk>  =  T2.<unk> JOIN Research_outcomes AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE '已发表'"
    },
    {
        "db_id": "workshop_paper",
        "question": "显示不同的大学以及每个学大学提交论文的作者数量。",
        "query": "SELECT College ,  COUNT(*) FROM submission GROUP BY College",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "storm_record",
        "question": "哪些地区没有受到影响？",
        "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
        "mask_query": "SELECT region_name FROM <mask> WHERE region_id NOT IN (SELECT region_id FROM <mask>)"
    },
    {
        "db_id": "warehouse_1",
        "question": "所有价值大于所有箱子中的存储物是剪刀的价值的箱子的代码和内容是什么？",
        "query": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "mask_query": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "哪些工作组有状态代码是“停止”的预订？给出其名字。",
        "query": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"停止\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"停止\""
    },
    {
        "db_id": "restaurants",
        "question": "“洛阳”有多少种“四川”菜肴？",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"洛阳\" AND t1.name  =  \"四川\";",
        "mask_query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"洛阳\" AND t1.name  =  \"四川\";"
    },
    {
        "db_id": "geo",
        "question": "省会是“济南”省的最高点是什么？",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"济南\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"济南\" );"
    },
    {
        "db_id": "icfp_1",
        "question": "“陈” “十一”属于哪一个机构？",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"陈\" AND t1.lname  =  \"十一\"",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.<unk>  =  \"陈\" AND t1.<unk>  =  \"十一\""
    },
    {
        "db_id": "headphone_store",
        "question": "哪家商店有耳机存货？告诉我店名和总数量。",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "mask_query": "SELECT t1.name ,  sum(t2.quantity) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "performance_attendance",
        "question": "显示成员的姓名和他们参加的演出地点。",
        "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "party_people",
        "question": "具有超过2条记录的事件名称是什么？",
        "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
        "mask_query": "SELECT event_name FROM <mask> GROUP BY event_name HAVING count(*)  >  2"
    },
    {
        "db_id": "twitter_1",
        "question": "每个用户有多少追随者？",
        "query": "SELECT count(*) FROM follows",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "hospital_1",
        "question": "有超过一次预约的病人的姓名和电话号码是多少？",
        "query": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "mask_query": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"
    },
    {
        "db_id": "e_learning",
        "question": "所有记录的入学日期和完成日期是什么？",
        "query": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "imdb",
        "question": "1980年后出生在“长沙”的演员是谁？",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"长沙\" AND birth_year  >  1980;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"长沙\" AND <unk>  >  1980;"
    },
    {
        "db_id": "battle_death",
        "question": "平均每次受伤次数是多少？",
        "query": "SELECT avg(injured) FROM death",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "baseball_1",
        "question": "在“中国”出生的运动员有多少是右手击球手？也就是说，击球值是“R”。",
        "query": "SELECT count(*) FROM player WHERE birth_country = '中国' AND bats  =  'R';",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = '中国' AND <unk>  =  'R';"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "显示价格高于平均水平的所有不同的产品名称。",
        "query": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)",
        "mask_query": "SELECT DISTINCT <unk> FROM PRODUCTS WHERE <unk>  >  (SELECT avg(<unk>) FROM PRODUCTS)"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "有多少特征？",
        "query": "SELECT count(*) FROM CHARACTERISTICS",
        "mask_query": "SELECT count(*) FROM CHARACTERISTICS"
    },
    {
        "db_id": "baseball_1",
        "question": "找出在1960年和1961年都获奖的球员的名字和姓氏。",
        "query": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
        "mask_query": "SELECT T1.<unk> , T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 WHERE T2.<unk>  =  1960 INTERSECT SELECT T1.<unk> , T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 WHERE T2.<unk>  =  1961"
    },
    {
        "db_id": "election",
        "question": "哪个委员会有民主党代表？",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"民主\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"民主\""
    },
    {
        "db_id": "manufactory_1",
        "question": "每个制造商的总收益是多少？",
        "query": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "mask_query": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name"
    },
    {
        "db_id": "hr_1",
        "question": "在部门70或90的员工的全名是什么？",
        "query": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "mask_query": "SELECT first_name ,  last_name FROM <mask> WHERE department_id  =  70 OR department_id  =  90"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "在“香料”类中产品的名称是什么？",
        "query": "SELECT product_name FROM products WHERE product_category_code  =  \"香料\"",
        "mask_query": "SELECT <unk> FROM products WHERE <unk>  =  \"香料\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示流程状态的数目。",
        "query": "SELECT count(*) FROM Process_status",
        "mask_query": "SELECT count(*) FROM Process_status"
    },
    {
        "db_id": "college_2",
        "question": "不在“教学”的房间有多少？",
        "query": "SELECT count(*) FROM classroom WHERE building != '教学'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> != '教学'"
    },
    {
        "db_id": "geo",
        "question": "哪个省拥有最大的省会",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> );"
    },
    {
        "db_id": "bike_1",
        "question": "从路线记录，找出不同的自行车的数量。",
        "query": "SELECT count(DISTINCT bike_id) FROM trip",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "soccer_1",
        "question": "在总得分高于80的球员中，有多少是右脚和左脚的？",
        "query": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> WHERE <unk>  >  80 GROUP BY <unk>"
    },
    {
        "db_id": "store_1",
        "question": "“周” “浩歌”有多少个订单？",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"周\" AND T1.last_name = \"浩歌\";",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"周\" AND T1.<unk> = \"浩歌\";"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "描述“第三”章节。",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  '第三'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '第三'"
    },
    {
        "db_id": "formula_1",
        "question": "所有单圈时间小于93000毫秒的不同司机的名字和姓氏是什么？",
        "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.<unk> < 93000"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "找到为“开放”的索赔状态描述。",
        "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"开放\"",
        "mask_query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"开放\""
    },
    {
        "db_id": "driving_school",
        "question": "名字是 “子君” ，姓氏是“温” 的员工平均授课价格是多少？",
        "query": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"子君\" AND T2.last_name = \"温\";",
        "mask_query": "SELECT avg(<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"子君\" AND T2.<unk> = \"温\";"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "那些从未被任何产品使用的特征的名称、细节和数据类型是什么？",
        "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM CHARACTERISTICS EXCEPT SELECT t1.<unk> ,  t1.<unk> ,  t1.<unk> FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk>"
    },
    {
        "db_id": "flight_2",
        "question": "哪些航空公司有从“浦东”机场出发的航班？",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"浦东\"",
        "mask_query": "SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"浦东\""
    },
    {
        "db_id": "debate",
        "question": "显示不同的辩论场地",
        "query": "SELECT DISTINCT Venue FROM debate",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "movie_1",
        "question": "所有评价过3部或更多部电影的评论者的名字是什么？",
        "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "city_record",
        "question": "GDP最小的城市是什么？返回城市及其GDP 。",
        "query": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "mask_query": "SELECT <mask> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "entertainment_awards",
        "question": "列出未被提名的作品名称。",
        "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)",
        "mask_query": "SELECT <unk> FROM Artwork WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "哪些服务类型既有成功活动又有失败的事件细节？",
        "query": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  '成功' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  '失败'",
        "mask_query": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  '成功' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  '失败'"
    },
    {
        "db_id": "small_bank_1",
        "question": "按支票存款和存款余额总和递减，客户的姓名、支票余额和存款余额是什么？",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> ,  T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T2.<unk> + T3.<unk> DESC"
    },
    {
        "db_id": "loan_1",
        "question": "名字中包含字母“a”的客户姓名和账户余额是什么？",
        "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE 'a'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> LIKE 'a'"
    },
    {
        "db_id": "products_for_hire",
        "question": "有多少种不同的产品类型？",
        "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM products_for_hire"
    },
    {
        "db_id": "yelp",
        "question": "找出低于1.5的餐厅",
        "query": "SELECT city FROM business WHERE rating  <  1.5;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  1.5;"
    },
    {
        "db_id": "college_2",
        "question": "平均工资高于42000的院系的名称和平均工资是多少？",
        "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
        "mask_query": "SELECT <unk> ,  AVG (<unk>) FROM <mask> GROUP BY <unk> HAVING AVG (<unk>)  >  42000"
    },
    {
        "db_id": "student_assessment",
        "question": "列出从不上课的学生的ID？",
        "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "mask_query": "SELECT <unk> FROM students WHERE <unk> NOT IN (SELECT <unk> FROM student_course_attendance)"
    },
    {
        "db_id": "college_1",
        "question": "哪所学校教授最少？",
        "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "party_host",
        "question": "聚会的主题和地点是什么？",
        "query": "SELECT Party_Theme ,  LOCATION FROM party",
        "mask_query": "SELECT <unk> ,  LOCATION FROM <mask>"
    },
    {
        "db_id": "school_bus",
        "question": "显示没有校车的司机名字。",
        "query": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "mask_query": "SELECT name FROM <mask> WHERE driver_id NOT IN (SELECT driver_id FROM <mask>)"
    },
    {
        "db_id": "geo",
        "question": "“四川”的“金沙江” 的长度是多少？",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"金沙江\" AND traverse  =  \"四川\";",
        "mask_query": "SELECT LENGTH FROM <mask> WHERE <unk>  =  \"金沙江\" AND <unk>  =  \"四川\";"
    },
    {
        "db_id": "solvency_ii",
        "question": "产品名称和型号代码是什么？",
        "query": "SELECT Product_Name ,  Product_Type_Code FROM Products",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "candidate_poll",
        "question": "反对率最低的候选人的身份是什么？",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY oppose_rate LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "question": "数数文件的数目。",
        "query": "SELECT count(*) FROM Paper",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "music_2",
        "question": "找到所有没有“领唱”声乐类型的歌曲。",
        "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"领唱\"",
        "mask_query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"领唱\""
    },
    {
        "db_id": "scientist_1",
        "question": "找出没有被指派给任何项目的科学家的名字。",
        "query": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
        "mask_query": "SELECT <unk> FROM scientists WHERE ssn NOT IN (SELECT scientist FROM <mask>)"
    },
    {
        "db_id": "bike_1",
        "question": "不是位于“西安”市的车站里，自行车的平均可用数是多少？",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"西安\")",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask> WHERE <unk>  =  \"西安\")"
    },
    {
        "db_id": "phone_1",
        "question": "查找手机型号最少的公司名称。列出该公司生产的手机型号和公司名称。",
        "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "pilot_1",
        "question": "包含轰炸机这个词的不同的飞机名有哪些？",
        "query": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
        "mask_query": "SELECT DISTINCT <unk> FROM pilotskills WHERE <unk> LIKE '%Bomber%'"
    },
    {
        "db_id": "department_store",
        "question": "由至少两个不同的客户购买的产品的名称是什么？",
        "query": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "mask_query": "SELECT DISTINCT T3.<unk> FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.<unk>  =  T2.<unk> JOIN products AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T3.<unk> HAVING COUNT (DISTINCT T1.<unk>)  >=  2"
    },
    {
        "db_id": "scholar",
        "question": "什么关键词能得到最多的引用？",
        "query": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;"
    },
    {
        "db_id": "vehicle_rent",
        "question": "有两辆或两辆以上车辆的动力系统有哪些类型，它们的平均年燃料成本是多少？",
        "query": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
        "mask_query": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "显示所有模板类型代码和每个模板的模板数。",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "mask_query": "SELECT template_type_code ,  count(*) FROM <mask> GROUP BY template_type_code"
    },
    {
        "db_id": "geo",
        "question": "什么河流流过最大的省",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "e_commerce",
        "question": "低于最高限价的产品的颜色、说明和尺寸是多少？",
        "query": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  <  ( SELECT max(<unk>) FROM products )"
    },
    {
        "db_id": "machine_repair",
        "question": "按年龄顺序列出技术人员的名字。",
        "query": "SELECT Name FROM technician ORDER BY Age ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "candidate_poll",
        "question": "男性的平均身高和体重是多少(性别是“男”)？",
        "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  '男'",
        "mask_query": "SELECT avg(height) ,  avg(weight) FROM <mask> WHERE sex  =  '男'"
    },
    {
        "db_id": "customer_deliveries",
        "question": "找出最昂贵产品的名称。",
        "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM products ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "assets_maintenance",
        "question": "每个维修合同包含多少资产？列出个数和合同ID。",
        "query": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "match_season",
        "question": "“同济”或“武汉大学”大学的球员所在国家的官方语言是什么？",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"同济\" OR T2.College  =  \"武汉大学\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"同济\" OR T2.<unk>  =  \"武汉大学\""
    },
    {
        "db_id": "soccer_2",
        "question": "找出小时数低于1500的球员的名字和训练时间。",
        "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  <  1500"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示代码为“PUR”的交易类型的描述。",
        "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>\t  =  \"PUR\""
    },
    {
        "db_id": "restaurants",
        "question": "“南山”哪里可以吃“淮南”菜？",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"南山\" AND t1.food_type  =  \"淮南\";",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"南山\" AND t1.food_type  =  \"淮南\";"
    },
    {
        "db_id": "gas_company",
        "question": "按销售额递减顺序订购的每家公司的名称和排名是什么？",
        "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "mask_query": "SELECT <mask> ,  rank FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "voter_2",
        "question": "有多少主席选票被记录下来？",
        "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM VOTING_RECORD"
    },
    {
        "db_id": "bike_1",
        "question": "位于“西安”市但没能成为100次以上路线的终点的车站叫什么名字？",
        "query": "SELECT name FROM station WHERE city  =  \"西安\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"西安\" EXCEPT SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  100"
    },
    {
        "db_id": "region_building",
        "question": "给我一份不同建筑地址的清单。",
        "query": "SELECT DISTINCT Address FROM building",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "ship_1",
        "question": "不同级别的船长平均年龄和最小年龄是多少？",
        "query": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS",
        "mask_query": "SELECT avg(<unk>) ,  min(<unk>) ,  CLASS FROM <mask> GROUP BY CLASS"
    },
    {
        "db_id": "music_1",
        "question": "比至少一首“蓝调”歌曲的评级低的歌曲的名字是什么？",
        "query": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"蓝调\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  (SELECT max(<unk>) FROM <mask> WHERE <unk>  =  \"蓝调\")"
    },
    {
        "db_id": "academic",
        "question": "返回在2000年之后“PVLDB”会议的论文数量。",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" AND t2.<unk>  >  2000;"
    },
    {
        "db_id": "tracking_orders",
        "question": "最旧订单的订单ID和客户ID是什么？",
        "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM orders ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "在音乐节上有“提名”的歌曲有哪些？",
        "query": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"提名\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"提名\""
    },
    {
        "db_id": "student_assessment",
        "question": "最近访问课程的候选人的ID是什么？",
        "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM candidate_assessments ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "结果是“已获奖”的音乐节的类别是什么？",
        "query": "SELECT Category FROM music_festival WHERE RESULT  =  \"已获奖\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE RESULT  =  \"已获奖\""
    },
    {
        "db_id": "college_2",
        "question": "查找“计算机”系所有工资大于80000的所有讲师姓名。",
        "query": "SELECT name FROM instructor WHERE dept_name  =  '计算机科学'  AND salary  >  80000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '计算机科学'  AND <unk>  >  80000"
    },
    {
        "db_id": "video_game",
        "question": "列出至少有两个游戏的专营店的名称。",
        "query": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "music_2",
        "question": "姓氏为“刘”的音乐家使用了多少乐器？",
        "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"刘\"",
        "mask_query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN <mask> AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"刘\""
    },
    {
        "db_id": "pets_1",
        "question": "年龄大于20岁的学生拥有多少宠物？",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "mask_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "显示不同的宠物政策的酒店的平均价格。",
        "query": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM HOTELS GROUP BY <unk>"
    },
    {
        "db_id": "car_road_race",
        "question": "司机的最高年龄和最低年龄是多少？",
        "query": "SELECT max(Age) ,  min(Age) FROM driver",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "wrestler",
        "question": "请展示统治最多的摔跤手。",
        "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "什么电影和电影“上甘岭”有同样的导演？",
        "query": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"上甘岭\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t5 JOIN <mask> AS t2 ON t5.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t4.<unk>  =  \"上甘岭\";"
    },
    {
        "db_id": "online_exams",
        "question": "最常见的有效答案是什么？",
        "query": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "sing_contest",
        "question": "按演唱歌曲的数量排序，参赛者的id、姓名和受欢迎程度是什么？",
        "query": "SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)",
        "mask_query": "SELECT T1.<unk> ,  T1.Name ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> ORDER BY count(*)"
    },
    {
        "db_id": "election_representative",
        "question": "代表的不同党派是什么？显示各党的党名和代表人数。",
        "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "college_2",
        "question": "找到没有教授任何课程的老师的名字？",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE id NOT IN (SELECT id FROM <mask>)"
    },
    {
        "db_id": "academic",
        "question": "返回给我发表在“PVLDB”上的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "e_commerce",
        "question": "对于所有销售超过3次的产品，他们的ID和描述是什么？",
        "query": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  3"
    },
    {
        "db_id": "formula_1",
        "question": "姓氏是刘易斯的司机参加的所有比赛的名称和年份是什么？",
        "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"姚\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid JOIN <mask> AS T3 ON T1.driverid = T3.driverid WHERE T3.<unk> = \"姚\""
    },
    {
        "db_id": "pilot_1",
        "question": "找出每组同名飞行员的最大年龄。",
        "query": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
        "mask_query": "SELECT max(<unk>) ,  <unk> FROM pilotskills GROUP BY <unk>"
    },
    {
        "db_id": "flight_2",
        "question": "“深圳航空公司”航空公司隶属于哪个国家？",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"深圳航空公司\"",
        "mask_query": "SELECT <unk> FROM AIRLINES WHERE <unk>  =  \"深圳航空公司\""
    },
    {
        "db_id": "pilot_1",
        "question": "计算40岁以上的飞行员人数。",
        "query": "SELECT count(*) FROM pilotskills WHERE age  >  40",
        "mask_query": "SELECT count(*) FROM pilotskills WHERE <unk>  >  40"
    },
    {
        "db_id": "flight_4",
        "question": "找出按路线数量降序排序的每个源机场的路线数量和机场名称。",
        "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "计算对于每个产品ID，文档类型代码为“BK”的文档的数量。",
        "query": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "mask_query": "SELECT count(*) ,  project_id FROM <mask> WHERE document_type_code  =  \"BK\" GROUP BY project_id"
    },
    {
        "db_id": "game_1",
        "question": "所有同时演奏“使命召唤”和“绝地求生”的学生的姓氏和性别是什么？",
        "query": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"使命召唤\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"绝地求生\")",
        "mask_query": "SELECT lname ,  sex FROM <mask> WHERE <unk> IN (SELECT T1.<unk> FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.Gname  =  \"使命召唤\" INTERSECT SELECT T1.<unk> FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.Gname  =  \"绝地求生\")"
    },
    {
        "db_id": "shop_membership",
        "question": "显示成员数量最多的会员级别。",
        "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT LEVEL FROM <mask> GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "activity_1",
        "question": "每个建筑有多少教员？以建筑物的名称列出结果。",
        "query": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
        "mask_query": "SELECT building ,  count(*) FROM <mask> GROUP BY building"
    },
    {
        "db_id": "allergy_1",
        "question": "显示所有至少有两种过敏症的学生。",
        "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> FROM Has_allergy GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "每个居民需要多少服务？以计数的降序列出常驻ID、详细信息和计数。",
        "query": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC"
    },
    {
        "db_id": "flight_2",
        "question": "哪些航空公司有从“长沙”和“白云”机场起飞的航班？",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"长沙\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"白云\"",
        "mask_query": "SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"长沙\" INTERSECT SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"白云\""
    },
    {
        "db_id": "music_1",
        "question": "可用“mp4”格式且分辨率低于1000的歌曲的ID是什么？",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"mp4\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  1000"
    },
    {
        "db_id": "academic",
        "question": "返回在“数据库”领域中所有的机构名称。",
        "query": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"数据库\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN DOMAIN AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"数据库\";"
    },
    {
        "db_id": "manufactory_1",
        "question": "找出总部位于“郑州”的公司创造的总收益。",
        "query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  '郑州'",
        "mask_query": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  '郑州'"
    },
    {
        "db_id": "college_2",
        "question": "找出提供最大课程量的前三个院系的名称？",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "insurance_fnol",
        "question": "被列出的保险单最多的客户的保险单类型有哪些？",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "dorm_1",
        "question": "找到每个宿舍里年龄大于20岁的学生。",
        "query": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name",
        "mask_query": "SELECT count(*) ,  T3.<unk> FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm AS T3 ON T3.<unk>  =  T2.<unk> WHERE T1.age  >  20 GROUP BY T3.<unk>"
    },
    {
        "db_id": "music_4",
        "question": "请按年龄降序列出艺术家的年龄和著名作品名称。",
        "query": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "tracking_orders",
        "question": "哪些客户有“包装”状态的订单？给我客户的名字。",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"包装\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"包装\""
    },
    {
        "db_id": "shop_membership",
        "question": "哪些城市拥有超过100个会员资格？",
        "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "mask_query": "SELECT DISTINCT city FROM <mask> WHERE <unk>  >=  100"
    },
    {
        "db_id": "orchestra",
        "question": "指挥家有多少个不同的国籍？",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "文档的位置代码有什么不同？",
        "query": "SELECT DISTINCT location_code FROM Document_locations",
        "mask_query": "SELECT DISTINCT location_code FROM Document_locations"
    },
    {
        "db_id": "swimming",
        "question": "找出每个游泳运动员的所有细节。",
        "query": "SELECT * FROM swimmer",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "products_for_hire",
        "question": "所有“好”顾客的名字、姓氏和性别是什么？按姓氏排序。",
        "query": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  '良好' ORDER BY last_name",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM customers WHERE <unk>  =  '良好' ORDER BY <unk>"
    },
    {
        "db_id": "sakila_1",
        "question": "除了那些替换时间花费超过200多分钟的电影之外，超过100分钟或者评级为限制级的电影的片名是什么？",
        "query": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  '限制' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  >  100 OR <unk>  =  '限制' EXCEPT SELECT <unk> FROM <mask> WHERE <unk>  >  200"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "计算不同商店位置的数量。",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "mask_query": "SELECT count(DISTINCT LOCATION) FROM <mask>"
    },
    {
        "db_id": "e_government",
        "question": "找出超过3方使用的支付方法代码。",
        "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3",
        "mask_query": "SELECT <unk> FROM parties GROUP BY <unk> HAVING count(*)  >  3"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "价格高于1000的订单的订单日期是什么？",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN ORDER_ITEMS AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.Product_price  >  1000"
    },
    {
        "db_id": "wrestler",
        "question": "有多少摔跤运动员？",
        "query": "SELECT count(*) FROM wrestler",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "wine_1",
        "question": "有哪些酒价格低于50而且生产地是 “宁夏”？",
        "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"宁夏\" AND T2.price  <  50",
        "mask_query": "SELECT T2.<unk> FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"宁夏\" AND T2.price  <  50"
    },
    {
        "db_id": "perpetrator",
        "question": "犯罪者的名字是什么？",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "对于名为“2000最佳”的文档子集，列出该子集中的所有文档ID。",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> =  T2.<unk> WHERE T2.<unk> = \"Best for 2000\";"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪些资产有2个部分并且故障日志少于2？列出资产ID和详细信息。",
        "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  =  2 INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  <  2"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示名为“琦琦”的雇员的姓名、角色代码和出生日期。",
        "query": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  '琦琦'",
        "mask_query": "SELECT employee_name ,  role_code ,  date_of_birth FROM <mask> WHERE employee_Name  =  '琦琦'"
    },
    {
        "db_id": "concert_singer",
        "question": "有首歌名含有“你”的歌手的名字和国籍是什么？",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '你'",
        "mask_query": "SELECT name ,  country FROM <mask> WHERE song_name LIKE '你'"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "在所有产品中，至少有两次使用的特征名称是什么？",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "mask_query": "SELECT t3.<unk> FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> GROUP BY t3.<unk> HAVING count(*)  >= 2"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "每个少于2个章节的课程的名字和ID是什么？",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  <=  2"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "发票上最常订购的商品的产品ID是什么？",
        "query": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM INVOICES GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "每个项目有多少员工？按升序排列项目ID和编号。",
        "query": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC"
    },
    {
        "db_id": "pilot_1",
        "question": "按字母顺序列出所有飞行员拥有的所有不同类型的飞机？",
        "query": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
        "mask_query": "SELECT DISTINCT <unk> FROM pilotskills ORDER BY <unk>"
    },
    {
        "db_id": "student_assessment",
        "question": "ID为171的学生参加了多少门课程？",
        "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "mask_query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = 171"
    },
    {
        "db_id": "phone_1",
        "question": "硬件型号为“LG-P760”的手机的芯片型号和屏幕模式是什么？",
        "query": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";",
        "mask_query": "SELECT <mask> ,  <mask> FROM <mask> WHERE <unk> = \"LG-P760\";"
    },
    {
        "db_id": "tracking_orders",
        "question": "列出曾经取消购买产品“食品”的客户的姓名（项目状态为“取消”）。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"取消\" AND T4.product_name = \"食品\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.<unk> = T2.<unk> AND T2.<unk> = T3.<unk> AND T3.<unk> = T4.<unk> WHERE T3.<unk> = \"取消\" AND T4.<unk> = \"食品\" GROUP BY T1.<unk> HAVING count(*)  >=  1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "列出具有多个子文档的文档。列出文档ID。",
        "query": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >  1;"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "名为“芝麻”的产品有多少个特点？",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"芝麻\"",
        "mask_query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"芝麻\""
    },
    {
        "db_id": "concert_singer",
        "question": "找出有着最大容量的体育场举办的音乐会数量。",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "question": "不同的团队遭受淘汰的数量是多少？",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "mask_query": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "manufacturer",
        "question": "找出拥有超过20个商店的制造商的平均工厂数量。",
        "query": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE num_of_shops  >  20"
    },
    {
        "db_id": "network_1",
        "question": "显示学生ID和其对应的朋友数量。",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示每个位置的位置代码和文档数量。",
        "query": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "mask_query": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code"
    },
    {
        "db_id": "dog_kennels",
        "question": "找出居住在“山西”的主人的名字和他们拥有的狗的名字。",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  \"山西\"",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"山西\""
    },
    {
        "db_id": "e_learning",
        "question": "返回“数据库”课程的描述。",
        "query": "SELECT course_description FROM COURSES WHERE course_name  =  \"数据库\"",
        "mask_query": "SELECT <unk> FROM COURSES WHERE <unk>  =  \"数据库\""
    },
    {
        "db_id": "geo",
        "question": "什么省人口最少？",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "gas_company",
        "question": "具有最高市场价值的行业的公司总数是多少？",
        "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "mask_query": "SELECT main_industry ,  count(*) FROM <mask> GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "返回具有最大值或包含字符“5”的帐户详细信息。",
        "query": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "mask_query": "SELECT max(Account_details) FROM <mask> UNION SELECT Account_details FROM <mask> WHERE Account_details LIKE \"%5%\""
    },
    {
        "db_id": "network_2",
        "question": "与“丽丽”交最长时间朋友的姓名、年龄和工作是什么？",
        "query": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  '丽丽' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  '丽丽')",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> =  '丽丽' AND T2.<unk>  =  (SELECT max(YEAR) FROM <mask> WHERE <unk> =  '丽丽')"
    },
    {
        "db_id": "pets_1",
        "question": "列出每种宠物的最大重量和类型。",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "mask_query": "SELECT max(<unk>) ,  petType FROM pets GROUP BY petType"
    },
    {
        "db_id": "epinions_1",
        "question": "找到标题为“橙色”的项目的ID。",
        "query": "SELECT i_id FROM item WHERE title  =  \"橙色\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"橙色\""
    },
    {
        "db_id": "network_2",
        "question": "每个性别的平均年龄有多大？",
        "query": "SELECT avg(age) ,  gender FROM Person GROUP BY gender",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "driving_school",
        "question": "名字是“子君” ，姓氏是“温”的员工的邮政编码是什么？",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"子君\" AND T2.last_name = \"温\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"子君\" AND T2.<unk> = \"温\";"
    },
    {
        "db_id": "candidate_poll",
        "question": "返回前3大支持率。",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "mask_query": "SELECT support_rate FROM <mask> ORDER BY support_rate DESC LIMIT 3"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "列出招聘“领导”员工最多的项目的开始和结束时间。",
        "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  '领导'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> IN( SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  '领导'"
    },
    {
        "db_id": "yelp",
        "question": "找出“星巴克”附近的总访问数",
        "query": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"星巴克\";",
        "mask_query": "SELECT SUM ( t3.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"星巴克\";"
    },
    {
        "db_id": "bakery_1",
        "question": "查找最早访问的客户的名字和姓氏。",
        "query": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.<unk> ORDER BY T2.date LIMIT 1"
    },
    {
        "db_id": "department_management",
        "question": "列出按年龄排序的部门负责人的姓名、出生地和年龄。",
        "query": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "“米雪”在2010写了多少提示？",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"米雪\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  2010 AND t2.<unk>  =  \"米雪\";"
    },
    {
        "db_id": "dog_kennels",
        "question": "最贵的收费类型要多少钱？",
        "query": "SELECT max(charge_amount) FROM Charges",
        "mask_query": "SELECT max(<unk>) FROM <mask>"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "每个房产对应的省份是什么？",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>;"
    },
    {
        "db_id": "customers_and_orders",
        "question": "我们有多少客户订单？",
        "query": "SELECT count(*) FROM Customer_orders",
        "mask_query": "SELECT count(*) FROM Customer_orders"
    },
    {
        "db_id": "dorm_1",
        "question": "找到没有设施的宿舍的名字",
        "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
        "mask_query": "SELECT <unk> FROM dorm WHERE <unk> NOT IN (SELECT <unk> FROM has_amenity)"
    },
    {
        "db_id": "yelp",
        "question": "列出“王岩”的所有评论",
        "query": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"王岩\";",
        "mask_query": "SELECT t1.<unk> FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"王岩\";"
    },
    {
        "db_id": "scholar",
        "question": "“埃里克·克拉甘”的“液体”相关的“Automatica”论文",
        "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"埃里克·克拉甘\" AND t3.keyphrasename  =  \"液体\" AND t6.venuename  =  \"Automatica\";",
        "mask_query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN <mask> AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t5.paperid JOIN <mask> AS t2 ON t4.paperid  =  t2.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid JOIN <mask> AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"埃里克·克拉甘\" AND t3.keyphrasename  =  \"液体\" AND t6.venuename  =  \"Automatica\";"
    },
    {
        "db_id": "yelp",
        "question": "“王岩”关于“星巴克”提示的总赞数是什么？",
        "query": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"星巴克\" AND t3.name  =  \"王岩\";",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"星巴克\" AND t3.<unk>  =  \"王岩\";"
    },
    {
        "db_id": "scholar",
        "question": "谁在2015年写论文",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
        "mask_query": "SELECT DISTINCT t1.authorid FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.paperid  =  t2.paperid WHERE t2.<unk>  =  2015;"
    },
    {
        "db_id": "decoration_competition",
        "question": "哪些国家有两个以上成员？",
        "query": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "book_review",
        "question": "显示同时包含75章以上和50章以下书籍的书籍类型。",
        "query": "SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50",
        "mask_query": "SELECT TYPE FROM <mask> WHERE <unk>  >  75 INTERSECT SELECT TYPE FROM <mask> WHERE <unk>  <  50"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "显示卡类型代码和交易总数。",
        "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "那些学生和老师共有的地址的第1行是什么？",
        "query": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "small_bank_1",
        "question": "属于储蓄余额大于平均储蓄余额的人的支票账户的余额是多少？",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "mask_query": "SELECT T2.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> IN (SELECT T1.<unk> FROM accounts AS T1 JOIN savings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  (SELECT avg(<unk>) FROM savings))"
    },
    {
        "db_id": "game_1",
        "question": "显示不同专业的平均年龄、最小年龄和最大年龄。",
        "query": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "mask_query": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM <mask> GROUP BY major"
    },
    {
        "db_id": "real_estate_properties",
        "question": "一共有多少个可用的特性？",
        "query": "SELECT count(*) FROM Other_Available_Features",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "把那些引用“李政道”的论文的作者返回。",
        "query": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t7 JOIN <mask> AS t5 ON t7.<unk>  =  t5.<unk> JOIN <mask> AS t6 ON t6.<unk>  =  t5.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t7.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t6.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "显示所有被使用的模板ID和每个模板被文档使用次数。",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "mask_query": "SELECT template_id ,  count(*) FROM <mask> GROUP BY template_id"
    },
    {
        "db_id": "apartment_rentals",
        "question": "找到包含“号码”一词的所有建筑物的全称。",
        "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"号码\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"号码\""
    },
    {
        "db_id": "college_2",
        "question": "找到具有两个预备课程的课程的名称、学分和系名？",
        "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> , T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "roller_coaster",
        "question": "拥有更快速的过山车的国家名称，区域和人口是什么？",
        "query": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55",
        "mask_query": "SELECT T1.name ,  T1.area ,  T1.population FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.speed  <  55"
    },
    {
        "db_id": "formula_1",
        "question": "查找属于法国或比利时的环路的ID和位置？",
        "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"法国\" OR country = \"比利时\"",
        "mask_query": "SELECT circuitid ,  LOCATION FROM <mask> WHERE <unk> = \"法国\" OR <unk> = \"比利时\""
    },
    {
        "db_id": "student_1",
        "question": "找出教一年级的老师的名字。",
        "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
        "mask_query": "SELECT DISTINCT T2.firstname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1"
    },
    {
        "db_id": "geo",
        "question": "人口最多的城市是哪个省？",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "hr_1",
        "question": "所有员工的id和他们工作的国家的名称是什么？",
        "query": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "mask_query": "SELECT T1.employee_id ,  T4.country_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id JOIN <mask> AS T3 ON T2.location_id  =  T3.location_id JOIN <mask> AS T4 ON T3.country_id  =  T4.country_id"
    },
    {
        "db_id": "city_record",
        "question": "请给我一份地区人口超过10000000的城市名单。",
        "query": "SELECT city FROM city WHERE regional_population  >  10000000",
        "mask_query": "SELECT <mask> FROM <mask> WHERE regional_population  >  10000000"
    },
    {
        "db_id": "flight_2",
        "question": "哪家航空公司提供最多的航班？",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scientist_1",
        "question": "需要最少的小时数的项目名称，以及被指派给它的科学家的名字是什么？",
        "query": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)",
        "mask_query": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.<unk> WHERE T2.hours  =  (SELECT min(hours) FROM projects)"
    },
    {
        "db_id": "music_1",
        "question": "每位发行了一首分辨率超过900的歌曲的艺术家的名字和原籍国是什么？",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  900 GROUP BY T2.<unk> HAVING count(*)  >=  1"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "计算“亚麻”产品的特征数量。",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"亚麻\"",
        "mask_query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"亚麻\""
    },
    {
        "db_id": "hospital_1",
        "question": "找到“王涛”医生开的病人的处方数。",
        "query": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"王涛\"",
        "mask_query": "SELECT count(T1.<unk>) FROM patient AS T1 JOIN prescribes AS T2 ON T1.<unk>  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"王涛\""
    },
    {
        "db_id": "swimming",
        "question": "每个国家有多少个体育场馆？",
        "query": "SELECT country ,  count(*) FROM stadium GROUP BY country",
        "mask_query": "SELECT country ,  count(*) FROM <mask> GROUP BY country"
    },
    {
        "db_id": "geo",
        "question": "面积最大的国家的最高点是什么？",
        "query": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "entertainment_awards",
        "question": "显示每一个艺术节的ID、名字和它所提名的艺术品数量。",
        "query": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "culture_company",
        "question": "显示“中国”所有公司的电影片名和书名。",
        "query": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  \"中国\"",
        "mask_query": "SELECT T1.title ,  T3.book_title FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T2.incorporated_in  =  \"中国\""
    },
    {
        "db_id": "world_1",
        "question": "给出“英语”不“是”官方语言国家的平均预期寿命。",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"英语\" AND T2.IsOfficial  =  \"T\")",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk> NOT IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英语\" AND T2.<unk>  =  \"T\")"
    },
    {
        "db_id": "driving_school",
        "question": "没有给授课的员工的名字是什么？",
        "query": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "conference",
        "question": "没有工作人员记录的机构名称是什么？",
        "query": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
        "mask_query": "SELECT institution_name FROM <mask> WHERE institution_id NOT IN (SELECT institution_id FROM <mask>)"
    },
    {
        "db_id": "manufactory_1",
        "question": "返回总部设在“东京”或“台湾”的公司的总收益。",
        "query": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  '日本' OR Headquarter  =  '台湾'",
        "mask_query": "SELECT sum(revenue) FROM manufacturers WHERE <unk>  =  '日本' OR <unk>  =  '台湾'"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "查找姓氏为“范”的教师被拘留的开始日期和结束日期。",
        "query": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"范\"",
        "mask_query": "SELECT T1.<unk> ,  <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"范\""
    },
    {
        "db_id": "loan_1",
        "question": "找到贷款数额超过3000的客户的名字。",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id WHERE <unk>  >  3000"
    },
    {
        "db_id": "climbing",
        "question": "展示来自“德国”国家的登山者所攀登的山的不同名称。",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"德国\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"德国\""
    },
    {
        "db_id": "college_3",
        "question": "查找学分为3学分或有1学分但有4学时的课程名称。",
        "query": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "mask_query": "SELECT <unk> FROM COURSE WHERE <unk>  =  3 UNION SELECT <unk> FROM COURSE WHERE <unk>  =  1 AND <unk>  =  4"
    },
    {
        "db_id": "activity_1",
        "question": "为所有有至少2名学生的教职工的ID 。",
        "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.advisor GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "game_1",
        "question": "显示所有获得奖学金的学生的姓氏。",
        "query": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  \"Y\"",
        "mask_query": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.onscholarship  =  \"Y\""
    },
    {
        "db_id": "student_1",
        "question": "找出在109教室教学的教师的姓氏。",
        "query": "SELECT lastname FROM teachers WHERE classroom  =  109",
        "mask_query": "SELECT lastname FROM <mask> WHERE classroom  =  109"
    },
    {
        "db_id": "book_1",
        "question": "按名称的字母顺序列出所有客户的名称和地址。",
        "query": "SELECT name ,  address FROM Client ORDER BY name",
        "mask_query": "SELECT name ,  address FROM <mask> ORDER BY name"
    },
    {
        "db_id": "dog_kennels",
        "question": "找出居住在印第安纳州且曾做过两次以上治疗的专家的ID、姓氏和手机。",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  \"Indiana\" UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"Indiana\" UNION SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  2"
    },
    {
        "db_id": "bakery_1",
        "question": "按味道排序的蛋糕的ID和味道是什么？",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
        "mask_query": "SELECT id ,  flavor FROM <mask> WHERE food  =  \"Cake\" ORDER BY flavor"
    },
    {
        "db_id": "inn_1",
        "question": "还有多少房间没有预订？",
        "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "mask_query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    {
        "db_id": "dog_kennels",
        "question": "每个主人的名字和他们的狗的名字是什么？",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "insurance_policies",
        "question": "找出具有超过一个政策的客户的详细信息和ID。",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
        "mask_query": "SELECT T1.customer_details ,  T1.customer_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1"
    },
    {
        "db_id": "college_3",
        "question": "按字母顺序查找职级是“教授”的职工的名字。",
        "query": "SELECT Fname FROM FACULTY WHERE Rank  =  \"教授\" ORDER BY Fname",
        "mask_query": "SELECT <unk> FROM FACULTY WHERE <unk>  =  \"教授\" ORDER BY <unk>"
    },
    {
        "db_id": "art_1",
        "question": "按作品名称顺序列出高度超过1000的画作的年份、地点和名称。",
        "query": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
        "mask_query": "SELECT <unk> ,  LOCATION ,  YEAR FROM paintings WHERE <unk>  >  1000 ORDER BY <unk>"
    },
    {
        "db_id": "video_game",
        "question": "返回下载排名为1的所有平台的名称和ID。",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  1"
    },
    {
        "db_id": "solvency_ii",
        "question": "显示产品的名称和事件的数量。",
        "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "mask_query": "SELECT T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "有账户的客户的全名是什么？",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "dorm_1",
        "question": "找出每个可以容纳100多名学生的宿舍的设施数量。",
        "query": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  100 GROUP BY T1.<unk>"
    },
    {
        "db_id": "pilot_1",
        "question": "按年龄降序排列的飞行员的名字是什么？",
        "query": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
        "mask_query": "SELECT <unk> FROM pilotskills ORDER BY <unk> DESC"
    },
    {
        "db_id": "battle_death",
        "question": "列出失去“远征”号和“长征号”号战舰的战斗的名称和日期。",
        "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  '远征' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  '长征号'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '远征' INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '长征号'"
    },
    {
        "db_id": "concert_singer",
        "question": "法国所有歌手的平均年龄、最小年龄和最大年龄是多少？",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  '法国'",
        "mask_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM <mask> WHERE country  =  '法国'"
    },
    {
        "db_id": "machine_repair",
        "question": "显示“山东鲁能”和“天津泰达”团队所共有的技术人员的起始年份。",
        "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"山东鲁能\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"天津泰达\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"山东鲁能\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"天津泰达\""
    },
    {
        "db_id": "planet_1",
        "question": "奥米克罗·珀尔西8号装载工具装载或扎普·布兰尼根寄出的包裹数量是多少？",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
        "mask_query": "SELECT T1.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON  T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T1.<mask> = T3.<unk> JOIN <mask> AS T4 ON T3.<mask> = T4.<unk> WHERE T2.<unk>  =  \"Zapp Brannigan\" OR T4.<unk>  =  \"Omicron Persei 8\";"
    },
    {
        "db_id": "department_store",
        "question": "平均购买量在50000以上或低于30000的供应商的id是什么？",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  >  50000 OR avg(<unk>)  <  30000"
    },
    {
        "db_id": "flight_1",
        "question": "距离在1000到5000之间的飞机的有多少台？",
        "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "mask_query": "SELECT count(*) FROM Aircraft WHERE <unk> BETWEEN 1000 AND 5000"
    },
    {
        "db_id": "inn_1",
        "question": "查找由“康” “运杰”于2010年10月23日预订和登记的房间的成人数量。",
        "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"康\" AND LastName  =  \"运杰\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"2010-10-23\" AND <unk>  =  \"康\" AND <unk>  =  \"运杰\";"
    },
    {
        "db_id": "candidate_poll",
        "question": "给出不参加候选人选举的人的姓名。",
        "query": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
        "mask_query": "SELECT name FROM <mask> WHERE people_id NOT IN (SELECT people_id FROM <mask>)"
    },
    {
        "db_id": "department_management",
        "question": "出生于“河南”州的秘书所管理的各部门的不同创建年份是什么？",
        "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  '河南'",
        "mask_query": "SELECT DISTINCT T1.creation FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id JOIN <mask> AS T3 ON T2.head_id  =  T3.head_id WHERE T3.<unk>  =  '河南'"
    },
    {
        "db_id": "geo",
        "question": "与最低点所在省接壤的最大省是什么？",
        "query": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t3.<unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) ORDER BY t2.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "protein_institute",
        "question": "显示1990年后成立至少有1000个注册人数的机构的机构类型。",
        "query": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "mask_query": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000"
    },
    {
        "db_id": "insurance_policies",
        "question": "找出每个索赔对应的结算数量和索赔ID。",
        "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",
        "mask_query": "SELECT T1.Claim_id ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"
    },
    {
        "db_id": "car_racing",
        "question": "找出司机的最高得分和最低得分。",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "train_station",
        "question": "显示所有位置以及每个位置所有火车站的站台和乘客的总数。",
        "query": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION",
        "mask_query": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM <mask> GROUP BY LOCATION"
    },
    {
        "db_id": "world_1",
        "question": "哪些国家的表面积比“欧洲”任何国家都大？",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"欧洲\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT min(<unk>) FROM <mask> WHERE <unk>  =  \"欧洲\")"
    },
    {
        "db_id": "train_station",
        "question": "显示只有1个站的所有位置。",
        "query": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1",
        "mask_query": "SELECT LOCATION FROM <mask> GROUP BY LOCATION HAVING count(*)  =  1"
    },
    {
        "db_id": "insurance_policies",
        "question": "在所有索赔中，索赔总额是多少？",
        "query": "SELECT sum(Amount_Claimed) FROM Claims",
        "mask_query": "SELECT sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "music_1",
        "question": "有多少艺术家来自“孟加拉国”？",
        "query": "SELECT count(*) FROM artist WHERE country  =  \"孟加拉国\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"孟加拉国\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "返回每种公寓类型代码以及每种类型中的最大和最小房间数量。",
        "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
        "mask_query": "SELECT <unk> ,  max(<unk>) ,  min(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "查找所有有“汉堡王”的省份",
        "query": "SELECT state FROM business WHERE name  =  \"汉堡王\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"汉堡王\";"
    },
    {
        "db_id": "flight_4",
        "question": "每一个机场名称，多少条航线在该机场出发？",
        "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "loan_1",
        "question": "查找有“抵押”贷款和“汽车”贷款的客户的名字。",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  '抵押' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  '汽车'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id WHERE <unk>  =  '抵押' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id WHERE <unk>  =  '汽车'"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "给出帐户名“162”的客户的全名和电话。",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"162\""
    },
    {
        "db_id": "network_2",
        "question": "没有朋友住在“郑州”市的总人数是多少？",
        "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  '郑州')",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM person WHERE <unk>  =  '郑州')"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "列出分配给名为“马” “军军”的工作人员的问题id和日志id。",
        "query": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"马\" AND T1.staff_last_name = \"军军\"",
        "mask_query": "SELECT DISTINCT T2.<unk> ,  T2.<unk> FROM staff AS T1 JOIN problem_log AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"马\" AND T1.<unk> = \"军军\""
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "同一个班里有几对老师和学生？把他们的详细资料给我。",
        "query": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "baseball_1",
        "question": "1907年在公园“北海公园”有多少场比赛？",
        "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = '北海公园';",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> = 1907 AND T2.<unk> = '北海公园';"
    },
    {
        "db_id": "bike_1",
        "question": "有多少天平均湿度在50以上，平均能见度在8以上？",
        "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "mask_query": "SELECT COUNT(*) FROM <mask> WHERE <unk>  >  50 AND <unk>  >  8"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "模板类型代码是“PP”或“PPT”的模板ID是什么？",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "mask_query": "SELECT template_id FROM <mask> WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "db_id": "flight_1",
        "question": "能覆盖超过2000的距离的所有航班的号码是多少？",
        "query": "SELECT flno FROM Flight WHERE distance  >  2000",
        "mask_query": "SELECT <unk> FROM Flight WHERE <unk>  >  2000"
    },
    {
        "db_id": "college_2",
        "question": "按学分从少到大的顺序排列的学生及其所属院系的名称是什么？",
        "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "少于3个模板的模板类型代码是什么？",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "mask_query": "SELECT template_type_code FROM <mask> GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "db_id": "country_language",
        "question": "返回包含子字符串“ish”的语言的名称。",
        "query": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"%ish%\""
    },
    {
        "db_id": "student_1",
        "question": "找出由“张”“亮”教授的所有学生的名字和姓氏。",
        "query": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"张\" AND T2.lastname  =  \"亮\"",
        "mask_query": "SELECT T1.firstname ,  T1.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"张\" AND T2.lastname  =  \"亮\""
    },
    {
        "db_id": "race_track",
        "question": "按照座位数排序，显示2000年后所开放的所有轨道的名字和座位。",
        "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "mask_query": "SELECT name ,  seating FROM <mask> WHERE year_opened  >  2000 ORDER BY seating"
    },
    {
        "db_id": "geo",
        "question": "“长江”流经的最大省的省会的人口是多少？",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  \"长江\" ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( t1.<unk> ) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"长江\" ) );"
    },
    {
        "db_id": "department_store",
        "question": "找出被任命为“销售员”，但从未担任“文书职员”的员工的姓名和性别。",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"销售员\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"文书职员\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM staff AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"销售员\" EXCEPT SELECT T1.<unk> ,  T1.<unk> FROM staff AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"文书职员\""
    },
    {
        "db_id": "epinions_1",
        "question": "查找评级为10的商品名称。",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  10"
    },
    {
        "db_id": "protein_institute",
        "question": "显示高于平均高度或者楼层数高于平均的建筑物数量。",
        "query": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE height_feet  >  (SELECT avg(height_feet) FROM <mask>) OR floors  >  (SELECT avg(floors) FROM <mask>)"
    },
    {
        "db_id": "cinema",
        "question": "在哪些地方有不止一个电影院的容量超过300？",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "book_1",
        "question": "查找由客户彼得·多伊而不是詹姆斯·史密斯订购的书籍的标题。",
        "query": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
        "mask_query": "SELECT T4.title FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idOrder  =  T2.idOrder JOIN <mask> AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.<unk>  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.idOrder  =  T2.idOrder JOIN <mask> AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.<unk>  =  T4.isbn WHERE T3.name  =  \"James Smith\""
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示至少有两笔交易类型为“销售中”的投资者的ID和投资者的详细信息。",
        "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"销售中\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"销售中\" GROUP BY T2.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "video_game",
        "question": "拥有“后卫”位置的玩家玩的游戏中平均销量是几百万？",
        "query": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "mask_query": "SELECT avg(<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"Guard\""
    },
    {
        "db_id": "student_assessment",
        "question": "注册或参加课程的学生的ID是什么？",
        "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "mask_query": "SELECT <unk> FROM student_course_registrations UNION SELECT <unk> FROM student_course_attendance"
    },
    {
        "db_id": "vehicle_driver",
        "question": "车辆的制造年份、车型名称和制造商是什么？",
        "query": "SELECT build_year ,  model ,  builder FROM vehicle",
        "mask_query": "SELECT build_year ,  model ,  builder FROM <mask>"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "列出所有与蓝索姆拥有的文件有关的文件。列出文档ID。",
        "query": "SELECT T1.Related_Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Ransom'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'Ransom'"
    },
    {
        "db_id": "museum_visit",
        "question": "找出一次买下最多票的游客的姓名和年龄。",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "mask_query": "SELECT t1.name ,  t1.age FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "question": "20岁或20岁以上驾驶人的不同参赛者类型是什么？",
        "query": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >=  20"
    },
    {
        "db_id": "aan_1",
        "question": "找到所有麦基翁写的论文的标题和id。",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk> LIKE \"%Mckeown%\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "所有文档使用的不同模板有多少？",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "mask_query": "SELECT count(DISTINCT template_id) FROM <mask>"
    },
    {
        "db_id": "small_bank_1",
        "question": "存款余额最低的账户的名称和支票余额是多少？",
        "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk> LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "所有的角色代码、角色名称和角色描述是什么？",
        "query": "SELECT role_code ,  role_name ,  role_description FROM ROLES",
        "mask_query": "SELECT role_code ,  role_name ,  role_description FROM ROLES"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "没有相互作用的酶的数量是多少？",
        "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> );"
    },
    {
        "db_id": "small_bank_1",
        "question": "查找存款余额低于相应支票余额的账户的名称及总支票和存款余额。",
        "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> + T2.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  <  T2.<unk>"
    },
    {
        "db_id": "academic",
        "question": "返回所有位于“中国北方”的“数据库”领域内的所有机构。",
        "query": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"数据库\" AND t2.continent  =  \"中国北方\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN DOMAIN AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"数据库\" AND t2.<unk>  =  \"中国北方\";"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "统计有1个停车场或1个车库的房产的数量。",
        "query": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  1 OR <unk>  =  1;"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "按日期升序列出有关评估说明的所有信息。",
        "query": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
        "mask_query": "SELECT * FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "返回所有文件的的天数和存储日期。",
        "query": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "mask_query": "SELECT T2.day_Number ,  T1.<unk> FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date"
    },
    {
        "db_id": "gymnast",
        "question": "哪些家乡有至少两名体操运动员？",
        "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "e_commerce",
        "question": "对于每个订单，它包含多少产品？订单的状态和id是什么？",
        "query": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "soccer_1",
        "question": "最好的运球运动员的名字是什么？",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk>  =  ( SELECT max(<unk>) FROM <mask>)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "查找索赔标题中支付的总金额和平均金额。",
        "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "mask_query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "每个文档的类型名称、类型说明和创建日期是什么？",
        "query": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "mask_query": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN <mask> AS T2 ON T1.document_type_code  =  T2.document_type_code"
    },
    {
        "db_id": "geo",
        "question": "那里有多少个大城市？",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000;",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  >  150000;"
    },
    {
        "db_id": "student_1",
        "question": "107号房的学生的名字是什么？",
        "query": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107",
        "mask_query": "SELECT DISTINCT firstname FROM <mask> WHERE classroom  =  107"
    },
    {
        "db_id": "gas_company",
        "question": "每个行业的主要行业和总市值是多少？",
        "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",
        "mask_query": "SELECT main_industry ,  sum(market_value) FROM <mask> GROUP BY main_industry"
    },
    {
        "db_id": "school_player",
        "question": "按升学顺序列出学校的位置。",
        "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
        "mask_query": "SELECT LOCATION FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "orchestra",
        "question": "不是“决赛直播”类型的最大和最小份额的表现类型是什么。",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"决赛直播\"",
        "mask_query": "SELECT max(SHARE) ,  min(SHARE) FROM <mask> WHERE TYPE != \"决赛直播\""
    },
    {
        "db_id": "yelp",
        "question": "“杭州”4.5分的“餐厅”的数量是多少？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"杭州\" AND t1.rating  =  4.5 AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"杭州\" AND t1.<unk>  =  4.5 AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "tracking_orders",
        "question": "找出在“2000-01-01”之后被装运订单的ID。",
        "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "mask_query": "SELECT <unk> FROM shipments WHERE <unk> > \"2000-01-01\""
    },
    {
        "db_id": "customers_and_orders",
        "question": "最便宜的硬件类型产品的产品id和产品名称是什么？",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"Hardware\" ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "在ACL 2014中的有多少“句法分析”的论文",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"句法分析\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"句法分析\" AND t3.<unk>  =  2014 AND t4.venuename  =  \"ACL\";"
    },
    {
        "db_id": "soccer_3",
        "question": "列出与多个俱乐部关联的制造商。",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "bike_1",
        "question": "请给出平均温度高于60度的邮政编码区进行的所有路线的ID。",
        "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING avg(T2.<unk>)  >  60"
    },
    {
        "db_id": "yelp",
        "question": "找出“星期五”在“厦门”“摩洛哥”“餐厅”的总访问数",
        "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"厦门\" AND t2.category_name  =  \"摩洛哥\" AND t3.category_name  =  \"餐厅\" AND t4.day  =  \"星期五\";",
        "mask_query": "SELECT SUM ( t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"厦门\" AND t2.<unk>  =  \"摩洛哥\" AND t3.<unk>  =  \"餐厅\" AND t4.<unk>  =  \"星期五\";"
    },
    {
        "db_id": "machine_repair",
        "question": "显示技术人员的不同团队和每个团队技术人员的数量。",
        "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "有多于一个参与者的活动的ID和信息是什么？",
        "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
        "mask_query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "small_bank_1",
        "question": "找到存款余额最低的账户的名称和支票余额。",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk> LIMIT 1"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示最频繁发生的交易类型代码。",
        "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM TRANSACTIONS GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "country_language",
        "question": "没有官方语言的国家叫什么名字？",
        "query": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "city_record",
        "question": "所有比赛的场地是什么？按匹配日期的降序对它们排序。",
        "query": "SELECT venue FROM MATCH ORDER BY date DESC",
        "mask_query": "SELECT venue FROM MATCH ORDER BY date DESC"
    },
    {
        "db_id": "planet_1",
        "question": "数据库中每批货的发货日期是什么？",
        "query": "SELECT Date FROM Shipment;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "museum_visit",
        "question": "至今没有游客的博物馆叫什么名字？",
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "mask_query": "SELECT name FROM <mask> WHERE <unk> NOT IN (SELECT museum_id FROM <mask>)"
    },
    {
        "db_id": "address_1",
        "question": "所有城市的名称、代码、州和国家是什么？",
        "query": "SELECT city_name ,  city_code ,  state ,  country FROM City",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "soccer_2",
        "question": "规模前3大学校的名字是什么？",
        "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM college ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "formula_1",
        "question": "按字母顺序列出所有不同车手的名字。",
        "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "phone_market",
        "question": "按价格升序列出手机名称。",
        "query": "SELECT Name FROM phone ORDER BY Price ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "restaurants",
        "question": "“四川”菜在哪里？",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"四川\";",
        "mask_query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"四川\";"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "与交易次数最多的发票对应的发票号和发票日期是什么？",
        "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM Financial_transactions AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "question": "找出没有“韦浩”评论每部电影的平均评价星级。",
        "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"韦浩\") GROUP BY mID",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM <mask> WHERE <unk> NOT IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"韦浩\") GROUP BY <unk>"
    },
    {
        "db_id": "browser_web",
        "question": "与两个或多个浏览器兼容的网络加速器的ID和名称是什么？",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.Name FROM web_client_accelerator AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "voter_2",
        "question": "在“秋季”选举周期中有哪些不同的秘书选票？",
        "query": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"秋季\"",
        "mask_query": "SELECT DISTINCT <unk> FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"秋季\""
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "哪些学生的详细信息中有“suite”作为子字符串？把他们的个人信息给我。",
        "query": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '%Suite%'"
    },
    {
        "db_id": "allergy_1",
        "question": "有多少学生有“食物”过敏？",
        "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"食物\"",
        "mask_query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"食物\""
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "没有费用预算的文件的ID是什么？",
        "query": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "mask_query": "SELECT document_id FROM <mask> EXCEPT SELECT document_id FROM Documents_with_expenses"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "显示每个星级酒店的平均价格。",
        "query": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM HOTELS GROUP BY <unk>"
    },
    {
        "db_id": "perpetrator",
        "question": "按照他们受伤人数的下降顺序，犯罪者的身高是多少？",
        "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "geo",
        "question": "“长江”流经那些省？",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" );"
    },
    {
        "db_id": "college_2",
        "question": "招生最多的院系名字是什么？",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "e_learning",
        "question": "所有有结果为“通过”的测试的入学日期是什么？",
        "query": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"通过\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"通过\""
    },
    {
        "db_id": "geo",
        "question": "山在哪些省份",
        "query": "SELECT state_name FROM mountain;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "flight_2",
        "question": "从“哈尔滨”起飞的航班的航班号是多少？",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"哈尔滨\"",
        "mask_query": "SELECT T1.<unk> FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.<unk>   =  T2.<unk> WHERE T2.<unk>  =  \"哈尔滨\""
    },
    {
        "db_id": "election_representative",
        "question": "代表人数最多的政党是什么？",
        "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_4",
        "question": "“古巴”或“阿根廷”所有机场的名字是什么？",
        "query": "SELECT name FROM airports WHERE country  =  \"古巴\" OR country  =  \"阿根廷\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"古巴\" OR <unk>  =  \"阿根廷\""
    },
    {
        "db_id": "icfp_1",
        "question": "姓“丁”的作者的名字是什么？",
        "query": "SELECT fname FROM authors WHERE lname  =  \"丁\"",
        "mask_query": "SELECT <unk> FROM authors WHERE <unk>  =  \"丁\""
    },
    {
        "db_id": "match_season",
        "question": "给出为首都为“都柏林”的国家效力的球员的不同位置。",
        "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"都柏林\"",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"都柏林\""
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示按平均交易量排序的不同批次的平均交易量。",
        "query": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
        "mask_query": "SELECT T2.<unk> ,  avg(<unk>) FROM TRANSACTIONS AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY avg(<unk>)"
    },
    {
        "db_id": "yelp",
        "question": "有多少人在2010点评过“餐厅”“便宜坊”？",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"便宜坊\" AND t2.category_name  =  \"餐厅\" AND t3.year  =  2010;",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"便宜坊\" AND t2.<unk>  =  \"餐厅\" AND t3.<unk>  =  2010;"
    },
    {
        "db_id": "inn_1",
        "question": "列出房间人的数量达到最大容量的次数。人的数量包括成年人和孩子。",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  T1.<unk> + T1.<unk>;"
    },
    {
        "db_id": "musical",
        "question": "按出演的音乐剧获奖年份降序排列，演员姓名是什么？",
        "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "twitter_1",
        "question": "找到“马丽”或“苏晴”共同追随的用户的ID。",
        "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"马丽\" OR T1.name  =  \"苏晴\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"马丽\" OR T1.<unk>  =  \"苏晴\""
    },
    {
        "db_id": "music_4",
        "question": "请显示计数超过1的音乐节的类别。",
        "query": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "inn_1",
        "question": "找到所有价格高于160且可以容纳2人以上的房间的房间名称和ID。",
        "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  160 AND <unk>  >  2;"
    },
    {
        "db_id": "customer_complaints",
        "question": "处理过第一次投诉的员工的姓氏是什么？",
        "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM staff AS t1 JOIN complaints AS t2 ON t1.<unk>  =  t2.<unk> ORDER BY t2.<unk> LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "以逆向词典顺序列出章节名称。",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "e_commerce",
        "question": "所有买家的名字是什么？他们买了什么产品？把它们按对列出。",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "mask_query": "SELECT T1.<unk> ,  T4.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Order_items AS T3 ON T2.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk>"
    },
    {
        "db_id": "book_1",
        "question": "所有的书的名字及其作者的名字是什么？",
        "query": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
        "mask_query": "SELECT T3.title ,  T1.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<mask>  =  T1.<unk> JOIN <mask> AS T3 ON T2.isbn  =  T3.isbn"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "找出有“代理”保险单的客户的名字。",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"代理\"",
        "mask_query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"代理\""
    },
    {
        "db_id": "hr_1",
        "question": "每个部门的部门名称和每个部门对应的员工人数是多少？",
        "query": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "mask_query": "SELECT department_name ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"
    },
    {
        "db_id": "pets_1",
        "question": "每种宠物的平均年龄和最大年龄是多少？",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "mask_query": "SELECT avg(<unk>) ,  max(<unk>) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "db_id": "university_basketball",
        "question": "有多少不同的附属类型？每种类型有20000以上入学人数的不同的附属学校有多少？",
        "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
        "mask_query": "SELECT count(*) ,  affiliation FROM <mask> WHERE enrollment  >  20000 GROUP BY affiliation"
    },
    {
        "db_id": "geo",
        "question": "“湄公河”最大的省是哪一个省？",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"湄公河\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"湄公河\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"湄公河\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"湄公河\" );"
    },
    {
        "db_id": "party_people",
        "question": "没有成员的政党名称是什么？",
        "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
        "mask_query": "SELECT party_name FROM <mask> WHERE party_id NOT IN (SELECT party_id FROM Member)"
    },
    {
        "db_id": "ship_1",
        "question": "找出使用“巴拿马”和“马耳他”标志的船型。",
        "query": "SELECT TYPE FROM ship WHERE flag  =  \"巴拿马\" INTERSECT SELECT TYPE FROM ship WHERE flag  =  \"马耳他\"",
        "mask_query": "SELECT TYPE FROM ship WHERE flag  =  \"巴拿马\" INTERSECT SELECT TYPE FROM ship WHERE flag  =  \"马耳他\""
    },
    {
        "db_id": "csu_1",
        "question": "2003年那个学校教师人数最多？",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "mask_query": "SELECT T1.campus FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.<mask> DESC LIMIT 1"
    },
    {
        "db_id": "roller_coaster",
        "question": "显示国家名称和每个国家的过山车的平均速度。",
        "query": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
        "mask_query": "SELECT T1.<unk> ,  avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "wrestler",
        "question": "返回保持少于100天的摔跤运动员的名字。",
        "query": "SELECT Name FROM wrestler WHERE Days_held  <  100",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  100"
    },
    {
        "db_id": "aircraft",
        "question": "机场的国际旅客平均人数是多少？",
        "query": "SELECT avg(International_Passengers) FROM airport",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "journal_committee",
        "question": "显示每个编辑的ID、姓名以及他们所在的期刊委员会的数量。",
        "query": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
        "mask_query": "SELECT T1.editor_id ,  T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.editor_id"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "具有特征类型代码为“等级”的产品“芝麻”的特征的名称是什么？",
        "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"芝麻\" AND t3.characteristic_type_code  =  \"等级\"",
        "mask_query": "SELECT t3.<unk> FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"芝麻\" AND t3.<unk>  =  \"等级\""
    },
    {
        "db_id": "scholar",
        "question": "“索米特”什么时候出论文的？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"索米特\" GROUP BY t3.year ORDER BY t3.year;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"索米特\" GROUP BY t3.<unk> ORDER BY t3.<unk>;"
    },
    {
        "db_id": "soccer_2",
        "question": "训练时间在500到1500之间的球员的名字是什么？",
        "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> BETWEEN 500 AND 1500"
    },
    {
        "db_id": "coffee_shop",
        "question": "五月份有一个欢乐时间的商店的ID和地址是什么？",
        "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  '五月'",
        "mask_query": "SELECT t1.address ,  t1.shop_id FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  '五月'"
    },
    {
        "db_id": "store_product",
        "question": "查找城市面积大于10或人口大于10万的所有地区的名称",
        "query": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
        "mask_query": "SELECT district_name FROM <mask> WHERE city_area  >  10 OR <unk>  >  100000"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "查找最近创建的文档中索赔的总金额。",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "mask_query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "game_1",
        "question": "显示 “张”“晴” 所玩的所有游戏名称",
        "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"张\" AND T3.Fname  =  \"晴\"",
        "mask_query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN <mask> AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"张\" AND T3.<unk>  =  \"晴\""
    },
    {
        "db_id": "yelp",
        "question": "找出有一个叫“海盗船自助餐”的“餐厅”的所有的城市。",
        "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"海盗船自助餐\" AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"海盗船自助餐\" AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "顾客“小勇”的电话和电子邮件是什么？",
        "query": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"小勇\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM CUSTOMERS WHERE <unk>  =  \"小勇\""
    },
    {
        "db_id": "sports_competition",
        "question": "从最古老的俱乐部开始，所有俱乐部的名字是什么？",
        "query": "SELECT name FROM club ORDER BY Start_year ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "针对每个学生，找到学生id和他或她的贷款总额。",
        "query": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id",
        "mask_query": "SELECT <unk> ,  sum(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "soccer_2",
        "question": "找出选拔赛决定是“确定”的学生的名字和时间。",
        "query": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  '确定'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM player AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '确定'"
    },
    {
        "db_id": "flight_4",
        "question": "以最多航线为目的地的机场的名称和城市是什么？",
        "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_driver",
        "question": "每个系列赛有多少车手参加过比赛？",
        "query": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
        "mask_query": "SELECT count(*) ,  racing_series FROM <mask> GROUP BY racing_series"
    },
    {
        "db_id": "video_game",
        "question": "按年度排名的降序列出所有玩家的名字和学院。",
        "query": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "coffee_shop",
        "question": "请告诉我地址在“金华”或“湖州”的会员的名字。",
        "query": "SELECT name FROM member WHERE address  =  '金华' OR address  =  '湖州'",
        "mask_query": "SELECT name FROM <mask> WHERE address  =  '金华' OR address  =  '湖州'"
    },
    {
        "db_id": "store_product",
        "question": "查找人口在20万到200万之间的地区的名称和人口",
        "query": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> BETWEEN 200000 AND 2000000"
    },
    {
        "db_id": "restaurant_bills",
        "question": "会员级别高于1的客户的平均信用是多少？",
        "query": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  >  1"
    },
    {
        "db_id": "book_review",
        "question": "页数最少的那本书的排名是多少？",
        "query": "SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "farm",
        "question": "人口超过1500或少于500的城市的官方名称是什么？",
        "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  1500 OR <unk>  <  500"
    },
    {
        "db_id": "academic",
        "question": "把作者是“李政道”且被引用数量最多的论文返回。",
        "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"李政道\" ORDER BY t3.citation_num DESC LIMIT 1;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\" ORDER BY t3.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "music_1",
        "question": "“女性”歌手演唱的平均歌曲数是多少？",
        "query": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"女\"",
        "mask_query": "SELECT avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"女\""
    },
    {
        "db_id": "formula_1",
        "question": "每个制造商ID的竞赛数是多少？",
        "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "mask_query": "SELECT count(*) ,  constructorid FROM <mask> GROUP BY constructorid"
    },
    {
        "db_id": "university_basketball",
        "question": "找到那些在1850年之后成立或公立的学校。",
        "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  '公立'",
        "mask_query": "SELECT school FROM <mask> WHERE founded  >  1850 OR affiliation  =  '公立'"
    },
    {
        "db_id": "university_rank",
        "question": "按大学名称的字母顺序显示所有大学所在的名称、城市和州。",
        "query": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
        "mask_query": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name"
    },
    {
        "db_id": "pilot_record",
        "question": "显示飞行员最常见的国籍。",
        "query": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "company_office",
        "question": "列出没有公司办公室的建筑名称。",
        "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "ship_mission",
        "question": "显示不同船舶的类型和每种类型的船舶数量。",
        "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
        "mask_query": "SELECT TYPE ,  COUNT(*) FROM <mask> GROUP BY TYPE"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "在有活动记录的学生中，谁没有助学贷款？返回学生的个人资料。",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 WHERE T1.<unk>  =  T2.<unk> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 WHERE T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "railway",
        "question": "最老的经理叫什么名字？",
        "query": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "orchestra",
        "question": "没有演出的管弦乐队是什么？",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "tvshow",
        "question": "有两个以上电视频道的国家的电视频道的ID。",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "mask_query": "SELECT <unk> FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "“工程”学院提供多少学位？",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  '摄影师'",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '摄影师'"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "告诉我把“第二次”作为订单细节的订单的数量。",
        "query": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"第二次\"",
        "mask_query": "SELECT count(*) FROM customer_orders WHERE <unk>  =  \"第二次\""
    },
    {
        "db_id": "music_2",
        "question": "姓“刘”的音乐家使用的所有乐器有哪些？",
        "query": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"刘\"",
        "mask_query": "SELECT instrument FROM instruments AS T1 JOIN <mask> AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"刘\""
    },
    {
        "db_id": "book_press",
        "question": "找出每个系列的书的数量。",
        "query": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
        "mask_query": "SELECT count(*) ,  book_series FROM <mask> GROUP BY book_series"
    },
    {
        "db_id": "manufactory_1",
        "question": "找出所有价格在60到120美元之间的产品的所有信息，。",
        "query": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
        "mask_query": "SELECT * FROM products WHERE price BETWEEN 60 AND 120"
    },
    {
        "db_id": "wta_1",
        "question": "所有球员的名字以及他们的平均排名是什么？",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "mask_query": "SELECT avg(<unk>) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "每个项目有多少任务？列出任务计数和项目细节。",
        "query": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "flight_1",
        "question": "显示“张晓梅”的ID和薪水。",
        "query": "SELECT eid ,  salary FROM Employee WHERE name  =  '张晓梅'",
        "mask_query": "SELECT <unk> ,  <unk> FROM Employee WHERE <unk>  =  '张晓梅'"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "有多少不同的学院可以授予学位？",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "chinook_1",
        "question": "按字母顺序排列，有3张或更多张专辑的艺术家的名字和ID是什么？",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.<unk>  =  T2.ArtistID GROUP BY T1.<unk> HAVING COUNT(*)  >=  3 ORDER BY T2.<unk>"
    },
    {
        "db_id": "assets_maintenance",
        "question": "对于不同部件的所有故障，修复它们所需的所有技能的描述是什么？列出故障的名称和技能描述。",
        "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "race_track",
        "question": "不同的赛道名称是什么，每个赛道有多少比赛？",
        "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
        "mask_query": "SELECT T2.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
    },
    {
        "db_id": "wrestler",
        "question": "位置不是“广州，中国”的摔跤运动员的不同统治期是什么？",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"广州，中国\"",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE LOCATION != \"广州，中国\""
    },
    {
        "db_id": "college_2",
        "question": "有一个以上顾问的学生的名字是什么？",
        "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"
    },
    {
        "db_id": "voter_2",
        "question": "找出所有有主席选票且导师是“8741”的学生的姓氏。",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT <unk> FROM STUDENT WHERE <unk>  =  \"8741\""
    },
    {
        "db_id": "student_assessment",
        "question": "候选人的ID是什么，他的电子邮件是“stanley.monahan@example.org”？",
        "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "mask_query": "SELECT T2.<unk> FROM people AS T1 JOIN candidates AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"stanley.monahan@example.org\""
    },
    {
        "db_id": "epinions_1",
        "question": "查找评分高于3且平均评分高于5的项目的名称。",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  3 INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING avg(T2.<unk>)  >  5"
    },
    {
        "db_id": "country_language",
        "question": "显示至少被两个国家使用的官方语言。",
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "protein_institute",
        "question": "展示建筑名称，除了那些含有在2003成立的机构的。",
        "query": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT T1.name FROM <mask> AS T1 JOIN institution AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.founded  =  2003"
    },
    {
        "db_id": "inn_1",
        "question": "按价格排序所有房间的名称。",
        "query": "SELECT roomName FROM Rooms ORDER BY basePrice;",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>;"
    },
    {
        "db_id": "car_1",
        "question": "有哪些年份既生产了重量小于4000的汽车，又生产了重量大于3000的汽车？",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM CARS_DATA AS T1 WHERE T1.<unk>  >  3000 AND T1.weight  <  4000;"
    },
    {
        "db_id": "tv_shows",
        "question": "所有无线电的平均ERP是多少？",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "music_2",
        "question": "有多少首歌？",
        "query": "SELECT count(*) FROM Songs",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "department_store",
        "question": "返回由供应商ID2供应并且比所有产品的平均价格更贵的所有产品的ID。",
        "query": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "mask_query": "SELECT T1.<unk> FROM product_suppliers AS T1 JOIN products AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  2 AND T2.<unk>  >  (SELECT avg(<unk>) FROM products)"
    },
    {
        "db_id": "small_bank_1",
        "question": "查找每个帐户名称的支票帐户数。",
        "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "school_finance",
        "question": "查找有不止一个捐赠者少于8.5的学校的数量。",
        "query": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "mask_query": "SELECT count(*) FROM (SELECT * FROM <mask> WHERE <unk>  >  8.5 GROUP BY school_id HAVING count(*)  >  1)"
    },
    {
        "db_id": "loan_1",
        "question": "“上海”的银行的名称是什么？",
        "query": "SELECT bname FROM bank WHERE state  =  '上海'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '上海'"
    },
    {
        "db_id": "music_4",
        "question": "返回每个种类音乐节的数量。",
        "query": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "county_public_safety",
        "question": "返回所有省的最低和最高犯罪率。",
        "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",
        "mask_query": "SELECT min(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "文件ID为3的收据日期是什么？",
        "query": "SELECT receipt_date FROM Documents WHERE document_id = 3;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = 3;"
    },
    {
        "db_id": "election",
        "question": "展示所有不同地区的选举。",
        "query": "SELECT DISTINCT District FROM election",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "bike_racing",
        "question": "不是来自“俄罗斯”的自行车运动员的名字和成绩是什么？",
        "query": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'",
        "mask_query": "SELECT <unk> ,  RESULT FROM <mask> WHERE <unk> != 'Russia'"
    },
    {
        "db_id": "region_building",
        "question": "所有地区的平均人口是多少？",
        "query": "SELECT avg(Population) FROM region",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "riding_club",
        "question": "显示不同的职业和每个职业运动员的数量。",
        "query": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "bakery_1",
        "question": "总共花费超过150美元的顾客的ID是什么？",
        "query": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.id  =  T2.item JOIN <mask> AS T3 ON T2.receipt  =  T3.<unk> GROUP BY T3.<unk> HAVING sum(T1.price)  >  150"
    },
    {
        "db_id": "restaurant_1",
        "question": "“全聚德”餐厅评分是多少？",
        "query": "SELECT Rating FROM Restaurant WHERE ResName = \"全聚德\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"全聚德\";"
    },
    {
        "db_id": "geo",
        "question": "有多少个省有一个叫做“昆明”的城市",
        "query": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"昆明\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  \"昆明\";"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "显示用带有“无回应”结果代码的发放邮件客户的姓名和电话。",
        "query": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  '无回应'",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '无回应'"
    },
    {
        "db_id": "flight_1",
        "question": "99号班机叫什么名字？",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "mask_query": "SELECT T2.<unk> FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  99"
    },
    {
        "db_id": "book_2",
        "question": "显示图书的书名和出版日期。",
        "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "soccer_2",
        "question": "有多少学校有学生既在“守门员”位置又在“中场”位置比赛？",
        "query": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  '守门员' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  '中场')",
        "mask_query": "SELECT COUNT(*) FROM (SELECT <unk> FROM  tryout WHERE <unk>  =  '守门员' INTERSECT SELECT <unk> FROM  tryout WHERE <unk>  =  '中场')"
    },
    {
        "db_id": "csu_1",
        "question": "1996年度“湖南大学”州立大学的学费是多少？",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"湖南大学\" AND T2.year  =  1996",
        "mask_query": "SELECT campusfee FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"湖南大学\" AND T2.year  =  1996"
    },
    {
        "db_id": "hr_1",
        "question": "返回工资在8000到12000之间的雇员的电话号码。",
        "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "mask_query": "SELECT phone_number FROM <mask> WHERE salary BETWEEN 8000 AND 12000"
    },
    {
        "db_id": "wedding",
        "question": "展示所有教堂的名称、开放日期和组织者。",
        "query": "SELECT name ,  open_date ,  organized_by FROM Church",
        "mask_query": "SELECT name ,  open_date ,  organized_by FROM Church"
    },
    {
        "db_id": "game_1",
        "question": "玩的最多的游戏名字是什么？",
        "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "mask_query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "question": "1850年以前出生的艺术家创作的画有多宽？",
        "query": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
        "mask_query": "SELECT T2.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  <  1850"
    },
    {
        "db_id": "program_share",
        "question": "被“央视”或“湖南卫视”拥有的频道名称是什么？",
        "query": "SELECT name FROM channel WHERE OWNER  =  '央视' OR OWNER  =  '湖南卫视'",
        "mask_query": "SELECT name FROM <mask> WHERE OWNER  =  '央视' OR OWNER  =  '湖南卫视'"
    },
    {
        "db_id": "e_government",
        "question": "进行个人联系的联系人的姓氏是什么？",
        "query": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "mask_query": "SELECT DISTINCT t1.<unk> FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.<unk>  =  t2.<unk>"
    },
    {
        "db_id": "college_2",
        "question": "找到“市场”或“财务”部门的总预算。",
        "query": "SELECT sum(budget) FROM department WHERE dept_name  =  '管理' OR dept_name  =  '金融'",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  '管理' OR <unk>  =  '金融'"
    },
    {
        "db_id": "performance_attendance",
        "question": "显示演出最多次的表演地点。",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT LOCATION FROM <mask> GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "找到姓氏是洛根的顾客购买羊角面包的所有收据号码。",
        "query": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.receipt JOIN <mask> AS T3 ON T2.item  =  T3.id JOIN <mask> AS T4 ON T4.<unk>  =  T1.<unk> WHERE T3.food  =  \"Croissant\" AND T4.<unk>  =  'LOGAN'"
    },
    {
        "db_id": "soccer_2",
        "question": "有多少省的大学入学率高于平均入学率？",
        "query": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM college WHERE <unk>  >  (SELECT avg(<unk>) FROM college)"
    },
    {
        "db_id": "department_store",
        "question": "给出最低价格产品的ID和产品类型。",
        "query": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM products ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "singer",
        "question": "显示不同的国籍和每个国籍歌手的最大净资产。",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "mask_query": "SELECT <unk> ,  max(<unk>) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "中找处在“厦门”所有的“啤酒厂”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"厦门\" AND t2.category_name  =  \"啤酒厂\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"厦门\" AND t2.<unk>  =  \"啤酒厂\";"
    },
    {
        "db_id": "geo",
        "question": "人口最少的省的人口密度是多少？",
        "query": "SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "住址的平均月租金最高的学生的id和名字是什么？",
        "query": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY AVG(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "question": "找出每个附属机构的论文总数。",
        "query": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
        "mask_query": "SELECT count(DISTINCT T2.<unk>) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "yelp",
        "question": "列出所有超过3.5的“餐馆”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"餐馆\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  >  3.5 AND t2.<unk>  =  \"餐馆\";"
    },
    {
        "db_id": "address_1",
        "question": "给出城市最多的州。",
        "query": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2",
        "question": "查找所有招生人数比“河北”省所有大学都多的大学的名字。",
        "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  '河北')",
        "mask_query": "SELECT <unk> FROM college WHERE <unk>  >  (SELECT max(<unk>) FROM college WHERE <unk>  =  '河北')"
    },
    {
        "db_id": "network_2",
        "question": "找到“丽丽”的工作是“医生”的“男”朋友？",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  '丽丽' AND T1.gender  =  '男' AND T1.job  =  '医生'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '丽丽' AND T1.<unk>  =  '男' AND T1.<unk>  =  '医生'"
    },
    {
        "db_id": "college_2",
        "question": "查找在2009年“秋天”而不是2010年“春天”教课的老师的ID。",
        "query": "SELECT id FROM teaches WHERE semester  =  '秋季' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  '春季' AND YEAR  =  2010",
        "mask_query": "SELECT id FROM <mask> WHERE <unk>  =  '秋季' AND YEAR  =  2009 EXCEPT SELECT id FROM <mask> WHERE <unk>  =  '春季' AND YEAR  =  2010"
    },
    {
        "db_id": "game_1",
        "question": "玩电子游戏和体育运动的学生的ID是什么？",
        "query": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "mask_query": "SELECT <unk> FROM Sportsinfo INTERSECT SELECT <unk> FROM Plays_games"
    },
    {
        "db_id": "bike_racing",
        "question": "给出同时被名字是名为“布拉德利威金斯”和名为“安东尼奥陶勒”拥有的自行车的名称和价格。",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "mask_query": "SELECT T3.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  'Bradley Wiggins' INTERSECT SELECT T3.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  'Antonio Tauler'"
    },
    {
        "db_id": "election",
        "question": "哪个县有两个以上代表？给我县的名字。",
        "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.County_id  =  T2.<unk> GROUP BY T1.County_id HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "scholar",
        "question": "至少5篇引用的论文",
        "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;",
        "mask_query": "SELECT DISTINCT t2.citingpaperid FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;"
    },
    {
        "db_id": "bike_racing",
        "question": "按价格的升序列出自行车的产品名称和重量。",
        "query": "SELECT product_name ,  weight FROM bike ORDER BY price ASC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "art_1",
        "question": "240号画廊中宽度最长的那幅画的ID和高度是多少？",
        "query": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "按食品排序的食品最低和最高价格是多少？",
        "query": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
        "mask_query": "SELECT min(price) ,  max(price) ,  food FROM <mask> GROUP BY food ORDER BY food"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "列出的所有酶的名称和位置是什么？",
        "query": "SELECT name ,  LOCATION FROM enzyme",
        "mask_query": "SELECT <unk> ,  LOCATION FROM <mask>"
    },
    {
        "db_id": "store_product",
        "question": "不是最常使用的最大页面大小的所有产品的名称是什么？",
        "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT <mask> FROM <mask> WHERE <mask> != (SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "cinema",
        "question": "显示总共演出时间最多的导演。",
        "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
        "mask_query": "SELECT T2.directed_by FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"
    },
    {
        "db_id": "coffee_shop",
        "question": "哪个地址既有会员年龄小于30岁，又有会员超过40岁？",
        "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
        "mask_query": "SELECT address FROM <mask> WHERE age  <  30 INTERSECT SELECT address FROM <mask> WHERE age  >  40"
    },
    {
        "db_id": "book_review",
        "question": "有多少种不同类型的书？",
        "query": "SELECT count(DISTINCT TYPE) FROM book",
        "mask_query": "SELECT count(DISTINCT TYPE) FROM <mask>"
    },
    {
        "db_id": "protein_institute",
        "question": "所有建筑的平均、最大和最小楼层数是多少？",
        "query": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building",
        "mask_query": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM <mask>"
    },
    {
        "db_id": "geo",
        "question": "哪些省与“四川”接壤并有一条大河？",
        "query": "SELECT state_name FROM border_info WHERE border  =  \"四川\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" AND <unk> IN ( SELECT <unk> FROM <mask> WHERE LENGTH  >  750 );"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "列出所有文档的文档ID、文档名称和文档描述。",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "mask_query": "SELECT document_id ,  document_name ,  document_description FROM <mask>"
    },
    {
        "db_id": "yelp",
        "question": "写在2015年的评论有多少",
        "query": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR  =  2015;",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE YEAR  =  2015;"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "显示所有不同的模板类型代码。",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "mask_query": "SELECT DISTINCT template_type_code FROM <mask>"
    },
    {
        "db_id": "sing_contest",
        "question": "有多少歌曲没有被演唱？",
        "query": "SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> );"
    },
    {
        "db_id": "sakila_1",
        "question": "哪位电影男演员（女演员）主演的电影最多？列出他或她的名字，姓氏和演员ID。",
        "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "列出曲目数高于10的专辑标题。",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> HAVING count(T1.<unk>)  >  10;"
    },
    {
        "db_id": "bike_1",
        "question": "每个至少有15个车站的城市叫什么名字？有多少个车站？",
        "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  15"
    },
    {
        "db_id": "storm_record",
        "question": "影响最多区域的暴风雨的名称和最大速度是多少？",
        "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.name ,  T1.max_speed FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "shop_membership",
        "question": "有多少分支机构的会员人数超过平均数？",
        "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  (SELECT avg(<unk>) FROM <mask>)"
    },
    {
        "db_id": "baseball_1",
        "question": "找出“复旦大学”运动员的平均身高。",
        "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  '复旦大学';",
        "mask_query": "SELECT avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  '复旦大学';"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出在2004年以前为某个地区服务过的发言人的名字。",
        "query": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.start_year  <  2004"
    },
    {
        "db_id": "match_season",
        "question": "显示球员的位置和相应的球员数量。",
        "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
        "mask_query": "SELECT POSITION ,  COUNT(*) FROM <mask> GROUP BY POSITION"
    },
    {
        "db_id": "music_2",
        "question": "歌曲“红日”中有多少种乐器被使用？",
        "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"红日\"",
        "mask_query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"红日\""
    },
    {
        "db_id": "warehouse_1",
        "question": "框中每种存储物的平均值和最大值是多少？",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "mask_query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "theme_gallery",
        "question": "“美国”所有艺术家的平均年龄和最小年龄是多少？",
        "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  '美国'",
        "mask_query": "SELECT avg(age) ,  min(age) FROM <mask> WHERE country  =  '美国'"
    },
    {
        "db_id": "vehicle_rent",
        "question": "显示城市燃油经济性比率小于或等于公路燃油经济性比率的车辆的名称和车型年份。",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "mask_query": "SELECT <unk> ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "music_1",
        "question": "最近一年发行的歌叫什么名字？",
        "query": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "“马丽的简历”被保存的日期是什么时候？",
        "query": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"马丽的简历\"",
        "mask_query": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"马丽的简历\""
    },
    {
        "db_id": "sing_contest",
        "question": "哪首歌的名字有子串“是”？",
        "query": "SELECT name FROM songs WHERE name LIKE \"%Is%\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"%Is%\""
    },
    {
        "db_id": "race_track",
        "question": "显示比赛类别和每种类别的比赛数量。",
        "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
        "mask_query": "SELECT CLASS ,  count(*) FROM <mask> GROUP BY CLASS"
    },
    {
        "db_id": "apartment_rentals",
        "question": "哪些客人公寓预订的状态代码为“确认”？返回他们的名字和姓。",
        "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"确认\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"确认\""
    },
    {
        "db_id": "soccer_2",
        "question": "来自最大大学的所有选拔参与者的名字是什么？",
        "query": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "mask_query": "SELECT T2.<unk> FROM  tryout AS T1 JOIN player AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  (SELECT <unk> FROM college ORDER BY <unk> DESC LIMIT 1)"
    },
    {
        "db_id": "loan_1",
        "question": "银行客户的平均数量是多少？",
        "query": "SELECT avg(no_of_customers) FROM bank",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "mountain_photos",
        "question": "至少有2张照片的山的id和名字是什么？",
        "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "bike_1",
        "question": "对于每个邮编，返回那里8月的平均温度。",
        "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"八月\" GROUP BY zip_code",
        "mask_query": "SELECT <unk>  ,  avg(<unk>) FROM <mask> WHERE <unk> LIKE \"八月\" GROUP BY <unk>"
    },
    {
        "db_id": "assets_maintenance",
        "question": "每个员工联系了多少工程师？列出进行联系的员工的姓名和联系的工程师的数量。",
        "query": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "e_commerce",
        "question": "列出产生至少两次发货的发票日期和ID。",
        "query": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "soccer_3",
        "question": "显示来自国家“澳大利亚”或“津巴布韦”球员的收入。",
        "query": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Australia\" OR <unk>  =  \"Zimbabwe\""
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "每个房产有多少居民？列出属性ID和常驻计数。",
        "query": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "solvency_ii",
        "question": "价格最高的产品叫什么名字？",
        "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "question": "收到“失败”评估码的候选人的手机号码是多少？",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"失败\"",
        "mask_query": "SELECT T3.<unk> FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.<unk> = T2.<unk> JOIN people AS T3 ON T1.<unk> = T3.<unk> WHERE T2.<unk> = \"失败\""
    },
    {
        "db_id": "music_2",
        "question": "在数据库中列出的不同乐器有哪些？",
        "query": "SELECT DISTINCT instrument FROM Instruments",
        "mask_query": "SELECT DISTINCT instrument FROM <mask>"
    },
    {
        "db_id": "epinions_1",
        "question": "找出具有最高平均评分的项目的名称和ID。",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY avg(T2.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "sing_contest",
        "question": "名字不是“爱”的歌曲的id、语言和原作者是什么？",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "mask_query": "SELECT <unk> ,  LANGUAGE ,  <unk> FROM <mask> WHERE <unk> != 'Love'"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”的主页。",
        "query": "SELECT homepage FROM author WHERE name  =  \"李政道\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"李政道\";"
    },
    {
        "db_id": "party_people",
        "question": "显示每个党派的名称和事件的数量。",
        "query": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "mask_query": "SELECT T2.party_name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"
    },
    {
        "db_id": "club_1",
        "question": "找出“赛车”俱乐部的所有“女性”成员的名字和姓氏。",
        "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t3.sex  =  \"F\"",
        "mask_query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"赛车\" AND t3.sex  =  \"F\""
    },
    {
        "db_id": "student_1",
        "question": "找出教授“吴”“琼”的所有老师的名字和姓氏。",
        "query": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"吴\" AND T1.lastname  =  \"琼\"",
        "mask_query": "SELECT T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"吴\" AND T1.lastname  =  \"琼\""
    },
    {
        "db_id": "academic",
        "question": "返回给我“PVLDB”的领域。",
        "query": "SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\";",
        "mask_query": "SELECT t3.<unk> FROM DOMAIN AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "flight_company",
        "question": "每个国家有多少个机场？",
        "query": "SELECT count(*) ,  country FROM airport GROUP BY country",
        "mask_query": "SELECT count(*) ,  country FROM <mask> GROUP BY country"
    },
    {
        "db_id": "protein_institute",
        "question": "显示机构名称以及每个机构的蛋白质数量。",
        "query": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id",
        "mask_query": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN <mask> AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "列出分配到id为1的问题的所有不同工作人员的名字和姓氏。",
        "query": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "mask_query": "SELECT DISTINCT <unk> ,  <unk> FROM staff AS T1 JOIN problem_log AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = 1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出使用电子邮件作为联系渠道的客户的姓名和活动日期。",
        "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  \"Email\"",
        "mask_query": "SELECT t1.<unk> ,  t2.<unk> FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"Email\""
    },
    {
        "db_id": "activity_1",
        "question": "找出正在玩“独木舟”或“皮划艇”的教职员的名字。",
        "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  \"独木舟\" OR T3.activity_name  =  \"皮划艇\"",
        "mask_query": "SELECT DISTINCT T1.lname FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"独木舟\" OR T3.<unk>  =  \"皮划艇\""
    },
    {
        "db_id": "voter_1",
        "question": "来自“江苏”州或“浙江”州的票数是多少？",
        "query": "SELECT count(*) FROM votes WHERE state  =  \"江苏\" OR state  =  \"浙江\"",
        "mask_query": "SELECT count(*) FROM votes WHERE <unk>  =  \"江苏\" OR <unk>  =  \"浙江\""
    },
    {
        "db_id": "movie_1",
        "question": "找到所有未被“谢晨”评论的电影的标题。",
        "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  '谢晨'",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> EXCEPT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '谢晨'"
    },
    {
        "db_id": "world_1",
        "question": "返回人口在160000到900000之间的城市的名字。",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> BETWEEN 160000 AND 90000"
    },
    {
        "db_id": "car_racing",
        "question": "列出与至少三个司机有关联的品牌。",
        "query": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "bike_1",
        "question": "“重庆”城有多少个车站？",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"重庆\"",
        "mask_query": "SELECT COUNT(*) FROM <mask> WHERE <unk>  =  \"重庆\""
    },
    {
        "db_id": "concert_singer",
        "question": "按歌手年龄从最大到最小，显示每个歌手的姓名、国家、年龄。",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "mask_query": "SELECT name ,  country ,  age FROM <mask> ORDER BY age DESC"
    },
    {
        "db_id": "customer_complaints",
        "question": "数据库中有多少不同的投诉类型代码？",
        "query": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM complaints"
    },
    {
        "db_id": "school_bus",
        "question": "展示所有不同的家乡城市。",
        "query": "SELECT DISTINCT home_city FROM driver",
        "mask_query": "SELECT DISTINCT home_city FROM <mask>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "预算类型代码是“SF”的文档ID是什么？",
        "query": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  \"SF\"",
        "mask_query": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  \"SF\""
    },
    {
        "db_id": "allergy_1",
        "question": "列出没有“食物”过敏的学生的名字和姓氏。",
        "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"食物\")",
        "mask_query": "SELECT fname ,  lname FROM <mask> WHERE <unk> NOT IN (SELECT T1.<unk> FROM Has_allergy AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.allergytype  =  \"食物\")"
    },
    {
        "db_id": "college_1",
        "question": "成绩前5名的学生的名字、平均成绩和电话号码是多少？",
        "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "mask_query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5"
    },
    {
        "db_id": "formula_1",
        "question": "请查找参加过最多30场比赛的所有驾驶员的ID和比赛次数。",
        "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
        "mask_query": "SELECT T1.driverid ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.driverid = T2.driverid JOIN <mask> AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "所有账户的ID和详细信息是什么？",
        "query": "SELECT account_id ,  account_details FROM Accounts",
        "mask_query": "SELECT account_id ,  account_details FROM <mask>"
    },
    {
        "db_id": "game_injury",
        "question": "没有遭受“膝盖受伤”伤害的球员的名字，比赛的数量，以及球员的信息来源是什么？",
        "query": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != '膝盖受伤'",
        "mask_query": "SELECT player ,  number_of_matches ,  SOURCE FROM <mask> WHERE injury != '膝盖受伤'"
    },
    {
        "db_id": "world_1",
        "question": "平均预期寿命大于72岁的政府形式及其总人口是多少？",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "mask_query": "SELECT sum(<unk>) ,  <unk> FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  >  72"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出名为“杨超越”的客户使用的联系渠道代码。",
        "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"杨超越\"",
        "mask_query": "SELECT DISTINCT <unk> FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"杨超越\""
    },
    {
        "db_id": "candidate_poll",
        "question": "针对那一项的民意调查有最高的反对率？",
        "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "mask_query": "SELECT poll_source FROM <mask> ORDER BY oppose_rate DESC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "显示过去没有工作过的员工的所有信息。",
        "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "mask_query": "SELECT * FROM <mask> WHERE employee_id NOT IN (SELECT employee_id FROM <mask>)"
    },
    {
        "db_id": "vehicle_driver",
        "question": "按字母顺序排列，司机的姓名是什么？",
        "query": "SELECT name FROM driver ORDER BY name",
        "mask_query": "SELECT name FROM <mask> ORDER BY name"
    },
    {
        "db_id": "cinema",
        "question": "显示2011年或之后所有开业的电影院的平均、最低和最大容量。",
        "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
        "mask_query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM <mask> WHERE openning_year  >=  2011"
    },
    {
        "db_id": "college_1",
        "question": "有多少门课？",
        "query": "SELECT count(DISTINCT class_code) FROM CLASS",
        "mask_query": "SELECT count(DISTINCT class_code) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议上有论文的作者的数量。",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "county_public_safety",
        "question": "请显示警察机关和每个警察机关管辖的省的数目。",
        "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "有学生参加过的所有课程的名称是什么？",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "hr_1",
        "question": "显示与名字是“明明”的同事在同一个部门但不包括“明明”的其它雇员的全名（名字和姓氏）和雇用日期。",
        "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"明明\") AND first_name != \"明明\"",
        "mask_query": "SELECT first_name ,  last_name ,  hire_date FROM <mask> WHERE department_id  =  ( SELECT department_id FROM <mask> WHERE first_name  =  \"明明\") AND first_name != \"明明\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "有多少种不同的事件类型代码？",
        "query": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "给我订购了最多的物品总数的客户的名字。",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> JOIN order_items AS t3 ON t2.<unk>  =  t3.<unk> GROUP BY t1.<unk> ORDER BY sum(t3.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "question": "找出那些“春季”学期没有上过任何课程的老师的名字。",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  '春季')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE id NOT IN (SELECT id FROM <mask> WHERE <unk>  =  '春季')"
    },
    {
        "db_id": "university_basketball",
        "question": "查找那些入学人数小于平均入学人数的大学的队伍名称。",
        "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "mask_query": "SELECT t2.team_name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM <mask>)"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "名称为“亚麻”的产品所属类别的代码是什么？",
        "query": "SELECT product_category_code FROM products WHERE product_name  =  \"亚麻\"",
        "mask_query": "SELECT <unk> FROM products WHERE <unk>  =  \"亚麻\""
    },
    {
        "db_id": "e_learning",
        "question": "讲授“操作系统”或“数据结构”课程的作者的地址是什么？",
        "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"操作系统\" OR T2.course_name  =  \"数据结构\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"操作系统\" OR T2.<unk>  =  \"数据结构\""
    },
    {
        "db_id": "scholar",
        "question": "2000年“克里斯蒂夫·达勒马斯”使用的关键词",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"克里斯蒂夫·达勒马斯\" AND t3.year  =  2000;",
        "mask_query": "SELECT DISTINCT t2.keyphraseid FROM <mask> AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"克里斯蒂夫·达勒马斯\" AND t3.<unk>  =  2000;"
    },
    {
        "db_id": "sakila_1",
        "question": "在“2005-08-2302:06:01”之后没有租过电影的客户的名字是什么？",
        "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN( SELECT <unk> FROM <mask> WHERE <unk>  >  '2005-08-23 02:06:01' )"
    },
    {
        "db_id": "singer",
        "question": "列出国籍不是“巴黎”的歌手的名字。",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"巴黎\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"巴黎\""
    },
    {
        "db_id": "car_road_race",
        "question": "列出不参加任何比赛的车手的名字。",
        "query": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "baseball_1",
        "question": "2001年前3名高收益球员的薪水是多少？",
        "query": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
        "mask_query": "SELECT <mask> FROM <mask> WHERE YEAR  =  2001 ORDER BY <mask> DESC LIMIT 3;"
    },
    {
        "db_id": "ship_mission",
        "question": "1928号涉及任务的船只名称是什么？",
        "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  1928"
    },
    {
        "db_id": "voter_2",
        "question": "给出年龄最大的和最年轻的学习专业600的学生。",
        "query": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM STUDENT WHERE <unk>  =  600"
    },
    {
        "db_id": "yelp",
        "question": "查找“3月”份撰写的评论总数",
        "query": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"3月\";",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE MONTH  =  \"3月\";"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "找出最老的日志ID及其对应的问题ID。",
        "query": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM problem_log ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "流程状态代码为CT的描述是什么？",
        "query": "SELECT process_status_description FROM Process_status WHERE process_status_code  =  \"ct\"",
        "mask_query": "SELECT <unk> FROM Process_status WHERE <unk>  =  \"ct\""
    },
    {
        "db_id": "store_product",
        "question": "超过3个产品列表的所有产品的最大页面大小是多少？",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  3"
    },
    {
        "db_id": "e_government",
        "question": "根据建立日期升序的所有组织名称是什么？",
        "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "mask_query": "SELECT <unk> FROM organizations ORDER BY <unk> ASC"
    },
    {
        "db_id": "insurance_policies",
        "question": "列出只有一次清算的索赔中的索赔的日期，结算的日期以及所有索赔的清算金额。",
        "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
        "mask_query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1"
    },
    {
        "db_id": "store_1",
        "question": "有超过100条曲目的所有播放列表的名称是什么？",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk> = T1.<unk> GROUP BY T1.<unk> HAVING count(T1.<unk>)  >  100;"
    },
    {
        "db_id": "scientist_1",
        "question": "查找不同项目的数量。",
        "query": "SELECT count(DISTINCT name) FROM projects",
        "mask_query": "SELECT count(DISTINCT name) FROM projects"
    },
    {
        "db_id": "bike_1",
        "question": "给我最高温度高于85的日期。",
        "query": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  85"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "没有任何保险单的客户的名字是什么？",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "mask_query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "db_id": "allergy_1",
        "question": "学生总数是多少？",
        "query": "SELECT count(*) FROM Student",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "art_1",
        "question": "所有不在226号画廊的雕塑的名称和创作日期是什么？",
        "query": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
        "mask_query": "SELECT <unk> ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\""
    },
    {
        "db_id": "party_host",
        "question": "显示主持人最常见的国籍。",
        "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM HOST GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "哪个文档的相关文档数量在2到4之间？列出文档ID和相关文档的数量。",
        "query": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;",
        "mask_query": "SELECT <unk> , count(*) FROM <mask> GROUP BY <unk> HAVING count(*) BETWEEN 2 AND 4;"
    },
    {
        "db_id": "warehouse_1",
        "question": "仓库的不同位置有哪些？",
        "query": "SELECT count(DISTINCT LOCATION) FROM warehouses",
        "mask_query": "SELECT count(DISTINCT LOCATION) FROM warehouses"
    },
    {
        "db_id": "hr_1",
        "question": "“1987-09-07”以后雇佣了哪些员工？",
        "query": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "mask_query": "SELECT * FROM <mask> WHERE hire_date  >  '1987-09-07'"
    },
    {
        "db_id": "baseball_1",
        "question": "“广州恒大队”总共参加了多少次季后赛？",
        "query": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  '广州恒大队' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  '广州恒大队' );",
        "mask_query": "SELECT count(*) FROM ( SELECT * FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '广州恒大队' UNION SELECT * FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '广州恒大队' );"
    },
    {
        "db_id": "battle_death",
        "question": "造成总伤害最多的船的ID和名称是什么？",
        "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "gas_company",
        "question": "每个总部的名称是什么且有多少公司集中在那里？",
        "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "mask_query": "SELECT headquarters ,  count(*) FROM <mask> GROUP BY headquarters"
    },
    {
        "db_id": "flight_4",
        "question": "在“中国”起步的航线最多的目的地机场叫什么名字？",
        "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  \"中国\" GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"中国\" GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "关于“人工智能”的引用最多的论文是什么？",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"人工智能\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"人工智能\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
    },
    {
        "db_id": "coffee_shop",
        "question": "哪几个月有超过2个快乐时间？",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
        "mask_query": "SELECT MONTH FROM <mask> GROUP BY MONTH HAVING count(*)  >  2"
    },
    {
        "db_id": "hospital_1",
        "question": "医师“文翰”执行手术的平均费用是多少？",
        "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\"",
        "mask_query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\""
    },
    {
        "db_id": "allergy_1",
        "question": "显示所有受过敏影响的学生人数。",
        "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "mask_query": "SELECT <unk> ,  count(*) FROM Has_allergy GROUP BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "返回在2005年的“VLDB”会议上发表的论文的总引用。",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005;",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" AND t2.<unk>  =  2005;"
    },
    {
        "db_id": "manufactory_1",
        "question": "找出每个制造商的产品数量，显示每个公司的名称。",
        "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "mask_query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.<unk>  =  T2.code GROUP BY T2.name"
    },
    {
        "db_id": "book_press",
        "question": "返回每个性别及其作者的平均年龄。",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "mask_query": "SELECT avg(age) ,  gender FROM <mask> GROUP BY gender"
    },
    {
        "db_id": "imdb",
        "question": "给出“阿富汗”所有演员的名字",
        "query": "SELECT name FROM actor WHERE nationality  =  \"阿富汗\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"阿富汗\";"
    },
    {
        "db_id": "small_bank_1",
        "question": "所有名字包含“怡”的所有者的账户支票余额是什么？",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '怡'",
        "mask_query": "SELECT T2.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk> LIKE '怡'"
    },
    {
        "db_id": "college_3",
        "question": "查找系号为520的系人员中教员的全名。",
        "query": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  520"
    },
    {
        "db_id": "scholar",
        "question": "谁与“阿密特·索尼”和“拉丝·布迪克”合著一篇论文？",
        "query": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"阿密特·索尼\" AND t1.authorname  =  \"拉丝·布迪克\";",
        "mask_query": "SELECT DISTINCT t5.authorid FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.authorid  =  t2.authorid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t5 ON t5.paperid  =  t4.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"阿密特·索尼\" AND t1.authorname  =  \"拉丝·布迪克\";"
    },
    {
        "db_id": "dog_kennels",
        "question": "治疗费用低于平均的专家的名字和姓氏是什么？",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 WHERE <unk>  <  ( SELECT avg(<unk>) FROM <mask> )"
    },
    {
        "db_id": "academic",
        "question": "返回那些“李政道”发表了超过10篇论文的会议。",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" GROUP BY t2.<unk> HAVING COUNT ( DISTINCT t4.<unk> )  >  10;"
    },
    {
        "db_id": "county_public_safety",
        "question": "城市的白人比例是多少，它们所对应的省的犯罪率是多少？",
        "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "restaurants",
        "question": "“厦门”有多少“海鲜”餐厅？",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"厦门\" AND t1.name  =  \"海鲜\";",
        "mask_query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"厦门\" AND t1.name  =  \"海鲜\";"
    },
    {
        "db_id": "network_2",
        "question": "每个有40岁以上和30岁以下的朋友的人的名字是什么？",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN (SELECT <unk> FROM <mask> WHERE <unk>  >  40) INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN (SELECT <unk> FROM <mask> WHERE <unk>  <  30)"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "哪种状态代码是所有预订中最常见的？",
        "query": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM BOOKINGS GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "planet_1",
        "question": "计算在每个运输工具上运送的包裹的总重量。",
        "query": "SELECT T3.Name ,  sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet;",
        "mask_query": "SELECT T3.<unk> ,  sum(T1.<unk>) FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T2.<mask> = T3.<unk> GROUP BY T2.<mask>;"
    },
    {
        "db_id": "concert_singer",
        "question": "显示所有音乐会的名称和主题以及每场音乐会的歌手人数。",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "mask_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "马林拥有的文件有多少？",
        "query": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE OWNER = \"Marlin\";"
    },
    {
        "db_id": "allergy_1",
        "question": "哪个专业的学生最多？",
        "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT major FROM <mask> GROUP BY major ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "network_1",
        "question": "显示所有有朋友和被别人喜欢的学生的名字。",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id INTERSECT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id"
    },
    {
        "db_id": "aan_1",
        "question": "被引用最多的论文的ID和引用次数是多少？",
        "query": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "question": "每个预订状态有多少预订？列出预订状态代码和相应预订的数量。",
        "query": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "mask_query": "SELECT \t<unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "candidate_poll",
        "question": "哪个性别的平均不确定率最高。",
        "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "mask_query": "SELECT t1.sex FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"
    },
    {
        "db_id": "manufactory_1",
        "question": "找出收益大于所有公司平均收益的公司的名称。",
        "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "mask_query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"
    },
    {
        "db_id": "yelp",
        "question": "有多少人在2015年评论了“全聚德”？",
        "query": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"全聚德\" AND t2.year  =  2015;",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"全聚德\" AND t2.<unk>  =  2015;"
    },
    {
        "db_id": "geo",
        "question": "“长江”经过的最小的省最大的城市是什么？",
        "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"长江\" ) ) ) ORDER BY population DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" ) AND <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"长江\" ) ) ) ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "索赔处理阶段的索赔最多的名称是什么？",
        "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "e_government",
        "question": "找出该组织中具有最高的UK Vat号码的第一联系人的姓氏。",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "mask_query": "SELECT t3.<unk> FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.<unk>  =  t2.<unk> JOIN individuals AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  (SELECT max(<unk>) FROM organizations) ORDER BY t2.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "question": "总租赁时间超过30小时的汽车名称和动力系统类型是什么？",
        "query": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING sum(T1.<unk>)  >  30"
    },
    {
        "db_id": "student_assessment",
        "question": "注册课程数量最少但是注册了一些课程的学生的ID是什么？",
        "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> FROM student_course_registrations GROUP BY <unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "tracking_orders",
        "question": "那些客户的订单状态是“在路上”？给我客户的详细资料？",
        "query": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"在路上\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"在路上\""
    },
    {
        "db_id": "art_1",
        "question": "那些没有雕刻作品但有绘画作品的艺术家的名字和姓氏是什么？",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> EXCEPT SELECT T3.<unk> ,  T3.<unk> FROM artists AS T3 JOIN sculptures AS T4 ON T3.<unk>  =  T4.<unk>"
    },
    {
        "db_id": "allergy_1",
        "question": "哪些过敏反应影响的学生数量最多？",
        "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM Has_allergy GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "人口最多的省的省会是什么？",
        "query": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "match_season",
        "question": "有什么不同的地方的赛季？",
        "query": "SELECT DISTINCT POSITION FROM match_season",
        "mask_query": "SELECT DISTINCT POSITION FROM <mask>"
    },
    {
        "db_id": "news_report",
        "question": "找出不同角色类型记者的平均年龄和工作经历。",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "mask_query": "SELECT avg(t1.age) ,  avg(<unk>) ,  t2.work_type FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "book_press",
        "question": "哪些作者出版了一本以上的书？给出他们的名字。",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1"
    },
    {
        "db_id": "flight_2",
        "question": "哪些机场没有起飞或到达的航班？",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "mask_query": "SELECT <unk> FROM Airports WHERE <unk> NOT IN (SELECT <unk> FROM Flights UNION SELECT <unk> FROM Flights)"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "每个学生上几门课？列出学生id、学生简历和课程数。",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "tvshow",
        "question": "播出电视连续剧“潜伏”的电视频道的剧集是什么？",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"潜伏\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"潜伏\";"
    },
    {
        "db_id": "game_injury",
        "question": "有多少比赛没有伤害事故？",
        "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "hr_1",
        "question": "显示那些包含汉字“文”的员工的名字，姓氏和所在的城市。",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '文'",
        "mask_query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id JOIN <mask> AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '文'"
    },
    {
        "db_id": "bike_1",
        "question": "最短路线的ID是什么？",
        "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "product_catalog",
        "question": "级别号在5以上的目录的名称和发布日期是什么？",
        "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "mask_query": "SELECT t1.<unk> ,  t1.<unk> FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.<unk>  =  t2.<unk> WHERE <unk>  >  5"
    },
    {
        "db_id": "sports_competition",
        "question": "“国安”俱乐部的球员平均得分是多少？",
        "query": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"国安\"",
        "mask_query": "SELECT avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"国安\""
    },
    {
        "db_id": "cinema",
        "question": "显示每个位置和对应电影院的数量。",
        "query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
        "mask_query": "SELECT LOCATION ,  count(*) FROM <mask> GROUP BY LOCATION"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示按平均份额数排序的每个投资者的交易平均份额数。",
        "query": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM TRANSACTIONS GROUP BY <unk> ORDER BY avg(<unk>)"
    },
    {
        "db_id": "scientist_1",
        "question": "所有项目的总时间是多少？",
        "query": "SELECT sum(hours) FROM projects",
        "mask_query": "SELECT sum(hours) FROM projects"
    },
    {
        "db_id": "department_store",
        "question": "按地址的字母顺序排列的所有供应商的姓名和电话号码是什么？",
        "query": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN supplier_addresses AS T2 ON T1.<unk>  =  T2.<unk> JOIN addresses AS T3 ON T2.<unk>  =  T3.<unk> ORDER BY T3.<unk>"
    },
    {
        "db_id": "wedding",
        "question": "展示所有国家和每个国家的人数。",
        "query": "SELECT country ,  count(*) FROM people GROUP BY country",
        "mask_query": "SELECT country ,  count(*) FROM <mask> GROUP BY country"
    },
    {
        "db_id": "book_2",
        "question": "按出版升序排列，列出书名。",
        "query": "SELECT Title FROM book ORDER BY Issues ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "geo",
        "question": "“台湾”有多少市？",
        "query": "SELECT COUNT ( capital ) FROM state WHERE state_name  =  \"台湾\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  \"台湾\";"
    },
    {
        "db_id": "company_office",
        "question": "以建筑物高度降序列出建筑物名称。",
        "query": "SELECT name FROM buildings ORDER BY Height DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "flight_2",
        "question": "找出在“哈尔滨”或“长春”降落的航班的航班号。",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"哈尔滨\" OR T2.city  =  \"长春\"",
        "mask_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.city  =  \"哈尔滨\" OR T2.city  =  \"长春\""
    },
    {
        "db_id": "e_learning",
        "question": "查找教授课程名为“高级数据库”的作者的登录名。",
        "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"高级数据库\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"高级数据库\""
    },
    {
        "db_id": "college_2",
        "question": "2003秋季选修过课程的学生的姓名是什么？",
        "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  '秋季' AND YEAR  =  2003)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE id IN (SELECT id FROM <mask> WHERE <unk>  =  '秋季' AND YEAR  =  2003)"
    },
    {
        "db_id": "warehouse_1",
        "question": "查找位于芝加哥和纽约的仓库中的所有存储物。",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "mask_query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "race_track",
        "question": "比赛有哪些不同的类别？",
        "query": "SELECT DISTINCT CLASS FROM race",
        "mask_query": "SELECT DISTINCT CLASS FROM <mask>"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "什么是不同的建筑物的类型？",
        "query": "SELECT DISTINCT premises_type FROM premises",
        "mask_query": "SELECT DISTINCT <unk> FROM premises"
    },
    {
        "db_id": "architecture",
        "question": "1850年以前有多少建筑师返回没有建造过工厂？",
        "query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> WHERE <unk>  <  1850 );"
    },
    {
        "db_id": "cinema",
        "question": "列出所有导演和导演导演的电影数量。",
        "query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
        "mask_query": "SELECT directed_by ,  count(*) FROM <mask> GROUP BY directed_by"
    },
    {
        "db_id": "bbc_channels",
        "question": "查找有多于一个节目的频道的名称和网站链接。",
        "query": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1",
        "mask_query": "SELECT t1.name ,  t1.internet FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1"
    },
    {
        "db_id": "aircraft",
        "question": "最年轻的获奖飞行员的名字和年龄是多少？",
        "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
        "mask_query": "SELECT t1.name ,  t1.age FROM <mask> AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1"
    },
    {
        "db_id": "movie_2",
        "question": "所有的电影名字是什么？",
        "query": "SELECT title FROM movies",
        "mask_query": "SELECT title FROM movies"
    },
    {
        "db_id": "hospital_1",
        "question": "每个医生要照顾多少病人？列出他们照顾的病人的姓名和数量。",
        "query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "mask_query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.<unk> GROUP BY T1.employeeid"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "所有房产中最常见的特征的特证名和特征描述是什么？",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "sakila_1",
        "question": "“四川”地区有多少地址？",
        "query": "SELECT count(*) FROM address WHERE district  =  '四川'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '四川'"
    },
    {
        "db_id": "epinions_1",
        "question": "找到最高评级的用户的名字。",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "question": "在1935到1939年间创办了哪个学校？",
        "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "mask_query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    {
        "db_id": "bike_1",
        "question": "那些纬度在37.4以上、自行车可用率从来在7以下的车站的ID是多少？",
        "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  37.4 EXCEPT SELECT <unk> FROM <mask> GROUP BY <unk> HAVING min(<unk>)  <  7"
    },
    {
        "db_id": "allergy_1",
        "question": "对“牛奶”过敏但能忍受“猫”的学生的名字和性别是什么？",
        "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"牛奶\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"猫\")",
        "mask_query": "SELECT fname ,  sex FROM <mask> WHERE <unk> IN (SELECT <unk> FROM Has_allergy WHERE <unk>  =  \"牛奶\" EXCEPT SELECT <unk> FROM Has_allergy WHERE <unk>  =  \"猫\")"
    },
    {
        "db_id": "party_people",
        "question": "不在进步党中的成员的名字是什么？",
        "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"进步党\"",
        "mask_query": "SELECT T1.member_name FROM Member AS T1 JOIN <mask> AS T2 ON T1.party_id  =  T2.party_id WHERE T2.<unk> != \"进步党\""
    },
    {
        "db_id": "academic",
        "question": "返回“VLDB”会议中的关键词。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "college_1",
        "question": "不同课程代码的数量是多少？",
        "query": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "mask_query": "SELECT count(DISTINCT crs_code) FROM <mask>"
    },
    {
        "db_id": "address_1",
        "question": "宾夕法尼亚州所有城市的名字是什么？",
        "query": "SELECT city_name FROM City WHERE state  =  \"PA\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"PA\""
    },
    {
        "db_id": "country_language",
        "question": "显示总分大于95分的国家和总分小于90分的国家使用的官方语言名称。",
        "query": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  >  95 INTERSECT SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  <  90"
    },
    {
        "db_id": "yelp",
        "question": "查找最多数量类别的业务",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> GROUP BY t1.<unk> ORDER BY COUNT ( DISTINCT t2.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "epinions_1",
        "question": "有多少不同的项目被一些用户评论？",
        "query": "SELECT count(DISTINCT i_id) FROM review",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "pets_1",
        "question": "所有拥有多只宠物的学生的名和性别是什么？",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "mask_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "db_id": "store_product",
        "question": "哪一个城市的旗舰店数量最多？",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t3.headquartered_city FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id JOIN <mask> AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "network_1",
        "question": "显示10年级所有高中生的名字。",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  10"
    },
    {
        "db_id": "driving_school",
        "question": "总共有多少辆车？",
        "query": "SELECT count(*) FROM Vehicles;",
        "mask_query": "SELECT count(*) FROM <mask>;"
    },
    {
        "db_id": "department_store",
        "question": "返回客户10的地址。",
        "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "mask_query": "SELECT T1.<unk> FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  10"
    },
    {
        "db_id": "e_learning",
        "question": "列出所有课程的作者或导师的地址。",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "program_share",
        "question": "给我看一个拥有最高评级的频道的所有者。",
        "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
        "mask_query": "SELECT OWNER FROM <mask> ORDER BY rating_in_percent DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "哪个文档的子文档最多？列出文档ID和子文档编号。",
        "query": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "musical",
        "question": "演员和他们出演的音乐剧的名字是什么？",
        "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "找出在“马” “军军”员工报告的任何问题日期之后报告的问题的ID。",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"马\" AND T4.staff_last_name = \"军军\" )",
        "mask_query": "SELECT T1.<unk> FROM problems AS T1 JOIN staff AS T2 ON T1.<unk> = T2.<unk> WHERE <unk>  >  ( SELECT max(<unk>) FROM problems AS T3 JOIN staff AS T4 ON T3.<unk> = T4.<unk> WHERE T4.<unk> = \"马\" AND T4.<unk> = \"军军\" )"
    },
    {
        "db_id": "train_station",
        "question": "显示每个车站的火车站的名称和数量。",
        "query": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id",
        "mask_query": "SELECT T2.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id"
    },
    {
        "db_id": "boat_1",
        "question": "所有水手的平均等级和最大年龄是多少？",
        "query": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
        "mask_query": "SELECT AVG(<unk>) ,  MAX(<unk>) FROM <mask>"
    },
    {
        "db_id": "dorm_1",
        "question": "找到住在设施最多的宿舍的学生的名字。",
        "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN (SELECT T2.<unk> FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.<unk>  =  T4.<unk> JOIN dorm_amenity AS T5 ON T4.<unk>  =  T5.<unk> GROUP BY T3.<unk> ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "advertising_agencies",
        "question": "返回参加过一次会议并有发票的客户的ID、SIC代码和代理机构ID。",
        "query": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM clients AS T1 JOIN meetings AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  =  1 INTERSECT SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM clients AS T1 JOIN invoices AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "network_2",
        "question": "“丽丽”的“女”朋友是什么？",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  '丽丽' AND T1.gender  =  '女'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '丽丽' AND T1.<unk>  =  '女'"
    },
    {
        "db_id": "geo",
        "question": "与“四川”接壤的省的人口是多少？",
        "query": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"四川\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"四川\";"
    },
    {
        "db_id": "soccer_2",
        "question": "在“江苏”规模超过15000所或“山东”省注册人数少于13000人的大学的名称是什么？",
        "query": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"山东\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"江苏\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  13000 AND <unk> = \"山东\" UNION SELECT <unk> FROM <mask> WHERE <unk>  >  15000 AND <unk> = \"江苏\""
    },
    {
        "db_id": "student_assessment",
        "question": "所有上课学生ID是什么？这些课程的名称是什么？",
        "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.<unk> = T2.<unk>"
    },
    {
        "db_id": "scientist_1",
        "question": "以科学家“李文军”或“张智名”被分配到的项目的时间合集是什么？",
        "query": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  \"李文军\" OR T3.name  =  \"张智名\"",
        "mask_query": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.<unk> WHERE T3.name  =  \"李文军\" OR T3.name  =  \"张智名\""
    },
    {
        "db_id": "baseball_1",
        "question": "找到所有死亡记录为空的球员的名字和姓氏。",
        "query": "SELECT name_first ,  name_last FROM player WHERE death_year = '';",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> = '';"
    },
    {
        "db_id": "apartment_rentals",
        "question": "返回类型代码为“公寓”的公寓号码。",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"公寓\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"公寓\""
    },
    {
        "db_id": "game_1",
        "question": "按照他们名字的顺序显示所有的电子游戏和他们的类型。",
        "query": "SELECT gname ,  gtype FROM Video_games ORDER BY gname",
        "mask_query": "SELECT gname ,  gtype FROM Video_games ORDER BY gname"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "居民入住的最后一天是什么时候？",
        "query": "SELECT max(date_moved_in) FROM Residents",
        "mask_query": "SELECT max(<unk>) FROM <mask>"
    },
    {
        "db_id": "club_leader",
        "question": "显示年龄为19或20岁的会员的姓名。",
        "query": "SELECT Name FROM member WHERE Age  =  19 OR Age  =  20",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  19 OR <unk>  =  20"
    },
    {
        "db_id": "journal_committee",
        "question": "显示24岁或25岁的编辑的名字。",
        "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  24 OR <unk>  =  25"
    },
    {
        "db_id": "company_office",
        "question": "按每个行业的公司数量的降序对所有行业进行排序",
        "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "soccer_2",
        "question": "选拔赛中有多少所不同的大学？",
        "query": "SELECT count(DISTINCT cName) FROM tryout",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM tryout"
    },
    {
        "db_id": "chinook_1",
        "question": "查找居住在“青岛”市的雇员的全名。",
        "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"青岛\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM EMPLOYEE WHERE <unk>  =  \"青岛\""
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "按照产品数量的降序返回所有商店的名称、位置和区域。",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "mask_query": "SELECT name ,  LOCATION ,  district FROM <mask> ORDER BY number_products DESC"
    },
    {
        "db_id": "e_commerce",
        "question": "有多少种不同的付款方式？",
        "query": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
        "mask_query": "SELECT count(DISTINCT Payment_method_code) FROM <mask>"
    },
    {
        "db_id": "perpetrator",
        "question": "那些国家不是“中国”的犯罪者的名字是什么？",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"中国\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> != \"中国\""
    },
    {
        "db_id": "activity_1",
        "question": "所有“男”性教职员工的教师ID是什么？",
        "query": "SELECT FacID FROM Faculty WHERE Sex  =  \"男\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"男\""
    },
    {
        "db_id": "book_press",
        "question": "销售量最高的图书的作者叫什么名字？",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "学生的个人信息是什么？这些学生在型为监控细节中只得到了最常见的结果？",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN ( SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> NOT IN ( SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1 )"
    },
    {
        "db_id": "university_rank",
        "question": "威斯康星州每一所大学的名字和排名是多少？",
        "query": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
        "mask_query": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "所有数学课程的描述是什么？",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  '数学'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '数学'"
    },
    {
        "db_id": "network_1",
        "question": "有3个或更多朋友的高中生的名字是什么？",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id GROUP BY T1.<unk> HAVING count(*)  >=  3"
    },
    {
        "db_id": "flight_2",
        "question": "返回抵达“哈尔滨”市的航班数量。",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"哈尔滨\"",
        "mask_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"哈尔滨\""
    },
    {
        "db_id": "world_1",
        "question": "1950年后所有独立的国家的名字是什么？",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  1950"
    },
    {
        "db_id": "architecture",
        "question": "建造两座桥或一座工厂的建筑师的 ID 、姓名和性别是什么？",
        "query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  =  2 UNION SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  =  1"
    },
    {
        "db_id": "department_store",
        "question": "订单数量最多的客户的姓名、电话号码和电子邮件地址是什么？",
        "query": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "question": "2002年度总共有多少教师？",
        "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "mask_query": "SELECT sum(<mask>) FROM <mask> WHERE YEAR  =  2002"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "列出学生的详细地址和个人信息。",
        "query": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "coffee_shop",
        "question": "查找每个会员的购买时间、年龄和地址，并按照购买时间的顺序显示结果。",
        "query": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "mask_query": "SELECT <unk> ,  age ,  address FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "book_1",
        "question": "订单总额最高的书的书名和购买价格是多少？",
        "query": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
        "mask_query": "SELECT T2.title ,  T2.<unk> FROM <mask> AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "每个父文档的子文档数是多少，父文档的ID是多少？",
        "query": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk>;"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "使用模板代码为“BK”的文档的名称是什么？",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "mask_query": "SELECT T2.document_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找出行为事件最多的学生的ID和姓氏？",
        "query": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "所有的拘留是什么时候开始的？",
        "query": "SELECT datetime_detention_start FROM Detention",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "film_rank",
        "question": "电影市场的高估计和低估计是什么？",
        "query": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "chinook_1",
        "question": "帮助过名为“小红”的客户的员工的名字和姓氏是什么？",
        "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"小红\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"小红\""
    },
    {
        "db_id": "driving_school",
        "question": "列出名字叫“诚”的客户的电子邮件的名字和生日。",
        "query": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"诚\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> = \"诚\""
    },
    {
        "db_id": "theme_gallery",
        "question": "展览的出席人数曾在100以下和500以上的主题有哪些？",
        "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "mask_query": "SELECT T2.theme FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "“国家艺术馆”的具体位置是什么？",
        "query": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"国家艺术馆\"",
        "mask_query": "SELECT <unk> FROM LOCATIONS WHERE <unk>  =  \"国家艺术馆\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "住址的邮政编码为“918”的老师的电子邮件地址是什么？",
        "query": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"918\""
    },
    {
        "db_id": "hr_1",
        "question": "与名字中包含汉字“洋”的雇员在同一部门工作的员工的id和全名是什么？",
        "query": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '洋' )",
        "mask_query": "SELECT employee_id ,  first_name ,  last_name FROM <mask> WHERE department_id IN ( SELECT department_id FROM <mask> WHERE first_name LIKE '洋' )"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "成绩数量最少的成绩单的日期和id是什么？",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "question": "给出与名为杰若米的客户对应的付款方式代码和客户编号。",
        "query": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"Jeromy\""
    },
    {
        "db_id": "sakila_1",
        "question": "统计活跃客户的数量。",
        "query": "SELECT count(*) FROM customer WHERE active = '1'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = '1'"
    },
    {
        "db_id": "dorm_1",
        "question": "没有“客厅”设施的宿舍的名字是什么？",
        "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  '客厅'",
        "mask_query": "SELECT <unk> FROM dorm EXCEPT SELECT T1.<unk> FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm_amenity AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '客厅'"
    },
    {
        "db_id": "baseball_1",
        "question": "找出团队专营权是激活状态的数量（将“Y”作为“激活”信息）。",
        "query": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = 'Y';"
    },
    {
        "db_id": "small_bank_1",
        "question": "支票余额高于储蓄余额的客户有哪些名字？",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "mask_query": "SELECT T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  >  T3.<unk>"
    },
    {
        "db_id": "music_4",
        "question": "与艺术家“张敬轩”相关的专辑的发行日期是什么？",
        "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"张敬轩\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"张敬轩\""
    },
    {
        "db_id": "scholar",
        "question": "谁写了2016的“青枯病”话题的论文？",
        "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"青枯病\" AND t4.year  =  2016;",
        "mask_query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN <mask> AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t1.paperid JOIN <mask> AS t3 ON t3.paperid  =  t4.paperid JOIN <mask> AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"青枯病\" AND t4.<unk>  =  2016;"
    },
    {
        "db_id": "e_learning",
        "question": "按课程计数的升序列出课程ID、课程名称和每个科目可用的课程数。",
        "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "bike_1",
        "question": "从来没有超过10辆可用自行车的车站的平均经度是多少？",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask> GROUP BY <unk> HAVING max(<unk>)  >  10)"
    },
    {
        "db_id": "epinions_1",
        "question": "查找具有最高平均评级的项目的名称和ID。",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY avg(T2.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "baseball_1",
        "question": "“上海”省有多少公园？",
        "query": "SELECT count(*) FROM park WHERE state  =  '上海';",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '上海';"
    },
    {
        "db_id": "customers_and_orders",
        "question": "价格高于所有产品平均价格的产品的名称是什么？",
        "query": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT avg(<unk>) FROM <mask>)"
    },
    {
        "db_id": "race_track",
        "question": "显示所有比赛的名字、类别和日期。",
        "query": "SELECT name ,  CLASS ,  date FROM race",
        "mask_query": "SELECT name ,  CLASS ,  date FROM <mask>"
    },
    {
        "db_id": "department_store",
        "question": "地址包含“巷”的客户名称和ID是什么？",
        "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"巷\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers WHERE <unk> LIKE \"巷\""
    },
    {
        "db_id": "csu_1",
        "question": "2001年“厦门大学”授予的学位是什么？",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"厦门大学\" AND t2.year  =  2001",
        "mask_query": "SELECT <mask> FROM campuses AS T1 JOIN <mask> AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"厦门大学\" AND t2.year  =  2001"
    },
    {
        "db_id": "entrepreneur",
        "question": "企业家的投资者有哪些？每个投资者投资的企业家人数是多少？",
        "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "列出所有评级为3.5的餐厅",
        "query": "SELECT name FROM business WHERE rating  =  3.5;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  3.5;"
    },
    {
        "db_id": "government_shift",
        "question": "统计可用客户和服务详细信息的总数。",
        "query": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
        "mask_query": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services"
    },
    {
        "db_id": "products_for_hire",
        "question": "顾客支付的最大总金额是多少？列出客户ID和数量。",
        "query": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  sum(<unk>) FROM <mask> GROUP BY <unk> ORDER BY sum(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "question": "按字母上升顺序的山脉名称是什么？",
        "query": "SELECT Name FROM mountain ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "company_employee",
        "question": "展示那些销售超过200的公司的员工的名字。",
        "query": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  >  200"
    },
    {
        "db_id": "car_1",
        "question": "“吉利”汽车的平均EDISL是多少？",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  '吉利';",
        "mask_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '吉利';"
    },
    {
        "db_id": "dorm_1",
        "question": "按字母顺序列出所有不同的宿舍设施。",
        "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "mask_query": "SELECT <unk> FROM dorm_amenity ORDER BY <unk>"
    },
    {
        "db_id": "geo",
        "question": "有城市“郑州”的省的省会是什么？",
        "query": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  \"郑州\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"郑州\";"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找出评估记录数量最多的3个老师的ID和名字。",
        "query": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "battle_death",
        "question": "损失过“帆船”船只的战斗的不同的id和名称是什么？",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  '帆船'",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '帆船'"
    },
    {
        "db_id": "restaurant_bills",
        "question": "哪些客户具有“英国”或“澳大利亚”国籍？告诉我他们的名字。",
        "query": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"England\" OR <unk>  =  \"Australia\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "地址在“黑龙江”省的戏剧工作组的电子邮件地址是什么？",
        "query": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"黑龙江\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"黑龙江\""
    },
    {
        "db_id": "academic",
        "question": "返回2000年以后“北京理工大学”的所有论文。",
        "query": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"北京理工大学\" AND t4.year  >  2000;",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t3.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"北京理工大学\" AND t4.<unk>  >  2000;"
    },
    {
        "db_id": "tracking_orders",
        "question": "拥有最多订单的客户的客户ID是什么？",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "电影“无间道”的体裁是什么？",
        "query": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"无间道\";",
        "mask_query": "SELECT t2.<mask> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"无间道\";"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "详细信息是“私有项目”的语句的细节是什么，相应的文档的名称是什么？",
        "query": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  \"私有项目\"",
        "mask_query": "SELECT T1.statement_details ,  T2.document_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  \"私有项目\""
    },
    {
        "db_id": "company_office",
        "question": "请按楼层升序列出“值班”状态的建筑物的名称。",
        "query": "SELECT name FROM buildings WHERE Status  =  \"值班\" ORDER BY Stories ASC",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"值班\" ORDER BY <unk> ASC"
    },
    {
        "db_id": "e_commerce",
        "question": "最不常见的订单状态是什么？",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“本杰明·马克希尔”的第一篇论文是什么时候写的？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"本杰明·马克希尔\" GROUP BY t3.year ORDER BY t3.year;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"本杰明·马克希尔\" GROUP BY t3.<unk> ORDER BY t3.<unk>;"
    },
    {
        "db_id": "scientist_1",
        "question": "找出项目持续时间最长的名称。",
        "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "mask_query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "每个产品有多少个不同的订单ID？",
        "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "mask_query": "SELECT <unk> ,  count(DISTINCT <unk>) FROM Order_items GROUP BY <unk>"
    },
    {
        "db_id": "flight_company",
        "question": "不在“冰岛”这个国家的机场名称是什么？",
        "query": "SELECT name FROM airport WHERE country != \"冰岛\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE country != \"冰岛\""
    },
    {
        "db_id": "music_1",
        "question": "“MP3”格式的所有文件的ID是什么？",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"mp3\""
    },
    {
        "db_id": "music_1",
        "question": "每个性别的艺术家数量是多少？",
        "query": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "geo",
        "question": "什么省有最短的河流",
        "query": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "boat_1",
        "question": "比其他评分大于7的水手年长的水手有哪些不同的名字？",
        "query": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  (SELECT min(<unk>) FROM <mask> WHERE <unk>  >  7);"
    },
    {
        "db_id": "device",
        "question": "有多少设备？",
        "query": "SELECT count(*) FROM device",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "club_1",
        "question": "找出主修“600”课程的会员最多的俱乐部。",
        "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "有多少省划界“贵州”和“湖南”边界",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"贵州\" ) AND state_name  =  \"湖南\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"贵州\" ) AND <unk>  =  \"湖南\";"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出排名为一级的所有发言人的平均分和平均年龄。",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "mask_query": "SELECT avg(points) ,  avg(age) FROM <mask> WHERE rank_position  =  1"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "月租金最高的地址的id和邮政编码是什么？",
        "query": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2",
        "question": "一共有多少所大学？",
        "query": "SELECT count(*) FROM College",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "train_station",
        "question": "以最大的列车数显示车站名称。",
        "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "film_rank",
        "question": "按城市数量递减排列的每个市场的国家有哪些？",
        "query": "SELECT Country FROM market ORDER BY Number_cities DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "conference",
        "question": "显示所有机构的名称、位置和成立年份。",
        "query": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
        "mask_query": "SELECT institution_name ,  LOCATION ,  founded FROM <mask>"
    },
    {
        "db_id": "chinook_1",
        "question": "计算摇滚类型的歌曲的数量。",
        "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"摇滚\"",
        "mask_query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"摇滚\""
    },
    {
        "db_id": "car_1",
        "question": "加速度最小的“吉利”车型有多少个汽缸？",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  '吉利' ORDER BY T1.accelerate ASC LIMIT 1;",
        "mask_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '吉利' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "db_id": "manufactory_1",
        "question": "所有公司的平均收益、最大收益和总收益是多少？",
        "query": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "mask_query": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"
    },
    {
        "db_id": "flight_2",
        "question": "给出“东方”机场所属的城市和国家。",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"东方\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM AIRPORTS WHERE <unk>  =  \"东方\""
    },
    {
        "db_id": "activity_1",
        "question": "显示不参与任何活动的学生的ID。",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "有多少参与者属于“组织者”类型？",
        "query": "SELECT count(*) FROM participants WHERE participant_type_code  =  '组织者'",
        "mask_query": "SELECT count(*) FROM participants WHERE participant_type_code  =  '组织者'"
    },
    {
        "db_id": "geo",
        "question": "在最高点的省有多少条河流。",
        "query": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "mask_query": "SELECT COUNT ( t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "allergy_1",
        "question": "最老的学生的学生ID是什么？",
        "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE age  =  (SELECT max(age) FROM <mask>)"
    },
    {
        "db_id": "hospital_1",
        "question": "找到护士正在接受治疗的名字。",
        "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
        "mask_query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示类型代码为“销售中”的平均交易量。",
        "query": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"销售中\"",
        "mask_query": "SELECT avg(<unk>) FROM TRANSACTIONS WHERE <unk>  =  \"销售中\""
    },
    {
        "db_id": "bakery_1",
        "question": "在面包店购物超过10次的顾客的姓氏是什么？",
        "query": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id GROUP BY T2.id HAVING count(*)  >  10"
    },
    {
        "db_id": "pilot_record",
        "question": "按等级升序排列飞行员的姓名。",
        "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "soccer_2",
        "question": "在选呗赛制有学生被“接受”学校所在的省份和招生情况如何？",
        "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  '确定'",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '确定'"
    },
    {
        "db_id": "school_finance",
        "question": "显示每个县学校数量和总入学人数。",
        "query": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",
        "mask_query": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county"
    },
    {
        "db_id": "party_host",
        "question": "显示聚会的主题和主持人的名字。",
        "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN HOST AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "gymnast",
        "question": "体操运动员的名字是什么？",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "academic",
        "question": "返回2000年后在“PVLDB”上的引用超过200篇的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" AND t2.<unk>  >  200 AND t2.<unk>  >  2000;"
    },
    {
        "db_id": "network_1",
        "question": "没有朋友的高中生的id是什么？",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "mask_query": "SELECT id FROM <mask> EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "最近创建的问题日志的ID是什么？",
        "query": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM problem_log ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "book_review",
        "question": "章节数最多的那本书的评分是多少？",
        "query": "SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "哪些省与“四川”省接壤",
        "query": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"四川\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> WHERE t4.<unk>  =  \"四川\";"
    },
    {
        "db_id": "store_1",
        "question": "找到同时在电影和音乐播放列表中的曲目名称。",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  '电影' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  '音乐'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '电影' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '音乐'"
    },
    {
        "db_id": "driving_school",
        "question": "有2到4名员工居住在那里的省的名字是什么？",
        "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> HAVING count(*) BETWEEN 2 AND 4;"
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”在2000年后发表的论文数。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"北京理工大学\" AND t4.year  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t3.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"北京理工大学\" AND t4.<unk>  >  2000;"
    },
    {
        "db_id": "geo",
        "question": "中国各省的人口密度是多少？",
        "query": "SELECT density FROM state;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "party_people",
        "question": "显示按标签排序的所有不同区域名称。",
        "query": "SELECT DISTINCT region_name FROM region ORDER BY Label",
        "mask_query": "SELECT DISTINCT region_name FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "department_store",
        "question": "百货商店数量最多的两家连锁店的ID是什么？",
        "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "mask_query": "SELECT <unk> FROM department_stores GROUP BY <unk> ORDER BY count(*) DESC LIMIT 2"
    },
    {
        "db_id": "phone_market",
        "question": "列出任何市场上都不销售的手机的名称。",
        "query": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE Phone_id NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "ship_mission",
        "question": "请展示最常见的船只类型。",
        "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE FROM <mask> GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "tv_shows",
        "question": "显示无线电的发射器及其相关频道的城市。",
        "query": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "address_1",
        "question": "给出学生最少的国家。",
        "query": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "ID中包含“app”的商品的所有id是什么？",
        "query": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "mask_query": "SELECT id FROM <mask> WHERE id LIKE \"%APP%\""
    },
    {
        "db_id": "news_report",
        "question": "记者平均工作年限是多少？",
        "query": "SELECT avg(Years_working) FROM journalist",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "network_2",
        "question": "名字叫“仲景”的“医生”年纪多大了？",
        "query": "SELECT age FROM Person WHERE job  =  '医生' AND name  =  '仲景'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '医生' AND <unk>  =  '仲景'"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "哪个客户的名字包含“少奇”？找出全名。",
        "query": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%少奇%\"",
        "mask_query": "SELECT <unk> FROM customers WHERE <unk> LIKE \"%少奇%\""
    },
    {
        "db_id": "entertainment_awards",
        "question": "对于每个提名，显示作品的名称和提名它的艺术节名称。",
        "query": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪位工程师去过的次数最多？显示工程师id、名字和姓氏。",
        "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "question": "找到拥有容量超过50的房间的建筑物。",
        "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  50"
    },
    {
        "db_id": "imdb",
        "question": "列出所有关于“核武器”的电影的导演",
        "query": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"核武器\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> WHERE t1.<mask>  =  \"核武器\";"
    },
    {
        "db_id": "book_2",
        "question": "列出那些写过不止一本书的作家。",
        "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "music_2",
        "question": "歌曲“冰雨”使用的声乐类型是什么？",
        "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"冰雨\"",
        "mask_query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"冰雨\""
    },
    {
        "db_id": "shop_membership",
        "question": "2016年在一个分支机构注册的会员名称和家乡名称是什么？",
        "query": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "mask_query": "SELECT T2.name ,  T2.hometown FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"
    },
    {
        "db_id": "e_government",
        "question": "有什么不同形式的表单？",
        "query": "SELECT DISTINCT form_type_code FROM forms",
        "mask_query": "SELECT DISTINCT <unk> FROM forms"
    },
    {
        "db_id": "insurance_fnol",
        "question": "有多少名为“李帅”的保险单被列出？",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"李帅\"",
        "mask_query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"李帅\""
    },
    {
        "db_id": "real_estate_rentals",
        "question": "进行第一次搜索的用户的年龄范围类别是什么？",
        "query": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> LIMIT 1;"
    },
    {
        "db_id": "video_game",
        "question": "数数游戏的数量。",
        "query": "SELECT count(*) FROM game",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“松本隆”发表了哪些学术期刊？",
        "query": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"松本隆\" GROUP BY t3.journalid;",
        "mask_query": "SELECT DISTINCT t3.journalid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"松本隆\" GROUP BY t3.journalid;"
    },
    {
        "db_id": "vehicle_rent",
        "question": "显示车辆名称，按总租车时间降序排列。",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
        "mask_query": "SELECT T2.<unk> FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY sum(T1.<unk>) DESC"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "名字叫“杨”和“栋”的学生的电子邮件是什么？",
        "query": "SELECT email_address FROM Students WHERE first_name  =  \"杨\" AND last_name  =  \"栋\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"杨\" AND <unk>  =  \"栋\""
    },
    {
        "db_id": "country_language",
        "question": "返回挪威以外所有国家的最高和最低健康分数。",
        "query": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask> WHERE <unk> != \"Norway\""
    },
    {
        "db_id": "body_builder",
        "question": "按身高升序，人的生日是什么？",
        "query": "SELECT Birth_Date FROM People ORDER BY Height ASC",
        "mask_query": "SELECT <unk> FROM People ORDER BY <unk> ASC"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "相关文档最少的文档对象id是多少？",
        "query": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;",
        "mask_query": "SELECT <unk> , count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "chinook_1",
        "question": "查找电子邮件“luisg@embraer.com.br”的客户的全名。",
        "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM CUSTOMER WHERE <unk>  =  \"luisg@embraer.com.br\""
    },
    {
        "db_id": "warehouse_1",
        "question": "选出超过150美元的所有箱子中包含的存储物。",
        "query": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
        "mask_query": "SELECT CONTENTS FROM boxes WHERE <unk>  >  150"
    },
    {
        "db_id": "pilot_record",
        "question": "显示有一个以上记录的飞行员的姓名。",
        "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "driving_school",
        "question": "对于每种支付方式，支付了多少？",
        "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>;"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示所有代理机构的ID和详细信息。",
        "query": "SELECT agency_id ,  agency_details FROM Agencies",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "student_assessment",
        "question": "按字母顺序列出课程名称？",
        "query": "SELECT course_name FROM courses ORDER BY course_name",
        "mask_query": "SELECT <unk> FROM courses ORDER BY <unk>"
    },
    {
        "db_id": "imdb",
        "question": "2007年电影“盲山”的预算是多少？",
        "query": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"盲山\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  2007 AND <unk>  =  \"盲山\";"
    },
    {
        "db_id": "e_learning",
        "question": "课程的作者或导师姓名是“琪琪”的地址是什么？",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"琪琪\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>\t =  \"琪琪\""
    },
    {
        "db_id": "imdb",
        "question": "找出1980后出生的“意大利”演员",
        "query": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"意大利\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  1980 AND <unk>  =  \"意大利\";"
    },
    {
        "db_id": "music_4",
        "question": "专辑中登顶最多周数的歌曲是什么？",
        "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "roller_coaster",
        "question": "列出那些语言不是“德语”的国家的名字。",
        "query": "SELECT Name FROM country WHERE Languages != \"德语\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"德语\""
    },
    {
        "db_id": "district_spokesman",
        "question": "找出拥有发言人的地区的总人口和平均人口。",
        "query": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)",
        "mask_query": "SELECT sum(population) ,  avg(population) FROM <mask> WHERE district_id IN (SELECT district_id FROM <mask>)"
    },
    {
        "db_id": "yelp",
        "question": "在“云南”找出所有低于2分的企业",
        "query": "SELECT name FROM business WHERE rating  <  2 AND state  =  \"云南\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  2 AND <unk>  =  \"云南\";"
    },
    {
        "db_id": "wta_1",
        "question": "找出每个手型的球员数。",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "mask_query": "SELECT count(*) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "book_1",
        "question": "显示没有订单的所有图书的书名。",
        "query": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
        "mask_query": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn"
    },
    {
        "db_id": "battle_death",
        "question": "有多少次战斗没有失去吨位为“225”的船只？",
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  '225' );"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出同时有一级和二级发言人的地区的名称。",
        "query": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2",
        "mask_query": "SELECT t3.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2"
    },
    {
        "db_id": "shop_membership",
        "question": "开店时间至少有两个的营业年有哪些？",
        "query": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2",
        "mask_query": "SELECT open_year FROM <mask> GROUP BY open_year HAVING count(*)  >=  2"
    },
    {
        "db_id": "movie_1",
        "question": "对于每个评论者ID，评级最低的电影的名称和评级是什么？",
        "query": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  T1.<unk> ,  min(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "journal_committee",
        "question": "编辑有哪些不同的年龄？每一个年龄段有多少编辑。",
        "query": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "storm_record",
        "question": "有多少风暴中有死亡记录？",
        "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >  0"
    },
    {
        "db_id": "art_1",
        "question": "雕塑数量最多的艺术家的名字是什么？",
        "query": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM artists AS T1 JOIN sculptures AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_company",
        "question": "按名称的字母顺序列出ID、国家、城市和机场的名称。",
        "query": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
        "mask_query": "SELECT <unk> ,  country ,  city ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "dog_kennels",
        "question": "所有狗的平均年龄是多少？",
        "query": "SELECT avg(age) FROM Dogs",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "farm",
        "question": "城市有多少种不同的地位？",
        "query": "SELECT count(DISTINCT Status) FROM city",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "soccer_2",
        "question": "找出一些大学生在“守门员”和“中场”位置踢球的学校所在的省名。",
        "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  '守门员' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  '中场'",
        "mask_query": "SELECT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '守门员' INTERSECT SELECT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '中场'"
    },
    {
        "db_id": "insurance_policies",
        "question": "找到索赔金额最大的清算金额。显示结算金额和索赔金额。",
        "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "question": "查找国籍为德国的司机的名字和姓氏？",
        "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"德国\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> = \"德国\""
    },
    {
        "db_id": "allergy_1",
        "question": "所有性别为“女”的女生全名和年龄是多少？",
        "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  '女'",
        "mask_query": "SELECT <unk> ,  Lname ,  <unk> FROM <mask> WHERE <unk>  =  '女'"
    },
    {
        "db_id": "school_bus",
        "question": "显示所有司机的姓名、家乡和年龄。",
        "query": "SELECT name ,  home_city ,  age FROM driver",
        "mask_query": "SELECT name ,  home_city ,  age FROM <mask>"
    },
    {
        "db_id": "journal_committee",
        "question": "显示参与至少两个期刊委员会的编辑的名字。",
        "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "small_bank_1",
        "question": "查找存款余额高于平均存款余额的账户数量。",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "mask_query": "SELECT count(*) FROM savings WHERE <unk>  >  (SELECT avg(<unk>) FROM savings)"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "版本号晚于5的模板的版本号和模板类型代码是什么？",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "mask_query": "SELECT version_number ,  template_type_code FROM <mask> WHERE version_number  >  5"
    },
    {
        "db_id": "movie_1",
        "question": "有3颗星和4颗星评价的电影叫什么名字？",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  3 INTERSECT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  4"
    },
    {
        "db_id": "orchestra",
        "question": "显示2003年前和2003年后成立的管弦乐队所共享的唱片公司。",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  2003 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  >  2003"
    },
    {
        "db_id": "museum_visit",
        "question": "查找在2009年之前开放的博物馆的平均工作人员数量。",
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "mask_query": "SELECT avg(num_of_staff) FROM <mask> WHERE open_year  <  2009"
    },
    {
        "db_id": "music_4",
        "question": "给出超过一周登顶的被收录在专辑的歌曲。",
        "query": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  1"
    },
    {
        "db_id": "world_1",
        "question": "人口比“非洲”任何一个国家都多的“亚洲”国家有哪些？",
        "query": "SELECT Name FROM country WHERE Continent  =  \"亚洲\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"非洲\")",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"亚洲\"  AND population  >  (SELECT min(population) FROM <mask> WHERE <unk>  =  \"非洲\")"
    },
    {
        "db_id": "hospital_1",
        "question": "找出所有花费超过1000英镑的手术但不是医师“文翰”执行的手术的名字？",
        "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\"",
        "mask_query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\""
    },
    {
        "db_id": "department_store",
        "question": "按照客户id的顺序返回订单状态为“延迟”的客户的不同名字。",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"延迟\" ORDER BY T2.customer_id",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"延迟\" ORDER BY T2.<unk>"
    },
    {
        "db_id": "college_2",
        "question": "给指导“历史”系的学生的老师的ID。",
        "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  '历史'",
        "mask_query": "SELECT i_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.s_id  =  T2.id WHERE T2.<unk>  =  '历史'"
    },
    {
        "db_id": "school_player",
        "question": "显示1890年前建立的学校和1900后建立的学校所共有的教派",
        "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  1890 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  >  1900"
    },
    {
        "db_id": "election",
        "question": "显示名字为“转塘”的县的邮政编码。",
        "query": "SELECT Zip_code FROM county WHERE County_name  =  \"转塘\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"转塘\""
    },
    {
        "db_id": "network_1",
        "question": "给出有最多喜欢数的学生的名字。",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.id GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "今年CVPR会议最流行的论文是什么？",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM <mask> AS t1 JOIN <mask> AS t3 ON t1.paperid  =  t3.citedpaperid JOIN <mask> AS t2 ON t2.venueid  =  t1.venueid WHERE t1.<unk>  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;"
    },
    {
        "db_id": "art_1",
        "question": "名字为帕布罗的艺术家创作的绘画的位置和材料类型是什么？",
        "query": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
        "mask_query": "SELECT T2.<unk> ,   T2.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"Pablo\""
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "不同文档类型的代码、名称和描述是什么？",
        "query": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "mask_query": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types"
    },
    {
        "db_id": "school_bus",
        "question": "有多少司机来自“苏州”或年龄是40岁以下？",
        "query": "SELECT count(*) FROM driver WHERE home_city  =  \"苏州\" OR age  <  40",
        "mask_query": "SELECT count(*) FROM <mask> WHERE home_city  =  \"苏州\" OR age  <  40"
    },
    {
        "db_id": "pets_1",
        "question": "有宠物的学生有哪些不同的名字和年龄？",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "mask_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "db_id": "restaurant_1",
        "question": "学生“李” “琳”住在哪个城市？",
        "query": "SELECT city_code FROM Student WHERE Fname = \"李\" AND Lname = \"琳\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"李\" AND Lname = \"琳\";"
    },
    {
        "db_id": "company_employee",
        "question": "按销售额和利润的降序列出销售量超过200的公司的名称。",
        "query": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "mask_query": "SELECT name FROM <mask> WHERE <unk>  >  200 ORDER BY <unk> ,  <unk> DESC"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示没有地址信息的客户的姓名和电话。",
        "query": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers WHERE <unk> NOT IN (SELECT <unk> FROM customer_address_history)"
    },
    {
        "db_id": "hospital_1",
        "question": "哪些医生隶“外科”科或属于“精神科”科？给出他们的名字。",
        "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  '外科' OR T3.name  =  '精神科'",
        "mask_query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.<unk>  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.<unk> WHERE T3.name  =  '外科' OR T3.name  =  '精神科'"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪一个故障日志包含了最多的故障部件？列出故障日志ID、描述和记录时间。",
        "query": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "driving_school",
        "question": "名字是“诚”和姓氏是“钟”的顾客住在哪个国家？",
        "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"诚\" AND T1.last_name = \"钟\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"诚\" AND T1.<unk> = \"钟\""
    },
    {
        "db_id": "loan_1",
        "question": "银行所在有多少不同的州？",
        "query": "SELECT count(DISTINCT state) FROM bank",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "workshop_paper",
        "question": "显示每个作者和他们提交的研习会数量。",
        "query": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "mask_query": "SELECT T2.<unk> ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "boat_1",
        "question": "所有级别高于名为路易斯的水手的水手叫什么名字？",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT max(<unk>) FROM <mask> WHERE <unk>  =  'Luis')"
    },
    {
        "db_id": "institution_sports",
        "question": "按能力降序排列的机构的昵称是什么？",
        "query": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
        "mask_query": "SELECT T1.<unk> FROM championship AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "twitter_1",
        "question": "查找有最多追随者的用户的名称。",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "查找所有正在接受治疗并住在111号房间的患者的姓名。",
        "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "mask_query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.<unk> JOIN stay AS T3 ON T1.<mask>  =  T3.<unk> WHERE T3.room  =  111"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示所有作者的姓名和其他详细信息。",
        "query": "SELECT author_name ,  other_details FROM Authors",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "department_management",
        "question": "有多少个代理状态？",
        "query": "SELECT count(DISTINCT temporary_acting) FROM management",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "farm",
        "question": "返回所有农场奶牛的最大和最小数量。",
        "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "party_people",
        "question": "计算在英国地区举行的年度会议的次数。",
        "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"英国\" AND t3.Event_Name  =  \"年会\"",
        "mask_query": "SELECT count(*) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.region_id  =  t2.region_id JOIN <mask> AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"英国\" AND t3.<unk>  =  \"年会\""
    },
    {
        "db_id": "car_racing",
        "question": "来自官方母语为“英语”的国家的司机的平均年龄是多少？",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "mask_query": "SELECT avg(T2.age) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.Country_ID  =  T2.<unk> WHERE T1.<unk>  =  \"English\""
    },
    {
        "db_id": "tracking_software_problems",
        "question": "在“1986-11-13”之后有哪些产品出现了问题？给我产品ID和“1986-11-13”后报告的问题数。",
        "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "mask_query": "SELECT count(*) ,  T2.<unk> FROM problems AS T1 JOIN product AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> > \"1986-11-13\" GROUP BY T2.<unk>"
    },
    {
        "db_id": "manufactory_1",
        "question": "“林安”创建了多少家公司？",
        "query": "SELECT count(*) FROM manufacturers WHERE founder  =  '林安'",
        "mask_query": "SELECT count(*) FROM manufacturers WHERE founder  =  '林安'"
    },
    {
        "db_id": "geo",
        "question": "与“四川”接壤省的湖泊是什么？",
        "query": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"四川\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" );"
    },
    {
        "db_id": "book_1",
        "question": "列出所有作者的名字。",
        "query": "SELECT name FROM Author",
        "mask_query": "SELECT name FROM <mask>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出邮政编码是255的城市。",
        "query": "SELECT city FROM addresses WHERE zip_postcode  =  255",
        "mask_query": "SELECT <unk> FROM addresses WHERE <unk>  =  255"
    },
    {
        "db_id": "club_1",
        "question": "告诉我俱乐部“北大创业俱乐部”的位置。",
        "query": "SELECT clublocation FROM club WHERE clubname  =  \"北大创业俱乐部\"",
        "mask_query": "SELECT clublocation FROM club WHERE clubname  =  \"北大创业俱乐部\""
    },
    {
        "db_id": "geo",
        "question": "“黑龙江”平均每平方公里人口是多少？",
        "query": "SELECT population / area FROM state WHERE state_name  =  \"黑龙江\";",
        "mask_query": "SELECT <unk> / <unk> FROM <mask> WHERE <unk>  =  \"黑龙江\";"
    },
    {
        "db_id": "flight_1",
        "question": "显示所有工资至少有100000的工资员工。",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "mask_query": "SELECT <unk> FROM Employee WHERE <unk>  >  100000"
    },
    {
        "db_id": "world_1",
        "question": "哪一种语言只由一个“共和制”政府的国家使用？",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"共和制\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"共和制\" GROUP BY T2.<unk> HAVING COUNT(*)  =  1"
    },
    {
        "db_id": "allergy_1",
        "question": "那个叫“莎莎”的女孩有什么过敏反应？它们的类型是什么？并以过敏反应的名称来分类结果。",
        "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"莎莎\" ORDER BY T1.Allergy",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  \"莎莎\" ORDER BY T1.<unk>"
    },
    {
        "db_id": "phone_market",
        "question": "显示不同的电话运营商和每家运营商的手机总数。",
        "query": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "body_builder",
        "question": "最小抓举分数是多少？",
        "query": "SELECT min(snatch) FROM body_builder",
        "mask_query": "SELECT min(snatch) FROM <mask>"
    },
    {
        "db_id": "farm",
        "question": "按年份排序的农场比赛的主题是什么？",
        "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY YEAR ASC"
    },
    {
        "db_id": "pilot_record",
        "question": "显示“小强”或“小利”队飞行员的名字。",
        "query": "SELECT Pilot_name FROM pilot WHERE Team  =  \"小强\" OR Team  =  \"小利\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"小强\" OR <unk>  =  \"小利\""
    },
    {
        "db_id": "entrepreneur",
        "question": "最重的企业家的名字是什么？",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "department_management",
        "question": "有多少部门由没有提到的负责人领导？",
        "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
        "mask_query": "SELECT count(*) FROM <mask> WHERE department_id NOT IN (SELECT department_id FROM <mask>);"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "属于名为最佳的集合的子集合的数目是多少？",
        "query": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"Best\";"
    },
    {
        "db_id": "conference",
        "question": "1850年至1900年间，有多少机构成立？",
        "query": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
        "mask_query": "SELECT count(*) FROM <mask> WHERE founded BETWEEN 1850 AND 1900"
    },
    {
        "db_id": "planet_1",
        "question": "名为图兰加·莱拉的雇员的工资和职位是什么？",
        "query": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
        "mask_query": "SELECT <unk> ,  POSITION FROM <mask> WHERE <unk>  =  \"Turanga Leela\";"
    },
    {
        "db_id": "network_2",
        "question": "按年龄顺序排列的每个“男”的名字和年龄的结果是多少？",
        "query": "SELECT name FROM Person WHERE gender  =  '男' ORDER BY age",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '男' ORDER BY <unk>"
    },
    {
        "db_id": "election_representative",
        "question": "“民主党”党代表的平均票数是多少？",
        "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"民主党\"",
        "mask_query": "SELECT avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"民主党\""
    },
    {
        "db_id": "music_2",
        "question": "专辑“十一月的肖邦”中的歌曲有哪些？",
        "query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"十一月的肖邦\"",
        "mask_query": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"十一月的肖邦\""
    },
    {
        "db_id": "flight_4",
        "question": "对于每个国家和航空公司的名字，有多少条路线？",
        "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ,  T1.<unk>"
    },
    {
        "db_id": "school_player",
        "question": "展示有超过1名球员的学校的位置。",
        "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "book_press",
        "question": "查找每月利润最高或最低的出版商的名称。",
        "query": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
        "mask_query": "SELECT name FROM <mask> WHERE <unk>  =  (SELECT min(<unk>) FROM <mask>) OR <unk>  =  (SELECT max(<unk>) FROM <mask>)"
    },
    {
        "db_id": "geo",
        "question": "哪个国家拥有最大的城市人口？",
        "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY SUM ( <unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "book_review",
        "question": "有哪些书的书名不是“诗人”，这些书的书名是什么？",
        "query": "SELECT Title FROM book WHERE TYPE != \"Poet\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE TYPE != \"Poet\""
    },
    {
        "db_id": "sakila_1",
        "question": "哪个商店的顾客最多？",
        "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "有多少学生参加了最常见的活动？列出编号、活动类型和说明。",
        "query": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  T2.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_review",
        "question": "“小说”类书籍的平均读者人数是多少？",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "mask_query": "SELECT avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"Novel\""
    },
    {
        "db_id": "wine_1",
        "question": "给出比2006年生产的所有葡萄酒都贵的葡萄酒的名称。",
        "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
        "mask_query": "SELECT <unk> FROM WINE WHERE <unk>  >  (SELECT max(<unk>) FROM WINE WHERE YEAR  =  2006)"
    },
    {
        "db_id": "architecture",
        "question": "以米为单位桥梁的最大长度是多少？建筑师的名字是什么？",
        "query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
        "mask_query": "SELECT max(T1.<unk>) ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "customers_and_orders",
        "question": "有多少客户没有订单？",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN  ( SELECT <unk> FROM Customer_orders)"
    },
    {
        "db_id": "academic",
        "question": "返回引用超过200个的“PVLDB”的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" AND t2.<unk>  >  200;"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "数一数顾客名叫“艺术”和姓“王”的卡数量。",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"艺术\" AND T2.customer_last_name  =  \"王\"",
        "mask_query": "SELECT count(*) FROM Customers_cards AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"艺术\" AND T2.<unk>  =  \"王\""
    },
    {
        "db_id": "customers_and_orders",
        "question": "最常见的订单状态代码是什么？",
        "query": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM Customer_orders GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "question": "对于来自“巴西”有发票的顾客，他们有什么不同的名字？",
        "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"巴西\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.country  =  \"巴西\""
    },
    {
        "db_id": "decoration_competition",
        "question": "显示在轮次中具有高于等级3的成员的姓名。",
        "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  3"
    },
    {
        "db_id": "loan_1",
        "question": "查找有贷款的客户的姓名和信用评分。",
        "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id"
    },
    {
        "db_id": "manufactory_1",
        "question": "每个制造商的平均产品价格是多少？",
        "query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "mask_query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.<unk>  =  T2.code GROUP BY T2.name"
    },
    {
        "db_id": "entertainment_awards",
        "question": "有多少艺术品？",
        "query": "SELECT count(*) FROM artwork",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回2000年后所有论文的数目。",
        "query": "SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE YEAR  >  2000;"
    },
    {
        "db_id": "sing_contest",
        "question": "英文翻译是“爱的所有街道”的歌曲名字字和原作者是什么？",
        "query": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  'All the streets of love'"
    },
    {
        "db_id": "soccer_2",
        "question": "有学生在“中场”位置而不是“守门员”位置打球的大学所在的省的数目是多少？",
        "query": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  '中场' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  '守门员')",
        "mask_query": "SELECT COUNT(*) FROM (SELECT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '中场' EXCEPT SELECT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '守门员')"
    },
    {
        "db_id": "riding_club",
        "question": "列出职业不是“研究员”的运动员的姓名和住所。",
        "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"研究员\"",
        "mask_query": "SELECT <unk> ,  residence FROM <mask> WHERE <unk> != \"研究员\""
    },
    {
        "db_id": "yelp",
        "question": "在“成都”有多少个社区拥有评分是5的企业？",
        "query": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"成都\" AND t2.rating  =  5;",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"成都\" AND t2.<unk>  =  5;"
    },
    {
        "db_id": "store_product",
        "question": "找到“上城区”所有商店的名称。",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"上城区\"",
        "mask_query": "SELECT t1.store_name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id JOIN <mask> AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"上城区\""
    },
    {
        "db_id": "film_rank",
        "question": "有最高市场估计的电影的标题是什么。",
        "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
        "mask_query": "SELECT t1.title FROM <mask> AS T1 JOIN <mask> AS T2  ON T1.<unk>  =  T2.<unk> ORDER BY high_estimate DESC LIMIT 1"
    },
    {
        "db_id": "school_bus",
        "question": "找出驾驶公共汽车的工作历史最悠久的司机的名字。",
        "query": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1"
    },
    {
        "db_id": "book_review",
        "question": "在评论中排名最高的那本书的书名是什么？",
        "query": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "“厦门”有多少个“目标”？",
        "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"厦门\" AND name  =  \"目标\";",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask> WHERE <unk>  =  \"厦门\" AND <unk>  =  \"目标\";"
    },
    {
        "db_id": "railway",
        "question": "有多少条铁路？",
        "query": "SELECT count(*) FROM railway",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "university_rank",
        "question": "按专业代码的顺序列出所有专业名称和专业代码",
        "query": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
        "mask_query": "SELECT major_name ,  major_code FROM Major ORDER BY major_code"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出居住在这个叫做“西安”的城市的顾客的数量。",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"西安\"",
        "mask_query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.<unk>  =  t2.<unk> JOIN addresses AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"西安\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "哪个模板类型代码对应的模板数量最多？",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT template_type_code FROM <mask> GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "question": "所有被“沈荣”评价过的电影的导演的名字是什么？",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  '沈荣'",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '沈荣'"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "列出所有流程状态的代码和说明。",
        "query": "SELECT process_status_code ,  process_status_description FROM Process_status",
        "mask_query": "SELECT <unk> ,  <unk> FROM Process_status"
    },
    {
        "db_id": "book_1",
        "question": "销售价格等于所有书籍最低销售价格的书籍的标题是什么？",
        "query": "SELECT title FROM book WHERE saleprice  =  (SELECT min(saleprice) FROM book)",
        "mask_query": "SELECT title FROM book WHERE saleprice  =  (SELECT min(saleprice) FROM book)"
    },
    {
        "db_id": "decoration_competition",
        "question": "显示大学的领导姓名和地点。",
        "query": "SELECT Leader_Name ,  College_Location FROM college",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "online_exams",
        "question": "科目代码不是“数据库”的考试的名称和日期是什么？",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> != 'Database'"
    },
    {
        "db_id": "movie_2",
        "question": "没有放映电影的电影院叫什么名字？",
        "query": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
        "mask_query": "SELECT DISTINCT name FROM <mask> WHERE <unk>  =  'null'"
    },
    {
        "db_id": "inn_1",
        "question": "什么样的装饰预订量最少？",
        "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(T2.<unk>) ASC LIMIT 1;"
    },
    {
        "db_id": "manufacturer",
        "question": "以最高的市场价格返回家具的名称和ID。",
        "query": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
        "mask_query": "SELECT name ,  furniture_id FROM <mask> ORDER BY market_rate DESC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "question": "保持天数超过50的摔跤运动员的淘汰次数是多少？",
        "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
        "mask_query": "SELECT T1.<unk> FROM elimination AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  50"
    },
    {
        "db_id": "apartment_rentals",
        "question": "以性别代码“男性”返回所有客人的出生日期。",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"男性\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"男性\""
    },
    {
        "db_id": "inn_1",
        "question": "预订次数超过60的房间名称是什么？",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  60"
    },
    {
        "db_id": "geo",
        "question": "最短的河流经过哪些省？",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "bakery_1",
        "question": "这家面包店最受欢迎的三种商品是什么？",
        "query": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
        "mask_query": "SELECT item FROM <mask> GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3"
    },
    {
        "db_id": "academic",
        "question": "返回与“李政道”合作的作者的数量。",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "hr_1",
        "question": "显示最低工资大于9000的职位名称。",
        "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "mask_query": "SELECT job_title FROM <mask> WHERE min_salary  >  9000"
    },
    {
        "db_id": "movie_1",
        "question": "评论者“苏铭”的ID是什么？",
        "query": "SELECT rID FROM Reviewer WHERE name  =  \"苏铭\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"苏铭\""
    },
    {
        "db_id": "bike_1",
        "question": "最短的路线开始的车站是的纬度、经度、城市是什么？",
        "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> LIMIT 1"
    },
    {
        "db_id": "network_2",
        "question": "“仲景”与哪位朋友有最长久的友谊？",
        "query": "SELECT friend FROM PersonFriend WHERE name =  '仲景' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  '仲景')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> =  '仲景' AND YEAR  =  (SELECT max(YEAR) FROM <mask> WHERE <unk> =  '仲景')"
    },
    {
        "db_id": "planet_1",
        "question": "王里奥寄出的所有包裹的号码是多少？",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
        "mask_query": "SELECT T1.<unk> FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Leo Wong\";"
    },
    {
        "db_id": "sakila_1",
        "question": "计算演员的不同姓氏的数量。",
        "query": "SELECT count(DISTINCT last_name) FROM actor",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "world_1",
        "question": "“加勒比”地区国家的总表面积是多少？",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"加勒比\"",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  \"加勒比\""
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "我们有多少结算单？",
        "query": "SELECT count(*) FROM Statements",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "headphone_store",
        "question": "按字母顺序列出所有不同的耳机型号。",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "mask_query": "SELECT DISTINCT model FROM <mask> ORDER BY model"
    },
    {
        "db_id": "phone_1",
        "question": "名为“LG-P760”的硬件模型的WiFi和屏幕模式类型？",
        "query": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
        "mask_query": "SELECT T1.<unk> , T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<mask> JOIN <mask> AS T3 ON T2.<mask> = T3.<unk> WHERE T2.<unk> = \"LG-P760\";"
    },
    {
        "db_id": "college_1",
        "question": "找到没有拿到“博士”学位的“旧”系教授的名字和办公室。",
        "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  '旧' AND T1.prof_high_degree != '博士'",
        "mask_query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  '旧' AND T1.prof_high_degree != '博士'"
    },
    {
        "db_id": "hospital_1",
        "question": "找出医师“文翰”执行手术的名称。",
        "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\"",
        "mask_query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"文翰\""
    },
    {
        "db_id": "yelp",
        "question": "列出在“东莞”所有“沃尔玛”的地址",
        "query": "SELECT full_address FROM business WHERE city  =  \"东莞\" AND name  =  \"沃尔玛\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"东莞\" AND <unk>  =  \"沃尔玛\";"
    },
    {
        "db_id": "entertainment_awards",
        "question": "按照每年的升序排列的艺术节主席的名字是什么？",
        "query": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY YEAR ASC"
    },
    {
        "db_id": "yelp",
        "question": "在“成都”找出评分超过3.5的“墨西哥”“餐厅”",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"成都\" AND t1.rating  >  3.5 AND t2.category_name  =  \"墨西哥\" AND t3.category_name  =  \"餐厅\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"成都\" AND t1.<unk>  >  3.5 AND t2.<unk>  =  \"墨西哥\" AND t3.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "customer_complaints",
        "question": "找出所有客户和员工的电话号码。",
        "query": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "mask_query": "SELECT <unk> FROM customers UNION SELECT <unk> FROM staff"
    },
    {
        "db_id": "loan_1",
        "question": "找到“上海市”的银行的客户数量。",
        "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  '上海'",
        "mask_query": "SELECT sum(<unk>) FROM <mask> WHERE <unk>  =  '上海'"
    },
    {
        "db_id": "club_leader",
        "question": "显示不同的民族以及每个民族的会员数量。",
        "query": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "表演者“李红”的电话号码是多少？",
        "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"李红\"",
        "mask_query": "SELECT <unk> FROM PERFORMERS WHERE <unk>  =  \"李红\""
    },
    {
        "db_id": "university_basketball",
        "question": "公立学校有哪些，他们的位置是什么？",
        "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  '公立'",
        "mask_query": "SELECT school ,  LOCATION FROM <mask> WHERE affiliation  =  '公立'"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "找出投资者总数。",
        "query": "SELECT count(*) FROM INVESTORS",
        "mask_query": "SELECT count(*) FROM INVESTORS"
    },
    {
        "db_id": "soccer_2",
        "question": "哪所大学有学生以“守门员”的身份让球队成功？",
        "query": "SELECT cName FROM  tryout WHERE decision  =  '确定' AND pPos  =  '守门员'",
        "mask_query": "SELECT <unk> FROM  tryout WHERE <unk>  =  '确定' AND <unk>  =  '守门员'"
    },
    {
        "db_id": "warehouse_1",
        "question": "所有仓库的总容量是多少？",
        "query": "SELECT sum(capacity) FROM warehouses",
        "mask_query": "SELECT sum(capacity) FROM warehouses"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "什么是在任何交易中不使用的批次的细节？",
        "query": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id",
        "mask_query": "SELECT <unk> FROM <mask> EXCEPT SELECT T1.<unk> FROM <mask> AS T1 JOIN transactions_lots AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "video_game",
        "question": "返回所有平台名称和相应的市场区域。",
        "query": "SELECT Platform_name ,  Market_district FROM platform",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "pets_1",
        "question": "有猫又有狗的学生名字是什么？",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '狗'",
        "mask_query": "SELECT T1.<unk> FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '猫' INTERSECT SELECT T1.<unk> FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '狗'"
    },
    {
        "db_id": "sports_competition",
        "question": "所有球员的总点数是多少？",
        "query": "SELECT sum(Points) FROM player",
        "mask_query": "SELECT sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "wine_1",
        "question": "“红”酒酿造的且价格在50以上葡萄酒的名称是什么？",
        "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"红\" AND T2.price  >  50",
        "mask_query": "SELECT T2.<unk> FROM Grapes AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"红\" AND T2.price  >  50"
    },
    {
        "db_id": "world_1",
        "question": "以“英语”和“法语”为官方语言的国家名称。",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"英语\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"法语\" AND T2.IsOfficial  =  \"T\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英语\" AND T2.<unk>  =  \"T\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"法语\" AND T2.<unk>  =  \"T\""
    },
    {
        "db_id": "aan_1",
        "question": "麦基翁凯萨琳的文件的地点和年份是什么？",
        "query": "SELECT DISTINCT T1.venue ,  T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\"",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk> LIKE \"%Mckeown ,  Kathleen%\""
    },
    {
        "db_id": "pilot_1",
        "question": "返回F-14战斗机所在机库的位置。",
        "query": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
        "mask_query": "SELECT LOCATION FROM hangar WHERE <unk>  =  'F-14 Fighter'"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出“步行”可以到达的商店的细节。",
        "query": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"步行\"",
        "mask_query": "SELECT T1.<unk> FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"步行\""
    },
    {
        "db_id": "imdb",
        "question": "2013电影的数量是多少？",
        "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
        "mask_query": "SELECT COUNT ( DISTINCT <unk>  ) FROM <mask> WHERE <unk>  =  2013;"
    },
    {
        "db_id": "allergy_1",
        "question": "每一种过敏类型有多少学生受影响？",
        "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "mask_query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "计算名为“月桂树”的产品的数量。",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"月桂树\"",
        "mask_query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"月桂树\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "给出不仅提供“照片”产品而且提供“电影”产品的服务类型的描述。",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  '照片' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  '电影'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '照片' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '电影'"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示金额小于10000的交易的最大份额数",
        "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000",
        "mask_query": "SELECT max(<unk>) FROM TRANSACTIONS WHERE <unk>  <  10000"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "客户主指数的详细信息不是与“高端”相关的租金拖欠税id是什么？",
        "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != '高端'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk> != '高端'"
    },
    {
        "db_id": "flight_company",
        "question": "哪些机场名称包含“国际”一词？",
        "query": "SELECT name FROM airport WHERE name LIKE \"%国际%\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"%国际%\""
    },
    {
        "db_id": "entrepreneur",
        "question": "最矮的人的体重是多少？",
        "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "question": "参加过至少2场比赛的所有驾驶员的ID、姓氏和比赛次数是多少？",
        "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.driverid ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.driverid = T2.driverid JOIN <mask> AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    {
        "db_id": "real_estate_properties",
        "question": "显示属于该代码的属性的属性类型说明。",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "college_3",
        "question": "查找“计算机科学”系成员的姓氏。",
        "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"计算机科学\"",
        "mask_query": "SELECT T2.<unk> FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.<unk>  =  T3.<unk> JOIN MEMBER_OF AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  \"计算机科学\""
    },
    {
        "db_id": "online_exams",
        "question": "对于每个学生的答案，找到学生的电子邮件地址和答案的日期。按日期降序排列。",
        "query": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC"
    },
    {
        "db_id": "soccer_1",
        "question": "列出所有身高在180厘米和190厘米之间的左脚球员的ID。",
        "query": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"左\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >=  180 AND <unk>  <=  190 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"左\""
    },
    {
        "db_id": "pets_1",
        "question": "找到每种宠物类型的平均体重。",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "mask_query": "SELECT avg(<unk>) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "db_id": "cinema",
        "question": "按时间表显示电影院名称、电影片名、日期和价格。",
        "query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
        "mask_query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.film_id  =  T2.film_id JOIN <mask> AS T3 ON T1.cinema_id  =  T3.cinema_id"
    },
    {
        "db_id": "concert_singer",
        "question": "显示所有不同国家和每个国家的歌手数量。",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "mask_query": "SELECT country ,  count(*) FROM <mask> GROUP BY country"
    },
    {
        "db_id": "scholar",
        "question": "有多少与“深度学习”相关的论文引用了ImageNet数据集？",
        "query": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"深度学习\";",
        "mask_query": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN <mask> AS t2 ON t3.datasetid  =  t2.datasetid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN <mask> AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"深度学习\";"
    },
    {
        "db_id": "scholar",
        "question": "“卢克·泽特莫耶尔”每年使用的关键词",
        "query": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"卢克·泽特莫耶尔\" ORDER BY t3.year  ,  t2.keyphraseid;",
        "mask_query": "SELECT DISTINCT t2.keyphraseid  ,  t3.<unk> FROM <mask> AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.paperid  =  t3.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"卢克·泽特莫耶尔\" ORDER BY t3.<unk>  ,  t2.keyphraseid;"
    },
    {
        "db_id": "products_for_hire",
        "question": "什么是“餐具”类型并且每日租金低于20产品的名称和描述？",
        "query": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  '餐具' AND daily_hire_cost  <  20",
        "mask_query": "SELECT <unk> ,  <unk> FROM products_for_hire WHERE <unk>  =  '餐具' AND <unk>  <  20"
    },
    {
        "db_id": "soccer_3",
        "question": "显示球员的姓名和所在俱乐部的名称。",
        "query": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "music_2",
        "question": "谁在“红日”这首歌的“后台”位置表演？显示其姓名和姓氏。",
        "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"红日\" AND T1.StagePosition  =  \"后台\"",
        "mask_query": "SELECT T2.firstname ,  T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> WHERE T3.<unk>  =  \"红日\" AND T1.<unk>  =  \"后台\""
    },
    {
        "db_id": "flight_1",
        "question": "至少有2个航班的所有飞机的名字是什么？",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "mask_query": "SELECT T2.<unk> FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >= 2"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "一个补助最多能得到多少文件？列出补助金ID和号码。",
        "query": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "拥有最多房产的用户的名字是什么？",
        "query": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "department_store",
        "question": "按产品类型分组并按字母顺序排序的产品的最高和最低价格是什么？",
        "query": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) ,  <unk> FROM products GROUP BY <unk> ORDER BY <unk>"
    },
    {
        "db_id": "college_3",
        "question": "找出教职人员最少的教职人员的职级。",
        "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM FACULTY GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "给出“茴香”产品的计量单位。",
        "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"茴香\"",
        "mask_query": "SELECT t2.<unk> FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"茴香\""
    },
    {
        "db_id": "candidate_poll",
        "question": "找出身高低于平均值的人的名字。",
        "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
        "mask_query": "SELECT name FROM <mask> WHERE height  <  (SELECT avg(height) FROM <mask>)"
    },
    {
        "db_id": "wedding",
        "question": "显示除了在第2015年举行婚礼的那些教堂外，其他所有教堂的名字。",
        "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT T1.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015"
    },
    {
        "db_id": "roller_coaster",
        "question": "过山车的平均速度是多少？",
        "query": "SELECT avg(Speed) FROM roller_coaster",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "flight_4",
        "question": "对于每个国家，该国机场的平均海拔是多少？",
        "query": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "scholar",
        "question": "2016 ACL论文的标题中包含“神经注意力”",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE \"%neural attention%\" AND t1.year  =  2016 AND t2.venuename  =  \"ACL\";",
        "mask_query": "SELECT DISTINCT t1.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.venueid  =  t1.venueid WHERE t1.<unk> LIKE \"%neural attention%\" AND t1.<unk>  =  2016 AND t2.venuename  =  \"ACL\";"
    },
    {
        "db_id": "imdb",
        "question": "1980年后，有多少“女”演员“广州”在出生？",
        "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"广州\" AND birth_year  >  1980 AND gender  =  \"女\";",
        "mask_query": "SELECT COUNT ( DISTINCT <unk>  ) FROM <mask> WHERE <unk>  =  \"广州\" AND <unk>  >  1980 AND <unk>  =  \"女\";"
    },
    {
        "db_id": "culture_company",
        "question": "哪些导演在1999年和2000年都有电影？",
        "query": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999",
        "mask_query": "SELECT director FROM <mask> WHERE YEAR  =  2000 INTERSECT SELECT director FROM <mask> WHERE YEAR  =  1999"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "三家最贵的酒店有什么细节？",
        "query": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM HOTELS ORDER BY <unk> DESC LIMIT 3"
    },
    {
        "db_id": "performance_attendance",
        "question": "有多少演出？",
        "query": "SELECT count(*) FROM performance",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "world_1",
        "question": "人口最少的国家的名称、独立年份和表面积是多少？",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "railway",
        "question": "列出没有火车的铁路的目标数。",
        "query": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "boat_1",
        "question": "谁预定了102号船？",
        "query": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  102"
    },
    {
        "db_id": "manufacturer",
        "question": "查找价格低于最高价格的家具名称。",
        "query": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  <  (SELECT max(<unk>) FROM <mask>)"
    },
    {
        "db_id": "hr_1",
        "question": "佣金百分比不为零的雇员的平均工资是多少？",
        "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"空\" GROUP BY department_id",
        "mask_query": "SELECT department_id ,  AVG(salary) FROM <mask> WHERE commission_pct != \"空\" GROUP BY department_id"
    },
    {
        "db_id": "bike_racing",
        "question": "至少有4名自行车手购买的比赛用车的ID和名称是什么？",
        "query": "SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  4"
    },
    {
        "db_id": "geo",
        "question": "最大省内中最长的河流是什么？",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "academic",
        "question": "返回在2000年后发表在“PVLDB”上的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" AND t2.<unk>  >  2000;"
    },
    {
        "db_id": "university_rank",
        "question": "列出入学率高于平均水平的所有大学的团队名称。",
        "query": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)",
        "mask_query": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)"
    },
    {
        "db_id": "flight_company",
        "question": "曾经经营过航班的公司的名称和类型是什么？",
        "query": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id",
        "mask_query": "SELECT T1.<unk> ,  T1.type FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "performance_attendance",
        "question": "显示演出的日期与以“小提琴”角色的出席成员。",
        "query": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"小提琴\"",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"小提琴\""
    },
    {
        "db_id": "academic",
        "question": "返回在“北京理工大学”“数据库”领域的所有研究人员。",
        "query": "SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"数据库\" AND t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN DOMAIN AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"数据库\" AND t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "workshop_paper",
        "question": "显示最常见的大学提交的作者。",
        "query": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回引用超过200个的作者是“李政道”的论文。",
        "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"李政道\" AND t3.citation_num  >  200;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\" AND t3.<unk>  >  200;"
    },
    {
        "db_id": "pilot_record",
        "question": "列出30岁以上飞行员的不同位置。",
        "query": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30",
        "mask_query": "SELECT DISTINCT POSITION FROM <mask> WHERE <unk>  >  30"
    },
    {
        "db_id": "game_1",
        "question": "有奖学金学生的所有“足球”比赛的总数是多少？",
        "query": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"足球\" AND onscholarship  =  \"Y\"",
        "mask_query": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"足球\" AND onscholarship  =  \"Y\""
    },
    {
        "db_id": "music_2",
        "question": "查找所有姓氏是“刘”的艺术家演唱的歌曲",
        "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"刘\"",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> WHERE T2.<unk>  =  \"刘\""
    },
    {
        "db_id": "vehicle_driver",
        "question": "返回由两名以上驾驶员驾驶或由JeffGordon驾驶的车辆的ID和型号。",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
        "mask_query": "SELECT T1.vehicle_id ,  T1.model FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN <mask> AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2"
    },
    {
        "db_id": "tracking_orders",
        "question": "哪个客户的订单最多？查找客户名字。",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "“2009-07-05”以后和“2009-07-05”之前雇佣的雇员的职位id和雇佣日期是什么？",
        "query": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "mask_query": "SELECT job_id ,  hire_date FROM <mask> WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "按文件ID排序，显示所有文档ID和每个文档中的段落数。",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "mask_query": "SELECT document_id ,  count(*) FROM <mask> GROUP BY document_id ORDER BY document_id"
    },
    {
        "db_id": "movie_1",
        "question": "每个导演有多少个电影评论？",
        "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "什么颜色从来没有被任何产品使用？",
        "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "mask_query": "SELECT count(*) FROM Ref_colors WHERE <unk> NOT IN ( SELECT <unk> FROM products )"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示具有帐户的所有客户的名字、姓氏和电话号码。",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "theme_gallery",
        "question": "2005年或以后有多少展览？",
        "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "mask_query": "SELECT count(*) FROM <mask> WHERE YEAR  >=  2005"
    },
    {
        "db_id": "bike_1",
        "question": "找出最大温度与最小温度之差最小的一天。并报告差异。",
        "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> - <unk> FROM <mask> ORDER BY <unk> - <unk> LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "question": "按身高顺序排列体操运动员的名字。",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC"
    },
    {
        "db_id": "tv_shows",
        "question": "最大功率的无线电发射机是什么？",
        "query": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "question": "最近的犯罪发生在哪一年？",
        "query": "SELECT max(YEAR) FROM perpetrator;",
        "mask_query": "SELECT max(YEAR) FROM <mask>;"
    },
    {
        "db_id": "gymnast",
        "question": "计算体操运动员的数量。",
        "query": "SELECT count(*) FROM gymnast",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "music_1",
        "question": "每种语言的歌曲的平均评分是多少？",
        "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "geo",
        "question": "最长的河流有多长？",
        "query": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "mask_query": "SELECT LENGTH FROM <mask> WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM <mask> );"
    },
    {
        "db_id": "csu_1",
        "question": "1996年度大学的平均CSU费用是多少？",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "mask_query": "SELECT avg(campusfee) FROM <mask> WHERE YEAR  =  1996"
    },
    {
        "db_id": "yelp",
        "question": "在“厦门”中找出所有“苹果店”",
        "query": "SELECT business_id FROM business WHERE city  =  \"厦门\" AND name  =  \"苹果店\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"厦门\" AND <unk>  =  \"苹果店\";"
    },
    {
        "db_id": "advertising_agencies",
        "question": "所有付款的不同发票ID和状态是什么？",
        "query": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "academic",
        "question": "把“VLDB”会议的领域返回。",
        "query": "SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN DOMAIN AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "station_weather",
        "question": "请告诉我“湖州”的最高低温和平均降水量。",
        "query": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"湖州\"",
        "mask_query": "SELECT max(t1.<unk>) ,  avg(t1.<unk>) FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"湖州\""
    },
    {
        "db_id": "dog_kennels",
        "question": "找出专业人士或主人使用的名字，但不用作狗名的名字。",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "mask_query": "SELECT <unk> FROM <mask> UNION SELECT <unk> FROM <mask> EXCEPT SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "conference",
        "question": "显示所有会议名称和每个会议的次数。",
        "query": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
        "mask_query": "SELECT conference_name ,  count(*) FROM <mask> GROUP BY conference_name"
    },
    {
        "db_id": "music_1",
        "question": "分辨率低于800的所有歌曲的文件大小和格式是什么？",
        "query": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  800"
    },
    {
        "db_id": "formula_1",
        "question": "找到参加比赛最多的司机的ID和姓氏？",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.driverid ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.driverid = T2.driverid JOIN <mask> AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示价格高于1000或低于500的产品类型和名称。",
        "query": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500",
        "mask_query": "SELECT <unk> ,  <unk> FROM products WHERE <unk>  >  1000 OR <unk>  <  500"
    },
    {
        "db_id": "driving_school",
        "question": "所有余额超过2000的客户的电话号码和电子邮件地址是什么？",
        "query": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  2000;"
    },
    {
        "db_id": "college_1",
        "question": "负责“ACT211”的教授的名字和出生日期是什么？",
        "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"美术\"",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM employee AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"美术\""
    },
    {
        "db_id": "manufactory_1",
        "question": "收益最高的公司的名称、总部和创始人是什么？",
        "query": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
        "mask_query": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "有多少病人住在112房间？",
        "query": "SELECT count(patient) FROM stay WHERE room  =  112",
        "mask_query": "SELECT count(patient) FROM stay WHERE room  =  112"
    },
    {
        "db_id": "country_language",
        "question": "不同官方语言的名称是什么，以及说每种语言的国家的数目是多少？",
        "query": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "返回名字是“许”，姓氏是“海超”的客户的电话和电子邮件，。",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"许\" AND customer_last_name  =  \"海超\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"许\" AND <unk>  =  \"海超\""
    },
    {
        "db_id": "driving_school",
        "question": "名字叫“瑞”的客户上了多少课？",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"瑞\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  = T2.<unk> WHERE T2.<unk> = \"瑞\""
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”有论文的作者名字。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "在名为最佳的集合中，文档对象id的数目是多少？",
        "query": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"Best\";"
    },
    {
        "db_id": "warehouse_1",
        "question": "每个仓库中存储了多少个箱子？",
        "query": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
        "mask_query": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "journal_committee",
        "question": "按照主题的字母顺序递增排序，显示编辑的姓名和年龄以及他们作为委员会服务的期刊的主题。",
        "query": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",
        "mask_query": "SELECT T2.<unk> ,  T2.age ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk> ASC"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "显示所有支付方法代码和每个代码的订单数量。",
        "query": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM INVOICES GROUP BY <unk>"
    },
    {
        "db_id": "protein_institute",
        "question": "最高的建筑物叫什么名字？",
        "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "mask_query": "SELECT name FROM <mask> ORDER BY height_feet DESC LIMIT 1"
    },
    {
        "db_id": "district_spokesman",
        "question": "查找其政府链接使用“gov”域的地区的名称。",
        "query": "SELECT name FROM district WHERE Government_website LIKE \"%gov%\"",
        "mask_query": "SELECT name FROM <mask> WHERE <unk> LIKE \"%gov%\""
    },
    {
        "db_id": "world_1",
        "question": "“非洲”有多少种不同形式的政府？",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"非洲\"",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> WHERE <unk>  =  \"非洲\""
    },
    {
        "db_id": "protein_institute",
        "question": "在至少20层楼的建筑中，有多少机构与蛋白质相关联？",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "mask_query": "SELECT count(*) FROM institution AS T1 JOIN <mask> AS T2 ON T1.institution_id  =  T2.institution_id JOIN <mask> AS T3 ON T3.<unk>  =  T1.<unk> WHERE T3.floors  >=  20"
    },
    {
        "db_id": "film_rank",
        "question": "什么是市场相关的国家及其相应的市场估计年？",
        "query": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "vehicle_driver",
        "question": "属于“美国”公民的司机叫什么名字？",
        "query": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "mask_query": "SELECT name FROM <mask> WHERE citizenship  =  'United States'"
    },
    {
        "db_id": "activity_1",
        "question": "哪一个教职员工人数最少？",
        "query": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT rank FROM <mask> GROUP BY rank ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "question": "2010年后参加比赛数量最多的车手的ID和姓氏是什么？",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.driverid ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.driverid  =  T2.driverid JOIN <mask> AS T3 ON T2.raceid = T3.raceid WHERE T3.<unk> > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_1",
        "question": "“烤鸭”类型餐厅有多少家？",
        "query": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = '烤鸭'",
        "mask_query": "SELECT count(*) FROM <mask> JOIN <mask> ON <mask>.<unk> =  <mask>.<unk> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> GROUP BY <mask>.<unk> HAVING <mask>.<unk> = '烤鸭'"
    },
    {
        "db_id": "bakery_1",
        "question": "给出每种食物有多少顾客买过。",
        "query": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
        "mask_query": "SELECT T1.food ,  count(DISTINCT T3.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.food"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "谁是学校最早毕业的学生？列出名字、中间名和姓氏。",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "提供某一服务的最大数目是多少？列出服务ID、详细信息和号码。",
        "query": "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "question": "请显示参加比赛次数最多的司机的年龄。",
        "query": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "找到在最近开始日期的预约的ID？",
        "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
        "mask_query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "价格比任何牛角面包都低的饼干的ID是什么？",
        "query": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "mask_query": "SELECT id FROM <mask> WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM <mask> WHERE food  =  'Croissant')"
    },
    {
        "db_id": "game_1",
        "question": "有多少视频游戏存在？",
        "query": "SELECT count(*) FROM Video_games",
        "mask_query": "SELECT count(*) FROM Video_games"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "查找目前居住在“湖北”，但没有注册任何学位课程的学生的姓氏。",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  '湖北' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '湖北' EXCEPT SELECT DISTINCT T3.<unk> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk>"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "与每个文档id相关的文档的不同子集是什么，以及文档子集的名称和实际文档的id是什么？",
        "query": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID",
        "mask_query": "SELECT DISTINCT T3.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask>  AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T2.<unk> =  T3.<unk>"
    },
    {
        "db_id": "scholar",
        "question": "2013的会议",
        "query": "SELECT DISTINCT venueid FROM paper WHERE YEAR  =  2013;",
        "mask_query": "SELECT DISTINCT venueid FROM <mask> WHERE YEAR  =  2013;"
    },
    {
        "db_id": "bike_1",
        "question": "查找至少有200个路线开始的站的ID和名称。",
        "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  200"
    },
    {
        "db_id": "twitter_1",
        "question": "查找每个用户的追随者数量。",
        "query": "SELECT count(*) FROM follows GROUP BY f1",
        "mask_query": "SELECT count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "station_weather",
        "question": "按照时间排序，给我前往“宿迁”的所有列车的时间和数量。",
        "query": "SELECT TIME ,  train_number FROM train WHERE destination  =  '宿迁' ORDER BY TIME",
        "mask_query": "SELECT TIME ,  <unk> FROM <mask> WHERE <unk>  =  '宿迁' ORDER BY TIME"
    },
    {
        "db_id": "film_rank",
        "question": "哪家电影公司的平均票房总收益超过450万？",
        "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  >=  4500000"
    },
    {
        "db_id": "protein_institute",
        "question": "对于每个建筑，显示建筑物的名称和其中的机构数量。",
        "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id",
        "mask_query": "SELECT T1.name ,  count(*) FROM <mask> AS T1 JOIN institution AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "station_weather",
        "question": "查找每个站点的火车数量，以及站点网络名称和服务。",
        "query": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
        "mask_query": "SELECT count(*) ,  t1.<unk> ,  t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk>"
    },
    {
        "db_id": "car_racing",
        "question": "列出与大多数司机所在的品牌。",
        "query": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "在名为“2000最佳”的子集中或在名为“最佳”的集合中有哪些不同的文档ID？",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk> WHERE T2.<unk> = \"Best for 2000\" OR T4.<unk> = \"Best\";"
    },
    {
        "db_id": "twitter_1",
        "question": "找出每个用户的名字和推特的数量。",
        "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "document_management",
        "question": "有多少用户曾登录过？",
        "query": "SELECT count(*) FROM users WHERE user_login  =  1",
        "mask_query": "SELECT count(*) FROM users WHERE <unk>  =  1"
    },
    {
        "db_id": "bakery_1",
        "question": "哪件东西购买的次数最少？",
        "query": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT item FROM <mask> GROUP BY item ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "question": "找出曾经治疗过狗的专业人员的数量。",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "debate",
        "question": "每次辩论的日期和场馆是什么？",
        "query": "SELECT Date ,  Venue FROM debate",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "online_exams",
        "question": "请显示至少有两个答案记录的学生的名字。",
        "query": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "college_2",
        "question": "没有教书的教师有哪些ID？",
        "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "mask_query": "SELECT id FROM <mask> EXCEPT SELECT id FROM <mask>"
    },
    {
        "db_id": "book_2",
        "question": "按出版物价格的顺序显示书名。",
        "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "对于所有帐户的结算单ID、结算单详细信息、帐户详细信息是什么？",
        "query": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "mask_query": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.statement_id  =  T2.statement_id"
    },
    {
        "db_id": "chinook_1",
        "question": "为10个或更多客户服务的员工的名字和支持代表ID的是什么？",
        "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  10"
    },
    {
        "db_id": "video_game",
        "question": "请出示玩过“超级马里奥世界”游戏的玩家的姓名和等级。",
        "query": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
        "mask_query": "SELECT T3.<unk> ,  T3.rank_of_the_year FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  \"Super Mario World\""
    },
    {
        "db_id": "art_1",
        "question": "最近一年创作的这座雕塑的名称是什么？",
        "query": "SELECT title ,  YEAR FROM sculptures ORDER BY YEAR DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  YEAR FROM sculptures ORDER BY YEAR DESC LIMIT 1"
    },
    {
        "db_id": "workshop_paper",
        "question": "列出没有提交到任何研习会的作者。",
        "query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM acceptance)"
    },
    {
        "db_id": "bakery_1",
        "question": "找到所有是巧克力味道但购买次数不超过10次的商品。",
        "query": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
        "mask_query": "SELECT DISTINCT T1.item FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10"
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”在“数据库”领域中的论文数。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"数据库\" AND t5.name  =  \"北京理工大学\";",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t6 JOIN <mask> AS t1 ON t6.<unk>  =  t1.<unk> JOIN DOMAIN AS t3 ON t3.<unk>  =  t6.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> WHERE t3.<unk>  =  \"数据库\" AND t5.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "wedding",
        "question": "显示所有人的最小、最大和平均年龄。",
        "query": "SELECT min(age) ,  max(age) ,  avg(age) FROM people",
        "mask_query": "SELECT min(age) ,  max(age) ,  avg(age) FROM <mask>"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "查找姓氏为“齐”的老师的评语记录的内容。",
        "query": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"齐\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"齐\""
    },
    {
        "db_id": "yelp",
        "question": "列出“王岩”评级5的所有业务",
        "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"王岩\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  5 AND t3.<unk>  =  \"王岩\";"
    },
    {
        "db_id": "flight_2",
        "question": "给出从“长沙”起飞的航班的航班号。",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"长沙\"",
        "mask_query": "SELECT <unk> FROM FLIGHTS WHERE <unk>  =  \"长沙\""
    },
    {
        "db_id": "academic",
        "question": "返回在2000年后发表的引用最多的论文。",
        "query": "SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR  >  2000 ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "chinook_1",
        "question": "请显示为不超过20名顾客服务的雇员的姓氏。",
        "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "mask_query": "SELECT T1.<unk> FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  <=  20"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”发表的论文中超过10篇都包含的关键词。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"李政道\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"李政道\" GROUP BY t1.<mask> HAVING COUNT ( DISTINCT t3.<unk> )  >  10;"
    },
    {
        "db_id": "college_2",
        "question": "总学分最多的学生的指导老师叫什么名字？",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.i_id  =  T2.id JOIN <mask> AS T3 ON T1.s_id  =  T3.id ORDER BY T3.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示具有预订状态码“临时”的公寓的平均房间数。",
        "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"临时\"",
        "mask_query": "SELECT avg(<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"临时\""
    },
    {
        "db_id": "imdb",
        "question": "2000年后，“厦门”有多少演员出生？",
        "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"厦门\" AND birth_year  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT <unk>  ) FROM <mask> WHERE <unk>  =  \"厦门\" AND <unk>  >  2000;"
    },
    {
        "db_id": "document_management",
        "question": "查找具有超过4个文档的文档类型。",
        "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
        "mask_query": "SELECT <unk> FROM documents GROUP BY <unk> HAVING count(*)  >  4"
    },
    {
        "db_id": "theme_gallery",
        "question": "显示票价低于15的所有展览的主题和年份。",
        "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15",
        "mask_query": "SELECT theme ,  YEAR FROM <mask> WHERE ticket_price  <  15"
    },
    {
        "db_id": "tvshow",
        "question": "哪些国家的电视频道没有播放“白英”写的漫画？",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  '白英'",
        "mask_query": "SELECT country FROM <mask> EXCEPT SELECT T1.country FROM <mask> AS T1 JOIN cartoon AS T2 ON T1.<unk> = T2.<unk> WHERE T2.written_by  =  '白英'"
    },
    {
        "db_id": "aircraft",
        "question": "找出在“澳大利亚”举行的比赛中没有获胜的飞行员的名字。",
        "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  '澳大利亚')",
        "mask_query": "SELECT name FROM <mask> WHERE pilot_id NOT IN (SELECT <unk>  FROM MATCH WHERE country  =  '澳大利亚')"
    },
    {
        "db_id": "flight_4",
        "question": "从“中国”到“加拿大”有多少条路线？",
        "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  \"加拿大\") AND src_apid IN (SELECT apid FROM airports WHERE country  =  \"中国\")",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> IN (SELECT <unk> FROM <mask> WHERE <unk>  =  \"加拿大\") AND <unk> IN (SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国\")"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "参与者最多的活动ID是什么？",
        "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "question": "请出示学生的名字和答案的日期。",
        "query": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "store_1",
        "question": "找到向“袁” “熙”汇报的员工的全名？",
        "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"袁\" AND T1.last_name = \"熙\";",
        "mask_query": "SELECT T2.<unk> , T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"袁\" AND T1.<unk> = \"熙\";"
    },
    {
        "db_id": "music_1",
        "question": "所有来自“英国”且用“英文”发行歌曲的歌手的名字是什么？",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"英国\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"英文\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"英国\" INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"英文\""
    },
    {
        "db_id": "chinook_1",
        "question": "帮助住在邮政编码为“70174”的客户的员工住在哪个城市？",
        "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "mask_query": "SELECT T2.<unk> FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"70174\""
    },
    {
        "db_id": "music_1",
        "question": "制作最短歌曲的艺术家叫什么名字？",
        "query": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> LIMIT 1"
    },
    {
        "db_id": "conference",
        "question": "列出所有不同的会议名称。",
        "query": "SELECT DISTINCT conference_name FROM conference",
        "mask_query": "SELECT DISTINCT conference_name FROM <mask>"
    },
    {
        "db_id": "manufactory_1",
        "question": "找到以字母“少”开头的公司的创始人的名字。",
        "query": "SELECT founder FROM manufacturers WHERE name LIKE '少'",
        "mask_query": "SELECT founder FROM manufacturers WHERE name LIKE '少'"
    },
    {
        "db_id": "aan_1",
        "question": "有50篇以上论文的作者的名字是什么？",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  50"
    },
    {
        "db_id": "dorm_1",
        "question": "年龄在25岁以下的女生有多少？（性别是“女性”）",
        "query": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "mask_query": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "文档类型“论文”的描述是什么？",
        "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"论文\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"论文\";"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议上“李政道”的论文数。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"VLDB\";",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "apartment_rentals",
        "question": "公寓号码为“634”的公寓的预订状态码是多少？",
        "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"634\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"634\""
    },
    {
        "db_id": "news_report",
        "question": "显示有最多记者的国家。",
        "query": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "video_game",
        "question": "按销量降序排列的所有游戏的名称和开发者是什么？",
        "query": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "bike_racing",
        "question": "拥有最多自行车的骑车人的ID和名字是什么？",
        "query": "SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "question": "每辆车的名称和总租赁时间是多少？",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "mask_query": "SELECT T2.<unk> ,  sum(T1.<unk>) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "college_3",
        "question": "找出一门课程的分数至少是3.8的所有学生的不同名字。",
        "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "mask_query": "SELECT DISTINCT T3.<unk> FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.<unk>  =  T2.<unk> AND T1.<unk>  =  T3.<unk> WHERE T2.<unk>  >=  3.8"
    },
    {
        "db_id": "gymnast",
        "question": "家乡不是“洛阳”的体操运动员的名字是什么？",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"洛阳\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> != \"洛阳\""
    },
    {
        "db_id": "perpetrator",
        "question": "按死亡人数的降序列出犯罪者的日期。",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "college_1",
        "question": "所有上“美术”课的学生的名字是什么？",
        "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  '美术'",
        "mask_query": "SELECT T3.stu_fname FROM <mask> AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  '美术'"
    },
    {
        "db_id": "e_commerce",
        "question": "所有订单的状态代码和日期是什么？",
        "query": "SELECT order_status_code ,  date_order_placed FROM Orders",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "college_2",
        "question": "教过一门课的“艺术”系讲师的姓名，以及相应的课程编号？",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  '艺术'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '艺术'"
    },
    {
        "db_id": "vehicle_rent",
        "question": "显示至少有两个租赁历史记录的客户名称。",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.<unk> FROM renting_history AS T1 JOIN customers AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "news_report",
        "question": "记者的国籍和年龄是多少？",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回那些在“VLDB”会议上发表过论文的作者的名字。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "book_1",
        "question": "显示与订单数量最多的图书对应的书名。",
        "query": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.title FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "program_share",
        "question": "哪些节目的起源不是“北京”？给出节目的名称。",
        "query": "SELECT name FROM program WHERE origin != '北京'",
        "mask_query": "SELECT name FROM <mask> WHERE origin != '北京'"
    },
    {
        "db_id": "university_rank",
        "question": "专业排名第一数量最多的大学叫什么名字？",
        "query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_company",
        "question": "有多少机场没有飞行员“杨雄”驾驶的飞机？",
        "query": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  \"杨雄\" );",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> WHERE pilot  =  \"杨雄\" );"
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”在“PVLDB”的论文数。",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT COUNT ( DISTINCT t5.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t3 ON t5.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\" AND t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "climbing",
        "question": "那儿有多少登山者？",
        "query": "SELECT count(*) FROM climber",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "warehouse_1",
        "question": "存放石头和剪刀的箱子在仓库的什么位置？",
        "query": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "mask_query": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'"
    },
    {
        "db_id": "scholar",
        "question": "研究ImageNet的顶级作者",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t4 ON t4.paperid  =  t2.paperid JOIN <mask> AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "db_id": "university_rank",
        "question": "显示所有家庭会议和每个会议中的大学数量。",
        "query": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
        "mask_query": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference"
    },
    {
        "db_id": "formula_1",
        "question": "找出所有单圈时间高于100000毫秒的司机的ID和国籍？",
        "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "mask_query": "SELECT DISTINCT T1.driverid ,  T1.<unk> FROM <mask> AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.<unk> >  100000"
    },
    {
        "db_id": "imdb",
        "question": "找出“杨幂”出演电影的所有电影制片人",
        "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"杨幂\";",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t3.<unk> JOIN <mask> AS t4 ON t5.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"杨幂\";"
    },
    {
        "db_id": "dorm_1",
        "question": "找出每个性别中年龄大于平均年龄的学生人数。",
        "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "mask_query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示至少有两个文档的作者的姓名。",
        "query": "SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "tracking_orders",
        "question": "按放置日期排序的不同订单的ID是什么？",
        "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "mask_query": "SELECT DISTINCT <unk> FROM orders ORDER BY <unk>"
    },
    {
        "db_id": "flight_4",
        "question": "“格陵兰岛”有多少城市的机场？",
        "query": "SELECT count(DISTINCT city) FROM airports WHERE country  =  \"格陵兰岛\"",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask> WHERE <unk>  =  \"格陵兰岛\""
    },
    {
        "db_id": "flight_1",
        "question": "显示最少人拥有的飞机证书名字。",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "twitter_1",
        "question": "按日期顺序列出所有推文的文本。",
        "query": "SELECT text FROM tweets ORDER BY createdate",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "music_1",
        "question": "那些用“英文”创作了一首歌但从未获得过8级以上评分的不同艺术家的名字是什么？",
        "query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"英文\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  =  \"英文\" EXCEPT SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  8"
    },
    {
        "db_id": "station_weather",
        "question": "有多少列火车名字中有“列车”？",
        "query": "SELECT count(*) FROM train WHERE name LIKE \"列车\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> LIKE \"列车\""
    },
    {
        "db_id": "tracking_software_problems",
        "question": "列出1995年以后报告的产品“显示器”中问题的ID？",
        "query": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"显示器\" AND T1.date_problem_reported > \"1995\"",
        "mask_query": "SELECT T1.<unk> FROM problems AS T1 JOIN product AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"显示器\" AND T1.<unk> > \"1995\""
    },
    {
        "db_id": "boat_1",
        "question": "找出评分高于所有预订红船的水手的评分的水手的姓名。",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  (SELECT max(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T3.<unk>  =  'red')"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示所有带有“PUR”的交易码的交易ID 。",
        "query": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\"",
        "mask_query": "SELECT <unk> FROM TRANSACTIONS WHERE <unk>  =  \"PUR\""
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "有最多数量文件的文档类型代码是什么？",
        "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT document_type_code FROM <mask> GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "查找最近一次预约的病人的名字。",
        "query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "mask_query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"
    },
    {
        "db_id": "entertainment_awards",
        "question": "按提名年度的升序显示艺术品名称。",
        "query": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk>"
    },
    {
        "db_id": "flight_2",
        "question": "有多少“南方航空”航班从“浦东”机场起飞？",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"南方航空\" AND T2.SourceAirport  =  \"浦东\"",
        "mask_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.<unk>  =  T1.<unk> WHERE T1.<unk>  =  \"南方航空\" AND T2.<unk>  =  \"浦东\""
    },
    {
        "db_id": "imdb",
        "question": "找出2015制作的所有电影",
        "query": "SELECT title FROM movie WHERE release_year  =  2015;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  2015;"
    },
    {
        "db_id": "storm_record",
        "question": "显示在记录中没有影响区域的风暴名称。",
        "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "mask_query": "SELECT name FROM <mask> WHERE storm_id NOT IN (SELECT storm_id FROM <mask>)"
    },
    {
        "db_id": "body_builder",
        "question": "总分高于300的健美运动员的名字是什么？",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  300"
    },
    {
        "db_id": "district_spokesman",
        "question": "列出按人口排序的所有地区的ID、名称和政府网站。",
        "query": "SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population",
        "mask_query": "SELECT name ,  <unk> ,  district_id FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "找出在2015年所有为“喜茶”写过评论的用户",
        "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"喜茶\" AND t2.year  =  2015;",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"喜茶\" AND t2.<unk>  =  2015;"
    },
    {
        "db_id": "movie_1",
        "question": "最近的电影叫什么名字？",
        "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR  =  (SELECT max(YEAR) FROM <mask>)"
    },
    {
        "db_id": "e_commerce",
        "question": "客户使用最多的付款方式是什么？",
        "query": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT Payment_method_code FROM <mask> GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "theme_gallery",
        "question": "有多少艺术家年龄在46岁以上而且是正在1990年以后加入？",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "mask_query": "SELECT count(*) FROM <mask> WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "activity_1",
        "question": "参加最多活动的学生的名字和姓氏是什么？",
        "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.fname ,  T1.lname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "institution_sports",
        "question": "按锦标赛次数的降序排列机构名称。",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
        "mask_query": "SELECT T2.<unk> FROM championship AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC"
    },
    {
        "db_id": "products_for_hire",
        "question": "预订了名为“书集”的产品的预订的开始日期和结束日期是什么？",
        "query": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  '书集'",
        "mask_query": "SELECT T3.<unk> ,   T3.<unk> FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.<unk>  =  T2.<unk> JOIN bookings AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  '书集'"
    },
    {
        "db_id": "workshop_paper",
        "question": "显示提交的作者及其提交的接受结果。",
        "query": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM acceptance AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "yelp",
        "question": "列出所有在2010的做“餐馆”生意的用户。",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"餐馆\" AND t3.year  =  2010;",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t2.<unk>  =  \"餐馆\" AND t3.<unk>  =  2010;"
    },
    {
        "db_id": "tracking_orders",
        "question": "哪个订单的出货跟踪号码是“3452”？把订单的ID给我。",
        "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
        "mask_query": "SELECT <unk> FROM shipments WHERE <unk> = \"3452\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "返回所有学生的手机号码和电子邮件地址。",
        "query": "SELECT cell_mobile_number ,  email_address FROM STUDENTS",
        "mask_query": "SELECT <unk> ,  <unk> FROM STUDENTS"
    },
    {
        "db_id": "imdb",
        "question": "找出1984年出生在“广州”的演员",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"广州\" AND birth_year  =  1984;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"广州\" AND <unk>  =  1984;"
    },
    {
        "db_id": "storm_record",
        "question": "找出影响“阿富汗”和“阿尔巴尼亚”地区的风暴名称。",
        "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  '阿富汗' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  '阿尔巴尼亚'",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.region_id  =  T2.region_id JOIN <mask> AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.<unk>  =  '阿富汗' INTERSECT SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.region_id  =  T2.region_id JOIN <mask> AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.<unk>  =  '阿尔巴尼亚'"
    },
    {
        "db_id": "riding_club",
        "question": "按照选手投票的降序，显示选手姓名和教练姓名。",
        "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
        "mask_query": "SELECT T3.<unk> ,  T2.coach_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk> DESC"
    },
    {
        "db_id": "school_finance",
        "question": "展示捐助学校“理工大学”和“财经大学”的捐赠者的姓名。",
        "query": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  '理工大学' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  '财经大学'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  '理工大学' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  '财经大学'"
    },
    {
        "db_id": "sing_contest",
        "question": "找到演唱歌曲的节奏得分超过5的原创歌手，并列出每个音质得分的结果。",
        "query": "SELECT T2.original_artist FROM performance_score AS T1 JOIN songs AS T2 ON T2.id  =  T1.songs_id WHERE T1.rhythm_tempo  >  5 ORDER BY T1.voice_sound_quality DESC",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> WHERE T1.<unk>  >  5 ORDER BY T1.<unk> DESC"
    },
    {
        "db_id": "activity_1",
        "question": "我们有多少“女”“教授”？",
        "query": "SELECT count(*) FROM Faculty WHERE Sex  =  \"女\" AND Rank  =  \"教授\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"女\" AND <unk>  =  \"教授\""
    },
    {
        "db_id": "small_bank_1",
        "question": "找到平均支票余额。",
        "query": "SELECT avg(balance) FROM checking",
        "mask_query": "SELECT avg(<unk>) FROM checking"
    },
    {
        "db_id": "formula_1",
        "question": "按年份排序，在2004年以后按比赛名称分组的比赛最快圈速是多少？",
        "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "mask_query": "SELECT max(T2.fastestlapspeed) ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.raceid = T2.raceid WHERE T1.<unk> > 2014 GROUP BY T1.<unk> ORDER BY T1.<unk>"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "哪些项目没有结果？列出其项目细节。",
        "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM Project_outcomes )"
    },
    {
        "db_id": "geo",
        "question": "“山东”的人口密度是多少？",
        "query": "SELECT density FROM state WHERE state_name  =  \"山东\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"山东\";"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "给我费用超过10000的星级酒店的描述。",
        "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000",
        "mask_query": "SELECT T2.<unk> FROM HOTELS AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  10000"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议上发表的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "tracking_grants_for_research",
        "question": "在“1989-04-24 23:51:54”之前，有多少项目成员是领导者或开始工作？",
        "query": "SELECT count(*) FROM Project_Staff WHERE role_code  =  '领导' OR date_from  <  '1989-04-24 23:51:54'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  '领导' OR <unk>  <  '1989-04-24 23:51:54'"
    },
    {
        "db_id": "yelp",
        "question": "找出所有写在“成都”的餐馆的评论的用户",
        "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"成都\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"成都\";"
    },
    {
        "db_id": "activity_1",
        "question": "每个教员的教员ID和每个教员的学生人数是多少？",
        "query": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.advisor GROUP BY T1.<unk>"
    },
    {
        "db_id": "college_1",
        "question": "这所学院有多少个系？",
        "query": "SELECT count(DISTINCT dept_name) FROM department",
        "mask_query": "SELECT count(DISTINCT dept_name) FROM department"
    },
    {
        "db_id": "restaurant_1",
        "question": "列出所有修600专业的学生的名字和姓氏。",
        "query": "SELECT Fname , Lname FROM Student WHERE Major  =  600;",
        "mask_query": "SELECT <unk> , Lname FROM <mask> WHERE <unk>  =  600;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "每个角色有多少员工？列出员工的角色描述、ID和数量。",
        "query": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  count(*) FROM ROLES AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk>;"
    },
    {
        "db_id": "baseball_1",
        "question": "每个队的最高工资是多少？列出团队名称、id和最高工资。",
        "query": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  max(T2.<mask>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>;"
    },
    {
        "db_id": "solvency_ii",
        "question": "列出没有任何事件的产品名称。",
        "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "allergy_1",
        "question": "18岁的学生有多少？",
        "query": "SELECT count(*) FROM Student WHERE age  =  18",
        "mask_query": "SELECT count(*) FROM <mask> WHERE age  =  18"
    },
    {
        "db_id": "twitter_1",
        "question": "名为“钢铁侠”的用户的ID是什么？",
        "query": "SELECT partitionid FROM user_profiles WHERE name  =  '钢铁侠'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '钢铁侠'"
    },
    {
        "db_id": "academic",
        "question": "请返回论文中包含关键字“关系型数据库”的作者的数量。",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"关系型数据库\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"关系型数据库\";"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "查找名为“怎样阅读一本书”的文档类型名称。",
        "query": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"怎样阅读一本书\"",
        "mask_query": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"怎样阅读一本书\""
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "运输代理名称是什么？",
        "query": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "debate",
        "question": "显示拥有最多人的政党。",
        "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "roller_coaster",
        "question": "显示有超过一辆过山车的国家的名字。",
        "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "formula_1",
        "question": "西班牙在2000年以后举行的所有比赛的名字是什么？",
        "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"西班牙\" AND T1.year > 2000",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.circuitid = T2.circuitid WHERE T2.<unk> = \"西班牙\" AND T1.<unk> > 2000"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "我们乘“公共汽车”能到哪些旅游景点？告诉我景点的名字。",
        "query": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"公共汽车\"",
        "mask_query": "SELECT <unk> FROM TOURIST_ATTRACTIONS WHERE <unk>  =  \"公共汽车\""
    },
    {
        "db_id": "dorm_1",
        "question": "找到居住在每个城市的学生的数量和平均年龄。",
        "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "mask_query": "SELECT count(*) ,  avg(age) ,  <unk> FROM student GROUP BY <unk>"
    },
    {
        "db_id": "customers_and_orders",
        "question": "订购的显示器产品总数是多少？",
        "query": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
        "mask_query": "SELECT sum(<unk>) FROM Order_items AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"Monitor\""
    },
    {
        "db_id": "election_representative",
        "question": "有多少不同的党派？",
        "query": "SELECT count(DISTINCT Party) FROM representative",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "station_weather",
        "question": "显示最低低温并且以每小时英里数显示最高风速。",
        "query": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "mask_query": "SELECT min(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "参与者最多的类型是什么？",
        "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "planet_1",
        "question": "查找薪资高于平均薪资或超过5000的员工的姓名。",
        "query": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  5000 OR <unk>  >  (SELECT avg(salary) FROM employee)"
    },
    {
        "db_id": "bike_1",
        "question": "哪辆自行车路线在邮政编码94002的地区旅行最多？",
        "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  94002 GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_4",
        "question": "有多少个城市有超过3个机场？",
        "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "mask_query": "SELECT count(*) FROM (SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  3)"
    },
    {
        "db_id": "small_bank_1",
        "question": "所有客户的姓名、支票余额和存款余额是多少？",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> ,  T1.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "sing_contest",
        "question": "最多的参赛者演唱的歌曲的编号和名称是什么？",
        "query": "SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "在“CVPR”中使用ImageNet数据集的论文有多少？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"CVPR\";",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN <mask> AS t1 ON t2.datasetid  =  t1.datasetid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"CVPR\";"
    },
    {
        "db_id": "movie_2",
        "question": "在最多的电影院放映的电影叫什么名字？",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "question": "返回投资两个或更多企业家的投资者。",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示所有客户的客户ID和每个客户的发票数量。",
        "query": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "customer_complaints",
        "question": "电子邮件“vbogisich@qq.org”中客户地址的第一行和第二行是什么？",
        "query": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@qq.org\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers WHERE <unk>  =  \"vbogisich@qq.org\""
    },
    {
        "db_id": "phone_market",
        "question": "列出内存大于32的不同手机的运营商。",
        "query": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  32"
    },
    {
        "db_id": "e_learning",
        "question": "查找注册课程最多的学生的学生ID和登录名",
        "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "返回所有的拘留摘要。",
        "query": "SELECT detention_summary FROM Detention",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "customer_complaints",
        "question": "最近投诉的客户的电话号码是多少？",
        "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM customers AS t1 JOIN complaints AS t2 ON t1.<unk>  =  t2.<unk> ORDER BY t2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "question": "演员最多的电影的片名、id和描述是什么？",
        "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "program_share",
        "question": "计算节目的数量。",
        "query": "SELECT count(*) FROM program",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "singer",
        "question": "那些有不止一首歌的歌手的名字是什么？",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "wta_1",
        "question": "找到拥有球员数量最多的国家的代码。",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "question": "在少于两个订单中出现的所有产品的ID、名称、价格和颜色是什么？",
        "query": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> ,  <unk> FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "journal_committee",
        "question": "列出销售量超过3000份的期刊的委员会的编辑的姓名。",
        "query": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  >  3000"
    },
    {
        "db_id": "manufacturer",
        "question": "列出其开张年度所订购的所有制造商名称和ID。",
        "query": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year",
        "mask_query": "SELECT name ,  manufacturer_id FROM <mask> ORDER BY open_year"
    },
    {
        "db_id": "academic",
        "question": "返回在“北京理工大学”有5000多篇论文总引用的作者。",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"北京理工大学\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t3.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"北京理工大学\" GROUP BY t1.<unk> HAVING SUM ( t4.<unk> )  >  5000;"
    },
    {
        "db_id": "match_season",
        "question": "哪些球员来自“印度尼西亚”？",
        "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"印度尼西亚\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"印度尼西亚\""
    },
    {
        "db_id": "company_employee",
        "question": "列出未被任何公司雇用的人的姓名",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "advertising_agencies",
        "question": "有最多客户数的代理ID和详细信息是什么？",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "storm_record",
        "question": "列出风暴的名称和每个风暴的受影响区域的数量。",
        "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
        "mask_query": "SELECT T1.name ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id"
    },
    {
        "db_id": "academic",
        "question": "把“李政道”于2000年后发表的论文返回。",
        "query": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"李政道\" AND t3.year  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\" AND t3.<unk>  >  2000;"
    },
    {
        "db_id": "epinions_1",
        "question": "有多少不同的用户写了一些评论？",
        "query": "SELECT count(DISTINCT u_id) FROM review",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "voter_2",
        "question": "年龄是18岁且有副校长选票的学生的姓名是什么？",
        "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  T2.VICE_President_VOTE WHERE T1.age  =  18"
    },
    {
        "db_id": "country_language",
        "question": "政治得分最高的国家叫什么？",
        "query": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "sports_competition",
        "question": "最多有5场比赛的比赛类型是什么？",
        "query": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  <=  5"
    },
    {
        "db_id": "sakila_1",
        "question": "统计商店1库存物品的数量。",
        "query": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  1"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪些第三方公司至少有两名维修工程师，或者至少有两份维修合同？列出公司ID和名称。",
        "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2 UNION SELECT T3.<unk> ,  T3.<unk> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk> GROUP BY T3.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "chinook_1",
        "question": "显示专辑名称、ID和每张专辑的曲目数量。",
        "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "mask_query": "SELECT T1.<unk> ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.AlbumID"
    },
    {
        "db_id": "election",
        "question": "显示所有县的平均人口。",
        "query": "SELECT avg(Population) FROM county",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "machine_repair",
        "question": "技术人员最多的团队是什么？",
        "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "ship_1",
        "question": "多数船是在哪一年建造的？",
        "query": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "document_management",
        "question": "列出包含“CV”的所有文档的名称。",
        "query": "SELECT document_name FROM documents WHERE document_name LIKE \"简历\"",
        "mask_query": "SELECT <unk> FROM documents WHERE <unk> LIKE \"简历\""
    },
    {
        "db_id": "yelp",
        "question": "2010年“忆安”评论了多少在“嘉兴”的企业？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"嘉兴\" AND t2.year  =  2010 AND t3.name  =  \"忆安\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"嘉兴\" AND t2.<unk>  =  2010 AND t3.<unk>  =  \"忆安\";"
    },
    {
        "db_id": "movie_2",
        "question": "显示数据库中所有不同的电影分级。",
        "query": "SELECT DISTINCT rating FROM movies",
        "mask_query": "SELECT DISTINCT rating FROM movies"
    },
    {
        "db_id": "mountain_photos",
        "question": "列出那些拍摄“青藏高原”区域照片和拍摄“泰山”区域山峰的照片的镜头品牌",
        "query": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  '青藏高原' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  '泰山'",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.range  =  '青藏高原' INTERSECT SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.range  =  '泰山'"
    },
    {
        "db_id": "geo",
        "question": "有多少省至少有一个省？",
        "query": "SELECT COUNT ( DISTINCT state_name ) FROM border_info;",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> ) FROM <mask>;"
    },
    {
        "db_id": "geo",
        "question": "最大省的最高点有多高？",
        "query": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "imdb",
        "question": "找出“厦门”出生导演的所有电影",
        "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"厦门\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"厦门\";"
    },
    {
        "db_id": "small_bank_1",
        "question": "按总余额排序，所有客户的支票余额和储蓄余额总和是多少？",
        "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "mask_query": "SELECT T1.<unk> + T2.<unk> FROM checking AS T1 JOIN savings AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> + T2.<unk>"
    },
    {
        "db_id": "department_store",
        "question": "被指派了多个工作岗位的员工的姓名是什么？",
        "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "mask_query": "SELECT T1.<unk> FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT (*)  >  1"
    },
    {
        "db_id": "game_1",
        "question": "有什么类型的电子游戏和每种类型有多少？",
        "query": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",
        "mask_query": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype"
    },
    {
        "db_id": "inn_1",
        "question": "查找价格高于平均价格的房间名称。",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  ( SELECT avg(<unk>) FROM <mask> );"
    },
    {
        "db_id": "music_4",
        "question": "与登顶超过2周的专辑有关艺术家的著名作品是什么？",
        "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  2"
    },
    {
        "db_id": "body_builder",
        "question": "按升序列出健美运动员的总分。",
        "query": "SELECT Total FROM body_builder ORDER BY Total ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "geo",
        "question": "“辽宁”最小的城市是什么？",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name  =  \"辽宁\" ) AND state_name  =  \"辽宁\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> WHERE <unk>  =  \"辽宁\" ) AND <unk>  =  \"辽宁\";"
    },
    {
        "db_id": "document_management",
        "question": "按照文档名称的字母顺序排序的所有文档的名称和访问次数是什么？",
        "query": "SELECT document_name ,  access_count FROM documents ORDER BY document_name",
        "mask_query": "SELECT <unk> ,  <unk> FROM documents ORDER BY <unk>"
    },
    {
        "db_id": "products_for_hire",
        "question": "所有付款的平均金额是多少？",
        "query": "SELECT avg(amount_due) FROM payments",
        "mask_query": "SELECT avg(<unk>) FROM payments"
    },
    {
        "db_id": "student_assessment",
        "question": "最多注册学生的课程名称是什么？",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.<unk> = T2.course_Id GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "question": "找到多少学校的位置含有“上海”。",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"上海\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE LOCATION LIKE \"上海\""
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "统计每个城市的雇员数量。",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "mask_query": "SELECT count(*) ,  city FROM <mask> GROUP BY city"
    },
    {
        "db_id": "imdb",
        "question": "哪个制片人的导演数量最多？",
        "query": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t5.<unk> GROUP BY t1.<unk> ORDER BY COUNT ( DISTINCT t3.<unk>  ) DESC LIMIT 1;"
    },
    {
        "db_id": "conference",
        "question": "显示最近创建的机构的名称和地点。",
        "query": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
        "mask_query": "SELECT institution_name ,  LOCATION FROM <mask> ORDER BY founded DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "question": "请显示拥有超过1000人的主办城市的比赛主题。",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  >  1000"
    },
    {
        "db_id": "musical",
        "question": "提名“梁朝伟”的音乐剧名称是什么？",
        "query": "SELECT Name FROM musical WHERE Nominee  =  \"梁朝伟\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"梁朝伟\""
    },
    {
        "db_id": "phone_1",
        "question": "查找在其认证类型中有“全权”字样的所有手机。列出硬件模型名称和公司名称。",
        "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE '全权';",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> LIKE '全权';"
    },
    {
        "db_id": "voter_1",
        "question": "列出既投票给选手“王伟”又投票给选手“王芳”的选民的地区代码。",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  \"王伟\" INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  \"王芳\"",
        "mask_query": "SELECT T3.<unk> FROM contestants AS T1 JOIN votes AS T2 ON T1.<unk>  =  T2.<unk> JOIN area_code_state AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  \"王伟\" INTERSECT SELECT T3.<unk> FROM contestants AS T1 JOIN votes AS T2 ON T1.<unk>  =  T2.<unk> JOIN area_code_state AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  \"王芳\""
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "有多少客户没有任何活动？",
        "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
        "mask_query": "SELECT count(*) FROM customers WHERE <unk> NOT IN ( SELECT <unk> FROM customer_events )"
    },
    {
        "db_id": "planet_1",
        "question": "图兰加·莱拉管理的火星号上所有货物的ID是什么？",
        "query": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<mask> = T2.<unk> JOIN <mask> AS T3 ON T3.<unk> = T1.<unk> WHERE T2.<unk> = \"Mars\" AND T3.<unk> = \"Turanga Leela\";"
    },
    {
        "db_id": "university_rank",
        "question": "平均大学入学人数在2000人以上的家庭会议有哪些？",
        "query": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
        "mask_query": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000"
    },
    {
        "db_id": "college_2",
        "question": "统计教授课程的不同教员的数量。",
        "query": "SELECT COUNT (DISTINCT id) FROM teaches",
        "mask_query": "SELECT COUNT (DISTINCT id) FROM <mask>"
    },
    {
        "db_id": "club_leader",
        "question": "展示至少有两个会员的国家。",
        "query": "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "类型代码为“结婚”的服务的时间信息是什么？",
        "query": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  '结婚'",
        "mask_query": "SELECT T1.event_details FROM EVENTS AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '结婚'"
    },
    {
        "db_id": "flight_company",
        "question": "航班最多的机场的ID、名称和IATA代码是什么？",
        "query": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "“前往巴西”文件的流程名称是什么？",
        "query": "SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  \"Travel to Brazil\"",
        "mask_query": "SELECT T3.<unk> FROM Documents_processes AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN Business_processes AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"Travel to Brazil\""
    },
    {
        "db_id": "loan_1",
        "question": "找到名为“浦发”的银行分行所在的城市和州。",
        "query": "SELECT city ,  state FROM bank WHERE bname  =  '浦发'",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  '浦发'"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "哪些城市30岁以下的员工多于一个人？",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "mask_query": "SELECT city FROM <mask> WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "没有顾客居住的城市是什么？",
        "query": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "mask_query": "SELECT <unk> FROM addresses WHERE <unk> NOT IN ( SELECT DISTINCT t3.<unk> FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.<unk>  =  t2.<unk> JOIN addresses AS t3 ON t2.<unk>  =  t3.<unk>)"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "给我所有提供服务的工作组的电话号码和电子邮件地址。",
        "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "small_bank_1",
        "question": "对于存款余额高于平均存款余额的帐户，名称及支票和储蓄余额总额是什么？",
        "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> + T3.<unk> FROM accounts AS T1 JOIN checking AS T2 ON T1.<unk>  =  T2.<unk> JOIN savings AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.<unk>  >  (SELECT avg(<unk>) FROM savings)"
    },
    {
        "db_id": "art_1",
        "question": "241号画廊中有材料是油画的艺术家的名字是什么？",
        "query": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"oil\" AND LOCATION  =  \"Gallery 241\""
    },
    {
        "db_id": "customers_and_orders",
        "question": "列出所有地址ID和地址详细信息。",
        "query": "SELECT address_id ,  address_details FROM Addresses",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "epinions_1",
        "question": "查找同时获得高于8和低于5的评分的项目的标题。",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  8 INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  5"
    },
    {
        "db_id": "election",
        "question": "显示代表和他们所属政党的名称。",
        "query": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "soccer_2",
        "question": "谁的名字包含字母“a”的玩家？",
        "query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE 'a'",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk> LIKE 'a'"
    },
    {
        "db_id": "coffee_shop",
        "question": "找到没有快乐时间的商店的地址和员工数量。",
        "query": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "mask_query": "SELECT address ,  num_of_staff FROM <mask> WHERE shop_id NOT IN (SELECT shop_id FROM <mask>)"
    },
    {
        "db_id": "academic",
        "question": "把“VLDB”会议论文最多的关键词返回。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"VLDB\" GROUP BY t1.<mask> ORDER BY COUNT ( DISTINCT t3.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "wine_1",
        "question": "每年葡萄酒的最高价格和最高得分是多少？",
        "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
        "mask_query": "SELECT max(<unk>) ,  max(<unk>) ,  YEAR FROM WINE GROUP BY YEAR"
    },
    {
        "db_id": "body_builder",
        "question": "出生人数最多的出生地是什么？",
        "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "question": "进行过两次或更多次治疗的专家的ID、角色和名字是什么？",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "course_teach",
        "question": "按照年龄递增排序，老师的姓名是什么？",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "customer_complaints",
        "question": "计算具有最常见的客户类型的客户数量。",
        "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(*) FROM customers GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_1",
        "question": "哪位导师的学生最多？列出导师和学生人数。",
        "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(<unk>) DESC LIMIT 1;"
    },
    {
        "db_id": "soccer_2",
        "question": "按招生号升序列出关于大学的信息。",
        "query": "SELECT * FROM College ORDER BY enr",
        "mask_query": "SELECT * FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "warehouse_1",
        "question": "找出所有箱子中价值最高的存储物。",
        "query": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
        "mask_query": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1"
    },
    {
        "db_id": "book_2",
        "question": "展示不同的出版商以及他们出版的出版物数量。",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "district_spokesman",
        "question": "谁是最老的发言人？",
        "query": "SELECT name FROM spokesman ORDER BY age DESC LIMIT 1",
        "mask_query": "SELECT name FROM <mask> ORDER BY age DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“唐纳德·克努斯”为作者的所有出版刊物是什么？",
        "query": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"唐纳德·克努斯\";",
        "mask_query": "SELECT DISTINCT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"唐纳德·克努斯\";"
    },
    {
        "db_id": "dorm_1",
        "question": "所有宿舍的学生总人数是多少？",
        "query": "SELECT sum(student_capacity) FROM dorm",
        "mask_query": "SELECT sum(<unk>) FROM dorm"
    },
    {
        "db_id": "hr_1",
        "question": "有哪些部门有超过10名拿到佣金的员工，这些部门的id是什么？",
        "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "mask_query": "SELECT department_id FROM <mask> GROUP BY department_id HAVING COUNT(commission_pct) > 10"
    },
    {
        "db_id": "cinema",
        "question": "显示所有容量超过800电影院的位置。",
        "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
        "mask_query": "SELECT LOCATION FROM <mask> EXCEPT SELECT LOCATION FROM <mask> WHERE capacity  >  800"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "产品类别代码“香草”的计量单位是什么？",
        "query": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"香草\"",
        "mask_query": "SELECT <unk> FROM ref_product_categories WHERE <unk>  =  \"香草\""
    },
    {
        "db_id": "match_season",
        "question": "统计国家的数量。",
        "query": "SELECT count(*) FROM country",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "book_press",
        "question": "找出五大畅销书的书名和出版日期。",
        "query": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
        "mask_query": "SELECT title ,  release_date FROM <mask> ORDER BY sale_amount DESC LIMIT 5"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "哪些学期没有录取学生？列出学期名称。",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "flight_2",
        "question": "到达“哈尔滨”市的航班的航班号是多少？",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"哈尔滨\"",
        "mask_query": "SELECT T1.<unk> FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.<unk>   =  T2.<unk> WHERE T2.<unk>  =  \"哈尔滨\""
    },
    {
        "db_id": "student_assessment",
        "question": "查找ID为121的学生注册或参加的课程的ID？",
        "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "mask_query": "SELECT <unk> FROM student_course_registrations WHERE <unk> = 121 UNION SELECT <unk> FROM student_course_attendance WHERE <unk> = 121"
    },
    {
        "db_id": "academic",
        "question": "返回2000年以后“李政道”在“VLDB”会议上发表的论文数量。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"VLDB\" AND t4.<unk>  >  2000;"
    },
    {
        "db_id": "scholar",
        "question": "在2011到2016年间有多少关于“问答”领域的论文？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"问答\" AND t3.year  >=  2011;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"问答\" AND t3.<unk>  >=  2011;"
    },
    {
        "db_id": "college_3",
        "question": "查找教授“计算机导论”的部门名称和房间。",
        "query": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"计算机导论\"",
        "mask_query": "SELECT T2.Dname ,  T2.<unk> FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"计算机导论\""
    },
    {
        "db_id": "decoration_competition",
        "question": "在轮次中以升序排列成员的姓名。",
        "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY <unk> ASC"
    },
    {
        "db_id": "gas_company",
        "question": "显示公司名称与加油站的数量。",
        "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "mask_query": "SELECT T2.<mask> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id"
    },
    {
        "db_id": "baseball_1",
        "question": "拥有数量最多的棒球运动员的大学的全名和id是什么？",
        "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "imdb",
        "question": "列出“陆小凤”的导演",
        "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"陆小凤\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"陆小凤\";"
    },
    {
        "db_id": "academic",
        "question": "返回2000年后与“李政道”合作的作者。",
        "query": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t5.year  >  2000;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t5.<unk>  >  2000;"
    },
    {
        "db_id": "government_shift",
        "question": "列出所有与失败的交互平台有关的客户的名称。",
        "query": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\"",
        "mask_query": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\""
    },
    {
        "db_id": "customers_and_addresses",
        "question": "“杨超越”使用的最新联系人频道的激活日期是什么？",
        "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"杨超越\"",
        "mask_query": "SELECT max(t2.<unk>) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"杨超越\""
    },
    {
        "db_id": "pilot_1",
        "question": "返回每个飞机名称的飞行员平均年龄。",
        "query": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM pilotskills GROUP BY <unk>"
    },
    {
        "db_id": "scholar",
        "question": "2012年度EnnLL-CONLL最佳论文的题目是什么？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM <mask> AS t2 JOIN <mask> AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN <mask> AS t3 ON t3.venueid  =  t2.venueid WHERE t2.<unk>  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
    },
    {
        "db_id": "browser_web",
        "question": "不只使用“广播” 类型的连接的网络客户端加速器的名称和操作系统是什么？",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != '广播'",
        "mask_query": "SELECT <unk> ,  operating_system FROM web_client_accelerator WHERE CONNECTION != '广播'"
    },
    {
        "db_id": "singer",
        "question": "那些不是“法国”公民的歌手的名字是什么？",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"法国\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"法国\""
    },
    {
        "db_id": "school_finance",
        "question": "查找有不止一个捐赠者捐赠超过8.5的学校的名称。",
        "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.<unk>  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1"
    },
    {
        "db_id": "yelp",
        "question": "“米雪”在“四月”写了多少提示？",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"四月\" AND t2.name  =  \"米雪\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"四月\" AND t2.<unk>  =  \"米雪\";"
    },
    {
        "db_id": "decoration_competition",
        "question": "按字母升序顺序列出成员的名字。",
        "query": "SELECT Name FROM member ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "imdb",
        "question": "“钢的琴”的导演在哪里？",
        "query": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"钢的琴\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"钢的琴\";"
    },
    {
        "db_id": "club_leader",
        "question": "显示名为“休斯顿”的俱乐部领导的姓名。",
        "query": "SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  \"Houston\"",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"Houston\""
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "有3个事件的客户的id和细节是什么？",
        "query": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  3"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "“大连”的邮政编码是什么？",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  '大连'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  '大连'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "列出服务ID和活动的详细信息。",
        "query": "SELECT service_id ,  event_details FROM EVENTS",
        "mask_query": "SELECT service_id ,  event_details FROM EVENTS"
    },
    {
        "db_id": "aircraft",
        "question": "“北京首都机场”机场有多少国际旅客和国内旅客？",
        "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"北京首都机场\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  \"北京首都机场\""
    },
    {
        "db_id": "advertising_agencies",
        "question": "每次会议结果有多少个会议？",
        "query": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "事件类型代码为“暴力”的事件类型描述是什么？",
        "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"暴力\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"暴力\""
    },
    {
        "db_id": "government_shift",
        "question": "哪些客户在互动中经历过状态“卡住”并且服务和渠道细节“坏”的情况？把客户的详细情况告诉我。",
        "query": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\"",
        "mask_query": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\""
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "列出具有完成状态代码和类型代码为论文的所有文档的文档ID。",
        "query": "SELECT document_id FROM Documents WHERE document_status_code = \"完结\" AND document_type_code = \"论文\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"完结\" AND <unk> = \"论文\";"
    },
    {
        "db_id": "district_spokesman",
        "question": "选择人口最少的地区和政府网站。",
        "query": "SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1",
        "mask_query": "SELECT area_km ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "question": "找到总计和平均结算金额。",
        "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
        "mask_query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"
    },
    {
        "db_id": "academic",
        "question": "返回2000年后在“数据库”领域引用超过200篇的论文。",
        "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"数据库\" AND t3.citation_num  >  200 AND t3.year  >  2000;",
        "mask_query": "SELECT t3.<unk> FROM DOMAIN AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"数据库\" AND t3.<unk>  >  200 AND t3.<unk>  >  2000;"
    },
    {
        "db_id": "advertising_agencies",
        "question": "返回发票数最多的发票状态。",
        "query": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回发表在“VLDB”会议的引用超过200个的作者是“李政道”的论文。",
        "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200;",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"VLDB\" AND t4.<unk>  >  200;"
    },
    {
        "db_id": "ship_1",
        "question": "在“切割机”和“武装纵帆船”类的船长的级别是什么？",
        "query": "SELECT rank FROM captain WHERE CLASS  =  \"切割机\" INTERSECT SELECT rank FROM captain WHERE CLASS  =  \"武装纵帆船\"",
        "mask_query": "SELECT rank FROM <mask> WHERE CLASS  =  \"切割机\" INTERSECT SELECT rank FROM <mask> WHERE CLASS  =  \"武装纵帆船\""
    },
    {
        "db_id": "college_1",
        "question": "“旧”系在哪里？",
        "query": "SELECT dept_address FROM department WHERE dept_name  =  '旧'",
        "mask_query": "SELECT dept_address FROM department WHERE dept_name  =  '旧'"
    },
    {
        "db_id": "scholar",
        "question": "今年在“多用户接收机的决策反馈领域”中写了多少篇论文？",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"多用户接收机的决策反馈领域\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;",
        "mask_query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"多用户接收机的决策反馈领域\" AND t3.<unk>  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;"
    },
    {
        "db_id": "sakila_1",
        "question": "返回电影“邪不压正”所属类别的名称。",
        "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  '邪不压正'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '邪不压正'"
    },
    {
        "db_id": "cinema",
        "question": "按开张年份降序，显示所有的电影名称和开张年份。",
        "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
        "mask_query": "SELECT name ,  openning_year FROM <mask> ORDER BY openning_year DESC"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "按字母顺序排列所有的不同的产品名称。",
        "query": "SELECT DISTINCT product_name FROM product ORDER BY product_name",
        "mask_query": "SELECT DISTINCT <unk> FROM product ORDER BY <unk>"
    },
    {
        "db_id": "loan_1",
        "question": "按帐户余额升序排列列出所有客户的名字。",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "customers_and_orders",
        "question": "给出最贵服装产品的名称。",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Clothes\" ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "game_injury",
        "question": "2010赛季后发生了多少种不同的受伤？",
        "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
        "mask_query": "SELECT count(DISTINCT T1.injury) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.season  >  2010"
    },
    {
        "db_id": "railway",
        "question": "显示不同的铁路建设者，以及使用每个建设者建设的相应数量的铁路。",
        "query": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "对于描述包含字符串“母亲”的用户，他们属于哪些年龄类别？",
        "query": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.User_category_description LIKE \"%Mother\";"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "按年龄升序排列员工的姓名。",
        "query": "SELECT name FROM employee ORDER BY age",
        "mask_query": "SELECT name FROM <mask> ORDER BY age"
    },
    {
        "db_id": "protein_institute",
        "question": "显示所有不同的机构类型。",
        "query": "SELECT DISTINCT TYPE FROM institution",
        "mask_query": "SELECT DISTINCT TYPE FROM institution"
    },
    {
        "db_id": "scholar",
        "question": "返回“菲利普·可汗”的“机器翻译输出”的论文合著者",
        "query": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"菲利普·可汗\" AND t3.keyphrasename  =  \"机器翻译输出\";",
        "mask_query": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN <mask> AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t6.paperid JOIN <mask> AS t5 ON t5.paperid  =  t4.paperid JOIN <mask> AS t1 ON t5.authorid  =  t1.authorid JOIN <mask> AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"菲利普·可汗\" AND t3.keyphrasename  =  \"机器翻译输出\";"
    },
    {
        "db_id": "entrepreneur",
        "question": "身高超过1.85的企业家的申请资金总额是多少？",
        "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "mask_query": "SELECT sum(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  1.85"
    },
    {
        "db_id": "party_people",
        "question": "我们有多少党派的事件？",
        "query": "SELECT count(*) FROM party_events",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "对于每个有问题的产品，列出问题的数量和产品id。",
        "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "mask_query": "SELECT count(*) ,  T2.<unk> FROM problems AS T1 JOIN product AS T2 ON T1.<unk> = T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "scholar",
        "question": "“ISDN交换架构”发布的年份是什么？",
        "query": "SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"ISDN交换架构\";",
        "mask_query": "SELECT DISTINCT <unk>  ,  YEAR FROM <mask> WHERE <unk>  =  \"ISDN交换架构\";"
    },
    {
        "db_id": "geo",
        "question": "最大的城市中最小的城市是什么？",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "solvency_ii",
        "question": "显示至少有两个事件中的产品名称。",
        "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "“云南”的学生住址的月租金是多少？",
        "query": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"云南\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"云南\""
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "谁的永久地址不同于他或她的当前地址？列出他或她的名字。",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != <unk>"
    },
    {
        "db_id": "student_assessment",
        "question": "按照出勤日期的顺序列出参加“统计学”课程的学生的ID。",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"统计学\" ORDER BY T2.date_of_attendance",
        "mask_query": "SELECT T2.<unk> FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"统计学\" ORDER BY T2.<unk>"
    },
    {
        "db_id": "e_commerce",
        "question": "已经装运了多少产品？",
        "query": "SELECT count(*) FROM Shipment_Items",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "product_catalog",
        "question": "查找所有名字包含“小刚”的目录出版商。",
        "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"小刚\"",
        "mask_query": "SELECT distinct(<unk>) FROM catalogs WHERE <unk> LIKE \"小刚\""
    },
    {
        "db_id": "cinema",
        "question": "最大容量的电影院的名字和位置是什么？",
        "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
        "mask_query": "SELECT name ,  LOCATION FROM <mask> ORDER BY capacity DESC LIMIT 1"
    },
    {
        "db_id": "pilot_record",
        "question": "按照飞行员级别的升序显示飞行员的姓名和他们驾驶的飞机的系列号。",
        "query": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk>"
    },
    {
        "db_id": "company_office",
        "question": "统计公司的不同行业数量。",
        "query": "SELECT count(DISTINCT Industry) FROM Companies",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "e_learning",
        "question": "有多少不同的学生参加课程？",
        "query": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "party_people",
        "question": "哪些部长不是进步党的一员？",
        "query": "SELECT minister FROM party WHERE party_name != '进步党'",
        "mask_query": "SELECT minister FROM <mask> WHERE party_name != '进步党'"
    },
    {
        "db_id": "mountain_photos",
        "question": "列出包含“数码”子字符串的相机镜头的名称。",
        "query": "SELECT name FROM camera_lens WHERE name LIKE \"数码\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"数码\""
    },
    {
        "db_id": "art_1",
        "question": "每一个创作少于4幅画的艺术家的死亡年份是什么？",
        "query": "SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3",
        "mask_query": "SELECT T1.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  <=  3"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "名称为“罗超的简历”的文档的“起始位置日期”和“最终位置日期”是什么？",
        "query": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"罗超的简历\"",
        "mask_query": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"罗超的简历\""
    },
    {
        "db_id": "activity_1",
        "question": "全体教员的总数是多少？",
        "query": "SELECT count(*) FROM Faculty",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "school_finance",
        "question": "按照捐赠金额的下降顺序列出每个捐赠者的姓名和捐赠金额。",
        "query": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "mask_query": "SELECT <unk> ,  sum(<unk>) FROM <mask> GROUP BY <unk> ORDER BY sum(<unk>) DESC"
    },
    {
        "db_id": "phone_market",
        "question": "手机的内存和运营商是什么？",
        "query": "SELECT Memory_in_G ,  Carrier FROM phone",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回在“数据库”方向的中的机构数量。",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"数据库\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN DOMAIN AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"数据库\";"
    },
    {
        "db_id": "phone_market",
        "question": "显示手机的名称和市场区域。",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "document_management",
        "question": "具有三种最常见类型之一和三种最常见结构之一的文档的名称是什么？",
        "query": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM documents GROUP BY <unk> ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT <unk> FROM documents GROUP BY <unk> ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "car_road_race",
        "question": "按车队的字母顺序排列的获胜的车手和车队是什么？",
        "query": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "geo",
        "question": "省会是“长沙”的省份的人口密度是多少？",
        "query": "SELECT density FROM state WHERE capital  =  \"长沙\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"长沙\";"
    },
    {
        "db_id": "music_2",
        "question": "姓“刘”的音乐家在歌曲“说好的幸福呢”中演唱了了哪种类型声乐？",
        "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"刘\" AND T2.title  =  \"说好的幸福呢\"",
        "mask_query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"刘\" AND T2.title  =  \"说好的幸福呢\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "显示发票记录中不同的付款方法代码。",
        "query": "SELECT DISTINCT payment_method_code FROM INVOICES",
        "mask_query": "SELECT DISTINCT <unk> FROM INVOICES"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "包含子字符串“女士”的驻留详细信息是什么？",
        "query": "SELECT other_details FROM Residents WHERE other_details LIKE '女士'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '女士'"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "每个雇员的id和授权销毁文件的数量是多少？",
        "query": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "mask_query": "SELECT <unk> ,  count(*) FROM Documents_to_be_destroyed GROUP BY <unk>"
    },
    {
        "db_id": "student_assessment",
        "question": "注册课程最多的学生的详细情况是什么？",
        "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "city_record",
        "question": "“1994年世界杯资格赛”的比赛ID是什么？",
        "query": "SELECT match_id FROM MATCH WHERE competition = \"1994年世界杯资格赛\"",
        "mask_query": "SELECT match_id FROM MATCH WHERE competition = \"1994年世界杯资格赛\""
    },
    {
        "db_id": "college_2",
        "question": "查找不同院系提供的课程总学分。",
        "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "mask_query": "SELECT sum(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "driving_school",
        "question": "名字中有“安”字的教职员教了多少课？",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%安%\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> LIKE \"%安%\""
    },
    {
        "db_id": "world_1",
        "question": "返回3个人口最少的国家的名字。",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 3"
    },
    {
        "db_id": "loan_1",
        "question": "“江西”的银行的平均客户数是多少？",
        "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  '江西'",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  '江西'"
    },
    {
        "db_id": "book_2",
        "question": "哪些不同出版商有格高于5000000的出版物？",
        "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >  5000000"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "“中国邮政”船舶代理的运输代理代码是什么？",
        "query": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"中国邮政\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"中国邮政\";"
    },
    {
        "db_id": "scholar",
        "question": "至少有5篇论文的作者",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;",
        "mask_query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;"
    },
    {
        "db_id": "wta_1",
        "question": "所有比赛中输家和赢家的平均年龄是多少？",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "mask_query": "SELECT avg(<unk>) ,  avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "voter_1",
        "question": "列出投票ID、电话号码和所有投票的州。",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM votes"
    },
    {
        "db_id": "scholar",
        "question": "列出“巴拉克利什南·普拉巴卡伦”出的论文",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"巴拉克利什南·普拉巴卡伦\";",
        "mask_query": "SELECT DISTINCT t3.paperid  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"巴拉克利什南·普拉巴卡伦\";"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "列出所有员工角色的代码和说明。",
        "query": "SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles",
        "mask_query": "SELECT <unk> ,  <unk> FROM Ref_staff_roles"
    },
    {
        "db_id": "debate",
        "question": "显示不同党派的人以及每个政党的人数。",
        "query": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "显示在没有费用预算的情况下类型是“CV”中的所有文档ID。",
        "query": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "mask_query": "SELECT document_id FROM <mask> WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"
    },
    {
        "db_id": "phone_1",
        "question": "列出2002年推出的具有最高RAM大小的手机型号的名称。",
        "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<mask> WHERE T1.<unk> = 2002 ORDER BY T1.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "bike_racing",
        "question": "2015年后有多少骑自行车的人没有购买自行车？",
        "query": "SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> WHERE <unk>  >  2015 )"
    },
    {
        "db_id": "scholar",
        "question": "“玛丽·克莱因”上一次发表论文是什么时候？",
        "query": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"玛丽·克莱因\";",
        "mask_query": "SELECT DISTINCT MAX ( t3.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"玛丽·克莱因\";"
    },
    {
        "db_id": "apartment_rentals",
        "question": "显示“王刚”管理的所有建筑物的地址和电话。",
        "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"王刚\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>\t =  \"王刚\""
    },
    {
        "db_id": "e_government",
        "question": "按姓氏的字母顺序列出每个人的名字、中间名和姓氏。",
        "query": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM individuals ORDER BY <unk>"
    },
    {
        "db_id": "product_catalog",
        "question": "所有产品的平均价格和最低价格（欧元）是多少？",
        "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "mask_query": "SELECT avg(<unk>) ,  min(<unk>) FROM catalog_contents"
    },
    {
        "db_id": "flight_1",
        "question": "哪个出发地的航班最多？",
        "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM Flight GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bbc_channels",
        "question": "返回最近开始的节目的标题。",
        "query": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1",
        "mask_query": "SELECT title FROM <mask> ORDER BY start_year DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "列出与布兰登拥有的文档相关的所有文档所有者。",
        "query": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
        "mask_query": "SELECT DISTINCT OWNER FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  'Braeden';"
    },
    {
        "db_id": "apartment_rentals",
        "question": "查找具有两个以上卧室的公寓的预订开始日期和结束日期。",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  2"
    },
    {
        "db_id": "car_road_race",
        "question": "两个或多个驾驶员使用的发动机类型是什么？",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "customers_and_orders",
        "question": "有多少客户有订单？",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Customer_orders"
    },
    {
        "db_id": "movie_2",
        "question": "关于未分级电影的所有信息是什么？",
        "query": "SELECT * FROM movies WHERE rating  =  'null'",
        "mask_query": "SELECT * FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "entertainment_awards",
        "question": "按字母顺序升序排列艺术品名称。",
        "query": "SELECT Name FROM artwork ORDER BY Name ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "election",
        "question": "显示具有至少两个记录的政党的名称。",
        "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "cinema",
        "question": "所有导演是谁？",
        "query": "SELECT DISTINCT directed_by FROM film",
        "mask_query": "SELECT DISTINCT directed_by FROM <mask>"
    },
    {
        "db_id": "allergy_1",
        "question": "找出对“牛奶”或“猫”过敏的学生的不同名字和城市。",
        "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"牛奶\" OR T2.Allergy  =  \"猫\"",
        "mask_query": "SELECT DISTINCT T1.fname ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.stuid  =  T2.stuid WHERE T2.<unk>  =  \"牛奶\" OR T2.<unk>  =  \"猫\""
    },
    {
        "db_id": "movie_1",
        "question": "最被评论最多次的电影的名字是什么？",
        "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "什么省边境靠近“贵州”？",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"贵州\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"贵州\" );"
    },
    {
        "db_id": "voter_1",
        "question": "不同的州和投票的开始时间是什么？",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "mask_query": "SELECT DISTINCT <unk> ,  <unk> FROM votes"
    },
    {
        "db_id": "imdb",
        "question": "“中国”有多少演员在“尖峰时刻”中扮演角色？",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"中国\" AND t3.title  =  \"尖峰时刻\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk>  ) FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"中国\" AND t3.<unk>  =  \"尖峰时刻\";"
    },
    {
        "db_id": "soccer_2",
        "question": "“江苏”省有10000多学生入学的大学的名字和招生号码是多少？",
        "query": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"江苏\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  >  10000 AND <unk> = \"江苏\""
    },
    {
        "db_id": "geo",
        "question": "有多少省的最高点高于中国首都最大的省会的最高点？",
        "query": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) );",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  >  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) ) ) );"
    },
    {
        "db_id": "college_2",
        "question": "以微分几何为预备课程的课程名称是什么？",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  '微分几何')",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN (SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '微分几何')"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "列出所有的结算单ID和结算单细节。",
        "query": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "mask_query": "SELECT STATEMENT_ID ,  statement_details FROM <mask>"
    },
    {
        "db_id": "aan_1",
        "question": "被引用最多的10篇论文是什么？每个论文被引用了多少次？",
        "query": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 10"
    },
    {
        "db_id": "product_catalog",
        "question": "级别在5到10之间的目录结构的名称和级别是什么？",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> BETWEEN 5 AND 10"
    },
    {
        "db_id": "architecture",
        "question": "建造过工厂的不同的建筑师的名字和国籍是什么？",
        "query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "farm",
        "question": "居住人数最多的城市的官方名称和状态是什么？",
        "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "列出“零点乐队”的专辑。",
        "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"零点乐队\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON  T1.<unk> = T2.<unk> WHERE T2.<unk> = \"零点乐队\";"
    },
    {
        "db_id": "e_commerce",
        "question": "列出女性顾客购买的所有不同的产品名称、价格和描述。",
        "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN Order_items AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk> WHERE T4.<unk>  =  'Female'"
    },
    {
        "db_id": "bbc_channels",
        "question": "请告诉我既有40岁以下导演又有60岁以上导演的频道名称。",
        "query": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id JOIN <mask> AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id JOIN <mask> AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60"
    },
    {
        "db_id": "scholar",
        "question": "“彼得·梅尔滕斯”在什么会议出版？",
        "query": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"彼得·梅尔滕斯\";",
        "mask_query": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM <mask> AS t4 JOIN <mask> AS t3 ON t4.venueid  =  t3.venueid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"彼得·梅尔滕斯\";"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示所有作者的姓名和相应的文档数。",
        "query": "SELECT author_name ,  count(*) FROM Documents GROUP BY author_name",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "对于每个文档，列出在该文档的流通史中出现的雇员人数、文档ID和员工数量。",
        "query": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",
        "mask_query": "SELECT <unk> ,  count(DISTINCT <unk>) FROM <mask> GROUP BY <unk>;"
    },
    {
        "db_id": "geo",
        "question": "最高点所在省的最长的河流是什么？",
        "query": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) ORDER BY t1.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "chinook_1",
        "question": "哪位艺术家的专辑最多？",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "人口密度最大的省有多少人居住？",
        "query": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "club_leader",
        "question": "显示2018年前加入俱乐部的俱乐部领导的姓名。",
        "query": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T1.<unk>  <  2018"
    },
    {
        "db_id": "flight_1",
        "question": "所有飞机的最小、平均和最大距离是多少？",
        "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "mask_query": "SELECT min(<unk>) ,  avg(<unk>) ,  max(<unk>) FROM Aircraft"
    },
    {
        "db_id": "scholar",
        "question": "“李东”在2016发表了什么？",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"李东\" AND t3.year  =  2016;",
        "mask_query": "SELECT DISTINCT t3.venueid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"李东\" AND t3.<unk>  =  2016;"
    },
    {
        "db_id": "aan_1",
        "question": "给出论文的标题，这篇论文引用的论文数量最多。",
        "query": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "video_game",
        "question": "请列出游戏的名字和平台名称。",
        "query": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "scholar",
        "question": "1995在“放射学期刊”上发表了什么论文？",
        "query": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"放射学期刊\" AND t2.year  =  1995;",
        "mask_query": "SELECT DISTINCT t2.paperid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"放射学期刊\" AND t2.<unk>  =  1995;"
    },
    {
        "db_id": "icfp_1",
        "question": "找到“周” “志华”所有论文的标题。",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"周\" AND t1.lname  =  \"志华\"",
        "mask_query": "SELECT t3.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.<unk>  =  \"周\" AND t1.<unk>  =  \"志华\""
    },
    {
        "db_id": "solvency_ii",
        "question": "展示产品价格高于4500和产品价格低于3000的产品型号代码。",
        "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  4500 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  3000"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "计算列出的角色总数。",
        "query": "SELECT count(*) FROM ROLES",
        "mask_query": "SELECT count(*) FROM ROLES"
    },
    {
        "db_id": "conference",
        "question": "所有来自美国员工的最高和最低年龄是多少？",
        "query": "SELECT max(age) ,  min(age) FROM staff",
        "mask_query": "SELECT max(age) ,  min(age) FROM <mask>"
    },
    {
        "db_id": "ship_1",
        "question": "哪种标志在船上使用最广？",
        "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "哪一个是不在“辽宁”最高的山峰",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"辽宁\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> != \"辽宁\" );"
    },
    {
        "db_id": "restaurant_1",
        "question": "“烤鸭”类型餐厅的描述是什么？",
        "query": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"烤鸭\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"烤鸭\";"
    },
    {
        "db_id": "music_4",
        "question": "什么是艺术家的著名头衔，他们不仅花了超过2周的卷顶部，而且花了不到2周的卷顶部？",
        "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  2 INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  2"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "显示名称为“客户评论”的文档的所有段落文本。",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"顾客评价\"",
        "mask_query": "SELECT T1.paragraph_text FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"顾客评价\""
    },
    {
        "db_id": "institution_sports",
        "question": "返回一个一个以上机构的年份，以及每个机构中创建的机构数。",
        "query": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "flight_4",
        "question": "最低海拔机场的名称，城市和国家是什么？",
        "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回那些在“VLDB”会议上有超过10篇论文的作者。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"VLDB\" GROUP BY t1.<unk> HAVING COUNT ( DISTINCT t4.<unk> )  >  10;"
    },
    {
        "db_id": "journal_committee",
        "question": "有多少编辑？",
        "query": "SELECT count(*) FROM editor",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "wedding",
        "question": "显示在2016年有婚礼的所有“加拿大”女性的名字。",
        "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  '女' AND T2.country  =  '加拿大'",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  '女' AND T2.country  =  '加拿大'"
    },
    {
        "db_id": "assets_maintenance",
        "question": "第一笔资产是什么时候收购的？",
        "query": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "baseball_1",
        "question": "统计每年进入名人堂的球员的数量。",
        "query": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>;"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "数据库中最大的OMIM值是多少？",
        "query": "SELECT max(OMIM) FROM enzyme",
        "mask_query": "SELECT max(<unk>) FROM <mask>"
    },
    {
        "db_id": "college_1",
        "question": "那些不教课的历史系教授的名字是什么？",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  '旧' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
        "mask_query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  '旧' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN <mask> AS T5 ON T4.emp_num  =  T5.prof_num"
    },
    {
        "db_id": "scholar",
        "question": "与NIPS中与“深度强化学习”相关的论文有多少？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"深度强化学习\" AND t4.venuename  =  \"nips\";",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"深度强化学习\" AND t4.venuename  =  \"nips\";"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "与每个停车罚款ID相关税的税源系统代码和主客户ID是什么？",
        "query": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "activity_1",
        "question": "参加至少一项活动的教职员工的名字和姓氏是什么？对于他们中的每一个人，也显示他们参加的活动的数量。",
        "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "mask_query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.<unk>"
    },
    {
        "db_id": "product_catalog",
        "question": "查找目录最多的目录出版商。",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM catalogs GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "找出每个月的提示数",
        "query": "SELECT COUNT ( DISTINCT text )  ,  MONTH FROM tip GROUP BY MONTH;",
        "mask_query": "SELECT COUNT ( DISTINCT <unk> )  ,  MONTH FROM <mask> GROUP BY MONTH;"
    },
    {
        "db_id": "college_2",
        "question": "找出每个建筑物所有房间的最大和平均容量。",
        "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
        "mask_query": "SELECT max(<unk>) ,  avg(<unk>) ,  <unk> FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "entertainment_awards",
        "question": "展示至少有两项艺术品提名的艺术节的名称和标识。",
        "query": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> GROUP BY T1.<unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出所有可以“步行”或“公共汽车”访问的市场的细节。",
        "query": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"步行\" OR  T2.How_to_Get_There  =  \"公共汽车\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"步行\" OR  T2.<unk>  =  \"公共汽车\""
    },
    {
        "db_id": "tracking_orders",
        "question": "发票号码是10的订单的邮寄日期是什么？",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "mask_query": "SELECT T1.<unk> FROM orders AS T1 JOIN shipments AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = 10"
    },
    {
        "db_id": "bike_1",
        "question": "“厦门”通常有超过10辆可用自行车的车站ID有哪些？",
        "query": "SELECT id FROM station WHERE city  =  \"厦门\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"厦门\" INTERSECT SELECT <unk> FROM <mask> GROUP BY <unk> HAVING avg(<unk>)  >  10"
    },
    {
        "db_id": "phone_1",
        "question": "列出“小米”生产但是其屏幕模式类型不是“文本”的电话的硬件型号名称。",
        "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"小米\" AND T1.Type != \"文本\";",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<mask> WHERE t2.<unk>  =  \"小米\" AND T1.<unk> != \"文本\";"
    },
    {
        "db_id": "department_store",
        "question": "该类型产品的平均价格高于所有产品平均价格的产品类型的代码是什么？",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "mask_query": "SELECT <unk> FROM products GROUP BY <unk> HAVING avg(<unk>)  >  (SELECT avg(<unk>) FROM products)"
    },
    {
        "db_id": "book_1",
        "question": "销售价格和购买价格之间的最大差价是多少？",
        "query": "SELECT max(saleprice - purchaseprice) FROM Book",
        "mask_query": "SELECT max(saleprice - purchaseprice) FROM <mask>"
    },
    {
        "db_id": "school_bus",
        "question": "显示学校的类型和每种类型的公共汽车数量。",
        "query": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
        "mask_query": "SELECT T2.type ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type"
    },
    {
        "db_id": "manufactory_1",
        "question": "计算制造商代码为2的所有产品的平均价格。",
        "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
        "mask_query": "SELECT avg(price) FROM products WHERE <unk>  =  2"
    },
    {
        "db_id": "restaurant_1",
        "question": "学生“李” “琳”在餐厅花了多长时间？",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"李\" AND Student.Lname = \"琳\";",
        "mask_query": "SELECT sum(<unk>) FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> WHERE <mask>.<unk> = \"李\" AND <mask>.Lname = \"琳\";"
    },
    {
        "db_id": "protein_institute",
        "question": "显示1990年以后成立的、类型为“私立”的机构的名称和地点。",
        "query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  '私立'",
        "mask_query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  '私立'"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "文档状态代码“工作”的描述是什么？",
        "query": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"工作\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"工作\";"
    },
    {
        "db_id": "sakila_1",
        "question": "哪些员工处理的付款次数最少？列出全名和ID。",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "question": "哪篇论文发表在“中国”的机构中，而且以“旭东”为第二作者？",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"中国\" AND t2.authorder  =  2 AND t1.lname  =  \"旭东\"",
        "mask_query": "SELECT t3.<unk> FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.<unk>  =  \"中国\" AND t2.authorder  =  2 AND t1.<unk>  =  \"旭东\""
    },
    {
        "db_id": "book_review",
        "question": "书的标题和评分是多少？",
        "query": "SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "solvency_ii",
        "question": "显示具有至少两个产品的产品类型代码。",
        "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "city_record",
        "question": "找出在不同的比赛中比赛的数量。",
        "query": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
        "mask_query": "SELECT count(*) ,  <unk> FROM MATCH GROUP BY <unk>"
    },
    {
        "db_id": "geo",
        "question": "与人口最多的省接壤的最大的省是什么？",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) ) ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) ) );"
    },
    {
        "db_id": "scholar",
        "question": "谁在“机器学习”方向中写了最多的论文？",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"机器学习\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN <mask> AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid JOIN <mask> AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"机器学习\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;"
    },
    {
        "db_id": "device",
        "question": "显示开业年份迟于2012年或开业年份早于2008年的商店共有的地点。",
        "query": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE <unk>  >  2012 INTERSECT SELECT LOCATION FROM <mask> WHERE <unk>  <  2008"
    },
    {
        "db_id": "store_1",
        "question": "曲子“逆战”有多长？",
        "query": "SELECT milliseconds FROM tracks WHERE name = \"逆战\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"逆战\";"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪个部件故障需要最多的技能来修复？列出零件ID和名称。",
        "query": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "debate",
        "question": "显示那些在辩论中持肯定态度的人的名字，参加辩论的人数超过200人。",
        "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  >  200"
    },
    {
        "db_id": "movie_1",
        "question": "找出'李安'导演的所有电影的标题。",
        "query": "SELECT title FROM Movie WHERE director = '李安'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = '李安'"
    },
    {
        "db_id": "sakila_1",
        "question": "租金为0.99而且存货少于3的电影的片名和id是什么？",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk>  =  0.99 INTERSECT SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  <  3"
    },
    {
        "db_id": "store_product",
        "question": "找出在所有产品中最常用的最大页面大小。",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "culture_company",
        "question": "返回出版最多图书的出版商。",
        "query": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT publisher FROM <mask> GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "city_record",
        "question": "一月“上海”城市的气温是多少？",
        "query": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"上海\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.city_id = T2.city_id WHERE T1.<mask> = \"上海\""
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示类型代码为“PUR”且份额数大于50的交易的最小数量。",
        "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50",
        "mask_query": "SELECT min(<unk>) FROM TRANSACTIONS WHERE <unk>  =  \"PUR\" AND <unk>  >  50"
    },
    {
        "db_id": "academic",
        "question": "返回“PVLDB”的主页。",
        "query": "SELECT homepage FROM journal WHERE name  =  \"PVLDB\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "manufacturer",
        "question": "请告诉我工厂少于10家或商店多于10家的制造商的名称和开业年份。",
        "query": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10",
        "mask_query": "SELECT name ,  open_year FROM <mask> WHERE num_of_shops  >  10 OR <unk>  <  10"
    },
    {
        "db_id": "driving_school",
        "question": "“海南”省有多少员工？",
        "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"海南\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"海南\";"
    },
    {
        "db_id": "music_2",
        "question": "最靠“后台”位置的音乐家的姓氏是什么？",
        "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"后台\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.lastname FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"后台\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "question": "从订单总数中找出前10名客户。列出客户的姓氏和总订单数量。",
        "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 10;"
    },
    {
        "db_id": "college_3",
        "question": "有辅修学生最多的专业叫什么名字？",
        "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_company",
        "question": "最大的集团股权的公司是什么？",
        "query": "SELECT max(group_equity_shareholding) FROM operate_company",
        "mask_query": "SELECT max(group_equity_shareholding) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”发表的论文中包含最多数量的关键字。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"李政道\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"李政道\" GROUP BY t1.<mask> ORDER BY COUNT ( DISTINCT t3.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "movie_1",
        "question": "按照评论者名字，片名，最后是星级数目的顺序排序，返回评论者的名字，电影片名，星级，和评价日期。",
        "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk> ,  T2.<unk> ,  T1.<unk>"
    },
    {
        "db_id": "school_player",
        "question": "学校平均入学数是多少？",
        "query": "SELECT avg(Enrollment) FROM school",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "coffee_shop",
        "question": "找出得分低于平均分的商店的ID和地址。",
        "query": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)",
        "mask_query": "SELECT shop_id ,  address FROM <mask> WHERE score  <  (SELECT avg(score) FROM <mask>)"
    },
    {
        "db_id": "academic",
        "question": "把2000年以前由“李政道”和“杨振宁”撰写的论文数量返回。",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"李政道\" AND t1.name  =  \"杨振宁\" AND t5.year  <  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t5.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<unk>  =  \"杨振宁\" AND t5.<unk>  <  2000;"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "返回具有卡号“4560596484842”的客户的全名和电话。",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> ,  T2.<unk> FROM Customers_cards AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"4560596484842\""
    },
    {
        "db_id": "boat_1",
        "question": "每艘已经有超过一个预订的船有多少个预订？",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "找到永久居住在“海地”或手机电话号码是“09700166582”的学生的名字。",
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  '海地' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '海地' UNION SELECT <unk> FROM <mask> WHERE <unk>  =  '09700166582'"
    },
    {
        "db_id": "body_builder",
        "question": "有多少不同的出生地？",
        "query": "SELECT count(DISTINCT Birth_Place) FROM people",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "restaurant_bills",
        "question": "计算客户数量。",
        "query": "SELECT count(*) FROM customer",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "online_exams",
        "question": "列出性别为“F”或“M”的学生的姓氏。",
        "query": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"F\" OR <unk>  =  \"M\""
    },
    {
        "db_id": "roller_coaster",
        "question": "请展示最普遍的过山车的状态。",
        "query": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "cinema",
        "question": "显示容量高于平均水平的电影院的名称和位置。",
        "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
        "mask_query": "SELECT name ,  LOCATION FROM <mask> WHERE capacity  >  (SELECT avg(capacity) FROM <mask>)"
    },
    {
        "db_id": "school_bus",
        "question": "展示有两所学校的学校类型。",
        "query": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
        "mask_query": "SELECT TYPE FROM <mask> GROUP BY TYPE HAVING count(*)  =  2"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪一类部件的故障数量最少？列出部件名称。",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "tv_shows",
        "question": "有多少台无线电？",
        "query": "SELECT count(*) FROM radio",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "在“贵阳”位置起作用的酶有关的产物、染色体和卟啉是什么？",
        "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  '贵阳'",
        "mask_query": "SELECT product ,  chromosome ,  porphyria FROM <mask> WHERE LOCATION  =  '贵阳'"
    },
    {
        "db_id": "car_1",
        "question": "美国生产了多少款车？",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  '美国';",
        "mask_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.<unk>  =  T2.<unk> JOIN COUNTRIES AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '美国';"
    },
    {
        "db_id": "aan_1",
        "question": "有多少作者没有发表一篇引文超过50条的论文？",
        "query": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE Author_id NOT IN ( SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(DISTINCT T1.<unk>)  >  50)"
    },
    {
        "db_id": "sports_competition",
        "question": "哪些位置既有得分超过20又有得分低于10的球员 ？",
        "query": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10",
        "mask_query": "SELECT POSITION FROM <mask> WHERE <unk>  >  20 INTERSECT SELECT POSITION FROM <mask> WHERE <unk>  <  10"
    },
    {
        "db_id": "perpetrator",
        "question": "显示身高最高犯罪者的犯罪日期。",
        "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "game_1",
        "question": "显示有奖学金且主修编号是600课程的学生ID 。",
        "query": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  \"Y\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE major  =  600 INTERSECT SELECT <unk> FROM Sportsinfo WHERE onscholarship  =  \"Y\""
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示交易数量前3多的投资人的ID和投资者细节。",
        "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "db_id": "journal_committee",
        "question": "列出超过25岁的编辑的名字。",
        "query": "SELECT Name FROM editor WHERE Age  >  25",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  25"
    },
    {
        "db_id": "scholar",
        "question": "“卢克·泽特莫耶尔”每一年有多少引用？",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"卢克·泽特莫耶尔\" GROUP BY t3.year;",
        "mask_query": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.<unk> FROM <mask> AS t3 JOIN <mask> AS t4 ON t3.paperid  =  t4.citedpaperid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"卢克·泽特莫耶尔\" GROUP BY t3.<unk>;"
    },
    {
        "db_id": "academic",
        "question": "返回所有的组织的名字。",
        "query": "SELECT name FROM organization;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "geo",
        "question": "省会是“郑州”的省的面积是多少？",
        "query": "SELECT area FROM state WHERE capital  =  \"郑州\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"郑州\";"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "返回文档中最常用的模板类型的代码。",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.template_type_code FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "wine_1",
        "question": "分数高于90的葡萄酒名称是什么？",
        "query": "SELECT Name FROM WINE WHERE score  >  90",
        "mask_query": "SELECT <unk> FROM WINE WHERE score  >  90"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "集合子集的名称是什么？",
        "query": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "scholar",
        "question": "“米莱拉·拉帕塔”最近的5篇论文是什么？",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"米莱拉·拉帕塔\" ORDER BY t3.year DESC LIMIT 5;",
        "mask_query": "SELECT DISTINCT t3.paperid  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"米莱拉·拉帕塔\" ORDER BY t3.<unk> DESC LIMIT 5;"
    },
    {
        "db_id": "geo",
        "question": "人口密度最大的省的省会是什么？",
        "query": "SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "music_2",
        "question": "声乐有那些不同的类型？",
        "query": "SELECT DISTINCT TYPE FROM vocals",
        "mask_query": "SELECT DISTINCT TYPE FROM vocals"
    },
    {
        "db_id": "movie_1",
        "question": "有多少评论者？",
        "query": "SELECT count(*) FROM Reviewer",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "flight_1",
        "question": "显示最大距离的飞机的ID和名称。",
        "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM Aircraft ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "sing_contest",
        "question": "在音质或节奏获得5分的参与者的id和姓名是什么？",
        "query": "SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> WHERE T2.<unk>  =  5 OR T2.<unk>  =  5"
    },
    {
        "db_id": "restaurant_1",
        "question": "给我看看所有的餐馆。",
        "query": "SELECT ResName FROM Restaurant;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "wedding",
        "question": "显示所有为30岁以上的人举行婚礼的教堂名字。",
        "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30",
        "mask_query": "SELECT T4.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.male_id  =  T2.people_id JOIN <mask> AS T3 ON T1.female_id  =  T3.people_id JOIN <mask> AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30"
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”中的每年的论文总引用。",
        "query": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;",
        "mask_query": "SELECT t2.<unk>  ,  SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" GROUP BY t2.<unk>;"
    },
    {
        "db_id": "tvshow",
        "question": "连续剧“潜伏”的内容是什么？",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"潜伏\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"潜伏\";"
    },
    {
        "db_id": "voter_2",
        "question": "返回拥有最多学生数量的城市代码。",
        "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM STUDENT GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“埃里克·克拉甘”的在“Automatica”会议上发表的“液体”相关的论文叫什么名字？",
        "query": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"%埃里克·克拉甘%\" AND t3.keyphrasename  =  \"液体\" AND t6.venuename  =  \"Automatica\";",
        "mask_query": "SELECT DISTINCT t2.<unk> FROM paperkeyphrase AS t5 JOIN <mask> AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t5.paperid JOIN <mask> AS t2 ON t4.paperid  =  t2.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid JOIN <mask> AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"%埃里克·克拉甘%\" AND t3.keyphrasename  =  \"液体\" AND t6.venuename  =  \"Automatica\";"
    },
    {
        "db_id": "mountain_photos",
        "question": "展示那些没有被“尼康”品牌的镜头拍摄的山脉的名字和突出度。",
        "query": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  '尼康'",
        "mask_query": "SELECT <unk> ,  prominence FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.prominence FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '尼康'"
    },
    {
        "db_id": "election_representative",
        "question": "选举的最低和最高票数是多少？",
        "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
        "mask_query": "SELECT min(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "store_product",
        "question": "找出面积大于平均城市面积的区域的总人口。",
        "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
        "mask_query": "SELECT sum(city_population) FROM <mask> WHERE city_area  >  (SELECT avg(city_area) FROM <mask>)"
    },
    {
        "db_id": "swimming",
        "question": "找出具有最大容量的体育场名称。",
        "query": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY capacity DESC LIMIT 1"
    },
    {
        "db_id": "customer_deliveries",
        "question": "找到那些不住在“浙江”州的客户的名字。",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  '浙江'",
        "mask_query": "SELECT <unk> FROM customers EXCEPT SELECT t1.<unk> FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.<unk>  =  t2.<unk> JOIN addresses AS t3 ON t2.<unk>  =  t3.<unk> WHERE t3.<unk>  =  '浙江'"
    },
    {
        "db_id": "pilot_record",
        "question": "有多少飞行员？",
        "query": "SELECT count(*) FROM pilot",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "ship_1",
        "question": "把船长的姓名按年龄从老到年轻分类。",
        "query": "SELECT name FROM captain ORDER BY age DESC",
        "mask_query": "SELECT name FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "school_bus",
        "question": "显示除了超过40岁以上的司机的所有家乡城市。",
        "query": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40",
        "mask_query": "SELECT home_city FROM <mask> EXCEPT SELECT home_city FROM <mask> WHERE age  >  40"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "作家艾尔克鲁克写了多少文件？",
        "query": "SELECT count(*) FROM Documents WHERE author_name  =  \"Era Kerluke\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  \"Era Kerluke\""
    },
    {
        "db_id": "journal_committee",
        "question": "有一个工作类型是“照片”的编辑所属的期刊的平均销量是多少？",
        "query": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  '照片'",
        "mask_query": "SELECT avg(T1.sales) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  '照片'"
    },
    {
        "db_id": "body_builder",
        "question": "按总分降序排列，健美运动员的名字是什么？",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T1.<unk> DESC"
    },
    {
        "db_id": "epinions_1",
        "question": "对于每个用户，找到他们的名字和他们写的评论的数量。",
        "query": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "baseball_1",
        "question": "找出2014年平均出勤率最高的团队的id和级别。",
        "query": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  2014 GROUP BY T1.<unk> ORDER BY avg(T1.<unk>) DESC LIMIT 1;"
    },
    {
        "db_id": "culture_company",
        "question": "1999年导演相应电影的所有公司名称是什么？",
        "query": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999",
        "mask_query": "SELECT T2.company_name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.year  =  1999"
    },
    {
        "db_id": "browser_web",
        "question": "1998年以后与加速器“代理服务器”兼容的浏览器叫什么名字？",
        "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  '代理服务器' AND T2.compatible_since_year  >  1998",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN web_client_accelerator AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  '代理服务器' AND T2.<unk>  >  1998"
    },
    {
        "db_id": "pilot_1",
        "question": "返回驾驶单翼飞机且年龄在35岁以上，或驾驶F-14战斗机且年龄在30岁以下的飞行员的姓名和年龄。",
        "query": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
        "mask_query": "SELECT <unk> ,  <unk> FROM pilotskills WHERE <unk>  =  'Piper Cub' AND <unk>  >  35 UNION SELECT <unk> ,  <unk> FROM pilotskills WHERE <unk>  =  'F-14 Fighter' AND <unk>  <  30"
    },
    {
        "db_id": "tv_shows",
        "question": "列出隶属关系不是“ABC”的城市频道的电台名称。",
        "query": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> != \"ABC\""
    },
    {
        "db_id": "student_1",
        "question": "查找111号房学生的姓氏。",
        "query": "SELECT lastname FROM list WHERE classroom  =  111",
        "mask_query": "SELECT lastname FROM <mask> WHERE classroom  =  111"
    },
    {
        "db_id": "decoration_competition",
        "question": "显示会员的姓名和他们入学大学名称。",
        "query": "SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "显示帐户名称、ID和每个帐户的交易数量。",
        "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> ,  count(*) FROM Financial_transactions AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出既订购了“拿铁”产品又订购了“美式咖啡”产品的顾客的名字",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  \"拿铁\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  \"美式咖啡\"",
        "mask_query": "SELECT t1.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> JOIN order_items AS t3 ON t2.<unk>  =  t3.<unk> JOIN products AS t4 ON t3.<unk>  =  t4.<unk> WHERE t4.<unk>  =  \"拿铁\" INTERSECT SELECT t1.<unk> FROM customers AS t1 JOIN customer_orders AS t2 ON t1.<unk>  =  t2.<unk> JOIN order_items AS t3 ON t2.<unk>  =  t3.<unk> JOIN products AS t4 ON t3.<unk>  =  t4.<unk> WHERE t4.<unk>  =  \"美式咖啡\""
    },
    {
        "db_id": "book_2",
        "question": "按价格降序排列的出版物日期是什么？",
        "query": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "music_2",
        "question": "歌曲“红日”中使用的声乐类型是什么？",
        "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"红日\"",
        "mask_query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"红日\""
    },
    {
        "db_id": "station_weather",
        "question": "找到路线经过最多火车站的列车的名称。",
        "query": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "“米雪”在2014年“3月”写了多少评论？",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"3月\" AND t1.year  =  2014 AND t2.name  =  \"米雪\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"3月\" AND t1.<unk>  =  2014 AND t2.<unk>  =  \"米雪\";"
    },
    {
        "db_id": "scholar",
        "question": "“神经科学”的会议是什么？",
        "query": "SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"神经科学\";",
        "mask_query": "SELECT DISTINCT venueid FROM <mask> WHERE venuename  =  \"神经科学\";"
    },
    {
        "db_id": "vehicle_rent",
        "question": "显示所有车型为2013或2014年的车辆的名称、动力系统类型和年度燃油成本。",
        "query": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
        "mask_query": "SELECT <unk> ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014"
    },
    {
        "db_id": "school_finance",
        "question": "按照投资预算额和预算总额的百分比排序，列出预算总额超过6000所或在2003年之前成立的学校的名称、IHSAA足球班和吉祥物。",
        "query": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM school AS T1 JOIN <mask> AS T2 ON T1.school_id  =  T2.school_id WHERE <unk>  >  6000 OR YEAR  <  2003 ORDER BY T2.<unk> ,  T2.<unk>"
    },
    {
        "db_id": "car_1",
        "question": "有多少国家存在？",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "mask_query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "db_id": "bike_racing",
        "question": "来自“俄罗斯”或“英国”自行车手拥有的自行车有哪些不同的产品名称？",
        "query": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
        "mask_query": "SELECT DISTINCT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  =  'Russia' OR T1.<unk>  =  'Great Britain'"
    },
    {
        "db_id": "twitter_1",
        "question": "查找发了不到两次推特的用户的名称和ID。",
        "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING count(*)  <  2"
    },
    {
        "db_id": "imdb",
        "question": "找出“韩国”演员在“陆小凤”电影中扮演的角色",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"韩国\" AND t3.title  =  \"陆小凤\";",
        "mask_query": "SELECT t1.<unk> FROM CAST AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"韩国\" AND t3.<unk>  =  \"陆小凤\";"
    },
    {
        "db_id": "hospital_1",
        "question": "找出所有医师的姓名及其主要附属部门的名称。",
        "query": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "mask_query": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.<unk>  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.<unk> WHERE T2.<unk>  =  1"
    },
    {
        "db_id": "imdb",
        "question": "电影“霸王别姬”是哪一年的？",
        "query": "SELECT release_year FROM movie WHERE title  =  \"霸王别姬\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"霸王别姬\";"
    },
    {
        "db_id": "driving_school",
        "question": "“取消”的课有多少？",
        "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"取消\";",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = \"取消\";"
    },
    {
        "db_id": "hospital_1",
        "question": "找出雇员最少的部门的负责人的姓名和职位。",
        "query": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
        "mask_query": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.<unk> GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "列出所有停车罚款的市政税ID和相关的cmi。",
        "query": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",
        "mask_query": "SELECT <unk> ,  <unk> FROM parking_fines"
    },
    {
        "db_id": "products_for_hire",
        "question": "好客户和坏客户拥有优惠券的优惠券金额是多少？",
        "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  '良好' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  '差'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN customers AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '良好' INTERSECT SELECT T1.<unk> FROM <mask> AS T1 JOIN customers AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '差'"
    },
    {
        "db_id": "museum_visit",
        "question": "被参观次数最多的博物馆的ID和名称是什么时候？",
        "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.<unk> ,  t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回所有的关键词。",
        "query": "SELECT keyword FROM keyword;",
        "mask_query": "SELECT <mask> FROM <mask>;"
    },
    {
        "db_id": "wrestler",
        "question": "列出没有被淘汰的摔跤运动员的名字。",
        "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM elimination)"
    },
    {
        "db_id": "store_1",
        "question": "“奇幻旅程”这首歌所属的专辑是什么？",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"奇幻旅程\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T2.<unk> = \"奇幻旅程\";"
    },
    {
        "db_id": "network_2",
        "question": "按年龄顺序排序的每个人的名字是什么？",
        "query": "SELECT name FROM Person ORDER BY age DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "最多数产品的颜色描述是什么？",
        "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t2.<unk> FROM products AS t1 JOIN ref_colors AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "“扎卡里·塔洛克”的论文引用统计",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"扎卡里·塔洛克\";",
        "mask_query": "SELECT DISTINCT t3.paperid  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"扎卡里·塔洛克\";"
    },
    {
        "db_id": "restaurant_bills",
        "question": "顾客的国籍和信用卡是什么？",
        "query": "SELECT Nationality ,  Card_Credit FROM customer",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "把在“PVLDB”有论文的作者的数量返回。",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "school_finance",
        "question": "列出没有捐赠的学校的名字。",
        "query": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)",
        "mask_query": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM <mask>)"
    },
    {
        "db_id": "restaurant_1",
        "question": "所有年龄在18岁以上，主修600的女学生。列出学生的名和姓氏。",
        "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = '女';",
        "mask_query": "SELECT <unk> , Lname FROM <mask> WHERE <unk>  >  18 AND <unk> != 600 AND <unk> = '女';"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "返回帐户最少的客户的ID和全名。",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> ,  T2.<unk> FROM Customers_cards AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "performance_attendance",
        "question": "显示有超过2000人参与的演出和不到1000人参与的演出的地点。",
        "query": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE <unk>  >  2000 INTERSECT SELECT LOCATION FROM <mask> WHERE <unk>  <  1000"
    },
    {
        "db_id": "musical",
        "question": "谁被提名过“金鸡奖”和“金马奖”？",
        "query": "SELECT Nominee FROM musical WHERE Award  =  \"金鸡奖\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"金马奖\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"金鸡奖\" INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  =  \"金马奖\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "总共有多少个评估记录？",
        "query": "SELECT count(*) FROM ASSESSMENT_NOTES",
        "mask_query": "SELECT count(*) FROM ASSESSMENT_NOTES"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "在任何文档中都没被使用的模板的ID是什么？",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "mask_query": "SELECT template_id FROM <mask> EXCEPT SELECT template_id FROM <mask>"
    },
    {
        "db_id": "insurance_policies",
        "question": "查找索赔的ID、为索赔进行的结算次数以及最近的结算日期。",
        "query": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  T1.claim_id FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_rentals",
        "question": "只进行过一次搜索的用户的ID是什么？他们的类别代码是什么？",
        "query": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  =  1;"
    },
    {
        "db_id": "academic",
        "question": "返回2000年后在“VLDB”会议发表的论文的数量。",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" AND t2.<unk>  >  2000;"
    },
    {
        "db_id": "music_4",
        "question": "列出所有音乐艺术家的年龄。",
        "query": "SELECT Age FROM artist",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "browser_web",
        "question": "有多少个加速器与列出的浏览器不兼容？",
        "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
        "mask_query": "SELECT count(*) FROM web_client_accelerator WHERE <unk> NOT IN ( SELECT <unk> FROM <mask> );"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "返回具有“黄色”作为颜色描述的产品的名称及其通常买卖的价格。",
        "query": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"黄色\"",
        "mask_query": "SELECT t1.<unk> ,  t1.<unk> ,  t1.<unk> FROM products AS t1 JOIN ref_colors AS t2 ON t1.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"黄色\""
    },
    {
        "db_id": "entertainment_awards",
        "question": "显示2008或2010年的观众数量。",
        "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR  =  2008 OR YEAR  =  2010"
    },
    {
        "db_id": "entertainment_awards",
        "question": "展示最近三个艺术节的名称。",
        "query": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY YEAR DESC LIMIT 3"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "总共有多少段落？",
        "query": "SELECT count(*) FROM Paragraphs",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "car_1",
        "question": "对于每个大洲，列出它的ID、名字和它有多少个国家？",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>;"
    },
    {
        "db_id": "club_1",
        "question": "所有学生的名字是什么？",
        "query": "SELECT DISTINCT fname FROM student",
        "mask_query": "SELECT DISTINCT fname FROM student"
    },
    {
        "db_id": "battle_death",
        "question": "列出每一场战斗的名称、日期和结果。",
        "query": "SELECT name ,  date FROM battle",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "station_weather",
        "question": "找出至少有1辆火车出发的起点。",
        "query": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "college_1",
        "question": "找出每个系的所有学生的最大，平均和最小gpa。",
        "query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
        "mask_query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code"
    },
    {
        "db_id": "restaurants",
        "question": "“深圳”有多少“日本料理”？",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t1.name  =  \"日本料理\";",
        "mask_query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"深圳\" AND t1.name  =  \"日本料理\";"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "找到最近开始的保险单的客户。",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "mask_query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "有多少地址包含邮政编码“197”？",
        "query": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"",
        "mask_query": "SELECT count(*) FROM ADDRESSES WHERE <unk>  =  \"197\""
    },
    {
        "db_id": "imdb",
        "question": "通过“李安”导演的最新电影的名字和预算",
        "query": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"李安\" ORDER BY t3.release_year DESC LIMIT 1;",
        "mask_query": "SELECT t3.<unk>  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李安\" ORDER BY t3.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "restaurants",
        "question": "“昆山”有多少“鲁”餐厅？",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"昆山\" AND t1.food_type  =  \"鲁\";",
        "mask_query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"昆山\" AND t1.food_type  =  \"鲁\";"
    },
    {
        "db_id": "hr_1",
        "question": "对于工资高于最低限度而且低于2500的员工，他们的所有信息是什么？",
        "query": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "mask_query": "SELECT * FROM <mask> WHERE salary BETWEEN (SELECT MIN(salary) FROM <mask>) AND 2500"
    },
    {
        "db_id": "bike_racing",
        "question": "骑自行车的人有多少不同程度的热度？",
        "query": "SELECT count(DISTINCT heat) FROM cyclist",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "flight_2",
        "question": "最多航班数的机场代码是多少？",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.<unk>  =  T2.<unk> OR T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "question": "找出所有包含最早购买日期或价格在10英镑以上商品的收据。",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT <unk> FROM <mask> WHERE date  =  (SELECT date FROM <mask> ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "question": "名为“最佳”的集合所在的集合子集是什么？",
        "query": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk> =  T3.<unk> WHERE T3.<unk> = \"Best\";"
    },
    {
        "db_id": "match_season",
        "question": "来自“浙江大学”或“武汉大学”学院的球员有什么不同的位置？",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"浙江大学\" OR College  =  \"武汉大学\"",
        "mask_query": "SELECT DISTINCT POSITION FROM <mask> WHERE <unk>  =  \"浙江大学\" OR <unk>  =  \"武汉大学\""
    },
    {
        "db_id": "perpetrator",
        "question": "显示那些既有50多人受伤的犯罪者，又有少于20人受伤的犯罪者所在的国家。",
        "query": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  50 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  20"
    },
    {
        "db_id": "hospital_1",
        "question": "找出执行手术最昂贵的医生。",
        "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "mask_query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回“中国北方”的所有组织。",
        "query": "SELECT name FROM organization WHERE continent  =  \"中国北方\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"中国北方\";"
    },
    {
        "db_id": "architecture",
        "question": "“长江大桥”或“赵州桥”的位置是什么？",
        "query": "SELECT LOCATION FROM bridge WHERE name  =  \"长江大桥\" OR name  =  \"赵州桥\"",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE <unk>  =  \"长江大桥\" OR <unk>  =  \"赵州桥\""
    },
    {
        "db_id": "soccer_2",
        "question": "从名字字母是“东”开始试训球员的大学是那些？",
        "query": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE '东'",
        "mask_query": "SELECT T1.<unk> FROM  tryout AS T1 JOIN player AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> LIKE '东'"
    },
    {
        "db_id": "student_1",
        "question": "统计一下“林”“小华”老师教学生的人数。",
        "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"林\" AND T2.lastname  =  \"小华\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"林\" AND T2.lastname  =  \"小华\""
    },
    {
        "db_id": "yelp",
        "question": "把“米雪”写的提示的数量。",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"米雪\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"米雪\";"
    },
    {
        "db_id": "dorm_1",
        "question": "每个宿舍的平均年龄是多少，每个宿舍的名字是什么？",
        "query": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name",
        "mask_query": "SELECT avg(T1.age) ,  T3.<unk> FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> JOIN dorm AS T3 ON T3.<unk>  =  T2.<unk> GROUP BY T3.<unk>"
    },
    {
        "db_id": "warehouse_1",
        "question": "查找每个仓库中不同类型的存储物的数量。",
        "query": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
        "mask_query": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "body_builder",
        "question": "健美运动员的平均抓举分数是多少？",
        "query": "SELECT avg(Snatch) FROM body_builder",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回“北京理工大学”在“数据库”领域的研究人员人数。",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"数据库\" AND t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN DOMAIN AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"数据库\" AND t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "music_2",
        "question": "所有的标签是什么？",
        "query": "SELECT DISTINCT label FROM Albums",
        "mask_query": "SELECT DISTINCT label FROM <mask>"
    },
    {
        "db_id": "soccer_3",
        "question": "请出示最常见的俱乐部制造商。",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "question": "按人口降序列出城市的官方名称。",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "居民的日期有什么不同？",
        "query": "SELECT DISTINCT date_moved_in FROM residents",
        "mask_query": "SELECT DISTINCT <unk> FROM residents"
    },
    {
        "db_id": "voter_1",
        "question": "在所有得票的参赛者中，得票最少的参赛者的号码和名字是什么？",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> , T1.<unk> FROM contestants AS T1 JOIN votes AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "sing_contest",
        "question": "每种不同语言的歌曲的平均节奏得分是多少？",
        "query": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language",
        "mask_query": "SELECT avg(T2.<unk>) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "hr_1",
        "question": "显示所有和“明明”在同一个部门工作的员工的姓名（名字和姓氏）以及聘用日期。",
        "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"明明\")",
        "mask_query": "SELECT first_name ,  last_name ,  hire_date FROM <mask> WHERE department_id  =  (SELECT department_id FROM <mask> WHERE first_name  =  \"明明\")"
    },
    {
        "db_id": "game_1",
        "question": "运动次数最多的学生的名字和姓氏是什么？",
        "query": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T2.Lname FROM Sportsinfo AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "专辑中32岁或以上的艺术家相关的歌曲是什么？",
        "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.age  >=  32"
    },
    {
        "db_id": "yelp",
        "question": "“云南”“餐馆”的数量是多少？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"云南\" AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"云南\" AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "restaurant_1",
        "question": "哪个学生去餐厅的次数最多？列出学生的名和姓氏。",
        "query": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT <mask>.<unk> , <mask>.Lname FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> GROUP BY <mask>.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "news_report",
        "question": "显示不同国籍和每个国家的记者人数。",
        "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "voter_1",
        "question": "最多选民投票的区号是多少？",
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM area_code_state AS T1 JOIN votes AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "question": "乔治·奥威尔写的书的平均售价是多少？",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "mask_query": "SELECT avg(saleprice) FROM <mask> AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN <mask> AS T3 ON T2.<mask>  =  T3.<unk> WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "yelp",
        "question": "查找所有评分为2.5的企业的评论",
        "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  2.5;"
    },
    {
        "db_id": "game_injury",
        "question": "每个体育场有多少场比赛？",
        "query": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id",
        "mask_query": "SELECT T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "loan_1",
        "question": "找到没有贷过款的客户的平均信用评分。",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE cust_id NOT IN (SELECT cust_id FROM <mask>)"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示具有至少两个产品的产品类型代码。",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> FROM products GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "交易的总份额是多少？",
        "query": "SELECT sum(share_count) FROM TRANSACTIONS",
        "mask_query": "SELECT sum(<unk>) FROM TRANSACTIONS"
    },
    {
        "db_id": "store_1",
        "question": "找出每种体裁中的曲目数量？",
        "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk>;"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议上“李政道”发表过的论文。",
        "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"VLDB\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "debate",
        "question": "列出没有在辩论的正面的人的名字。",
        "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE People_id NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "wedding",
        "question": "在2016年有多少婚礼？",
        "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
        "mask_query": "SELECT count(*) FROM <mask> WHERE YEAR  =  2016"
    },
    {
        "db_id": "academic",
        "question": "返回2010年后在“PVLDB”会议上发表过论文的作者。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"PVLDB\" AND t4.<unk>  >  2010;"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "找出那些颜色描述为“红色”并具有“缓慢”特征的产品的数量。",
        "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"红色\" AND t3.characteristic_name  =  \"缓慢\"",
        "mask_query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.<unk>  =  t2.<unk> JOIN CHARACTERISTICS AS t3 ON t2.<unk>  =  t3.<unk> JOIN ref_colors AS t4 ON t1.<unk>  =  t4.<unk> WHERE t4.<unk>  =  \"红色\" AND t3.<unk>  =  \"缓慢\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "找到具有“套房”类型代码的公寓的平均房间数。",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"套房\"",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  \"套房\""
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "订购数量最多的顾客的姓名和电话是什么？",
        "query": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",
        "mask_query": "SELECT  T1.<unk> ,  T1.<unk> FROM customers AS T1 JOIN customer_orders AS T2 ON T1.<unk>  =  T2.<unk> JOIN order_items AS T3 ON T3.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY sum(T3.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "yelp",
        "question": "“米雪”在2010评论了多少企业？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"米雪\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN USER AS t3 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  2010 AND t3.<unk>  =  \"米雪\";"
    },
    {
        "db_id": "college_3",
        "question": "在所有字母分数中找出所有字母等级的最大和最小等级点。",
        "query": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM GRADECONVERSION"
    },
    {
        "db_id": "match_season",
        "question": "有两个或两个以上球员的所有学院的名字是什么？",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "voter_2",
        "question": "学生中最大的年龄是多少？",
        "query": "SELECT max(Age) FROM STUDENT",
        "mask_query": "SELECT max(<unk>) FROM STUDENT"
    },
    {
        "db_id": "hospital_1",
        "question": "头衔包含“高级”一词的医生的名字是什么？",
        "query": "SELECT name FROM physician WHERE POSITION LIKE '高级'",
        "mask_query": "SELECT name FROM physician WHERE POSITION LIKE '高级'"
    },
    {
        "db_id": "movie_1",
        "question": "对于任何评价，如果评论者的名字与电影导演相同，那么返回评论者的名字、电影标题和星级数量。",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "mask_query": "SELECT DISTINCT T3.<unk> ,  T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示作者名字是艾迪森德内西克的其他详细信息。",
        "query": "SELECT other_details FROM Authors WHERE author_name  =  \"Addison Denesik\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Addison Denesik\""
    },
    {
        "db_id": "government_shift",
        "question": "查找所有服务的名称，这些服务都曾被客户“哈迪库驰”使用，并且在其中一次客户交互中被评为“差”。",
        "query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
        "mask_query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\""
    },
    {
        "db_id": "hr_1",
        "question": "每个部门的最低工资是多少？",
        "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
        "mask_query": "SELECT MIN(salary) ,  department_id FROM <mask> GROUP BY department_id"
    },
    {
        "db_id": "twitter_1",
        "question": "找出电子邮箱中中含有“superstar”或是“edu”的用户的名字。",
        "query": "SELECT name FROM user_profiles WHERE email LIKE '巨星' OR email LIKE 'qq'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '巨星' OR <unk> LIKE 'qq'"
    },
    {
        "db_id": "orchestra",
        "question": "按频率排列的管弦乐队的主要唱片格式是什么？",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "phone_market",
        "question": "显示具有内存小于32的手机和内存大于64的手机的运营商。",
        "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  <  32 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  >  64"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "与主客户详细信息“普通”相关的不同的交叉参考源系统代码是什么？",
        "query": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  '普通'",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  '普通'"
    },
    {
        "db_id": "entertainment_awards",
        "question": "列出有一个以上艺术节的年份。",
        "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1",
        "mask_query": "SELECT YEAR FROM <mask> GROUP BY YEAR HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "phone_1",
        "question": "列出屏幕模式类型为“图像”的电话的硬件型号名称和公司名称。",
        "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"图像\";",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<mask> WHERE T1.<unk>  =  \"图像\";"
    },
    {
        "db_id": "phone_1",
        "question": "列出所有在2002年推出或RAM大于32的手机的硬件型号名称和公司名称。",
        "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<mask> WHERE T1.<unk> = 2002 OR T1.<unk>  >  32;"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "什么是与利润和超额支付有关的税源系统代码？按利润ID排序列出代码和利润ID，。",
        "query": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk>"
    },
    {
        "db_id": "wta_1",
        "question": "最老的球员的名字和国家代码是什么？",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> LIMIT 1"
    },
    {
        "db_id": "protein_institute",
        "question": "展示机构数量最多的机构类型。",
        "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "inn_1",
        "question": "有多少种不同的床？",
        "query": "SELECT count(DISTINCT bedType) FROM Rooms;",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>;"
    },
    {
        "db_id": "railway",
        "question": "显示不同位置的铁路以及每个位置的相应铁路的数量。",
        "query": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION",
        "mask_query": "SELECT LOCATION ,  COUNT(*) FROM <mask> GROUP BY LOCATION"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "有交叉参考源代码“选举”或“税收”的选举登记处的登记ID是什么？",
        "query": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  '选举' OR T2.source_system_code  =  '税收'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '选举' OR T2.<unk>  =  '税收'"
    },
    {
        "db_id": "activity_1",
        "question": "找出参与最多数量的活动的教员的名字和姓氏。",
        "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT  T1.fname ,  T1.lname FROM <mask> AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_policies",
        "question": "顾客的具体细节是什么？",
        "query": "SELECT DISTINCT customer_details FROM Customers",
        "mask_query": "SELECT DISTINCT customer_details FROM <mask>"
    },
    {
        "db_id": "university_basketball",
        "question": "比赛中最高的ACC得分比是什么？",
        "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "mask_query": "SELECT acc_percent FROM <mask> ORDER BY acc_percent DESC LIMIT 1"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "展示细节是“维华”的访客参观的景点。",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"维华\"",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN VISITS AS T2 ON T1.<unk>  =  T2.<unk> JOIN VISITORS AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  =  \"维华\""
    },
    {
        "db_id": "e_commerce",
        "question": "列出所有不经常订购的性别对应的顾客的电子邮件地址、城市和县。",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "manufacturer",
        "question": "工厂的平均数量和1990年前开业的制造商的最大商店数量是多少？",
        "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990",
        "mask_query": "SELECT max(num_of_shops) ,  avg(<unk>) FROM <mask> WHERE open_year  <  1990"
    },
    {
        "db_id": "flight_company",
        "question": "哪个飞行员负责最多的航班？",
        "query": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT pilot FROM <mask> GROUP BY pilot ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "museum_visit",
        "question": "2008年前或2013年后开放的博物馆有多少？",
        "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "mask_query": "SELECT count(*) FROM <mask> WHERE open_year  >  2013 OR open_year  <  2008"
    },
    {
        "db_id": "train_station",
        "question": "火车站的位置是什么？",
        "query": "SELECT DISTINCT LOCATION FROM station",
        "mask_query": "SELECT DISTINCT LOCATION FROM <mask>"
    },
    {
        "db_id": "browser_web",
        "question": "市场占有率至少为5的主流浏览器有多少？",
        "query": "SELECT count(*) FROM browser WHERE market_share  >=  5",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  >=  5"
    },
    {
        "db_id": "music_4",
        "question": "返回年龄最大的艺术家的著名发行日期。",
        "query": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "flight_4",
        "question": "有两个机场的城市是什么？",
        "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  =  2"
    },
    {
        "db_id": "school_finance",
        "question": "所有学校的总共入学人数和平均入学人数是多少？",
        "query": "SELECT sum(enrollment) ,  avg(enrollment) FROM school",
        "mask_query": "SELECT sum(enrollment) ,  avg(enrollment) FROM school"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "在交易中使用了多少种不同的交易类型？",
        "query": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
        "mask_query": "SELECT COUNT(DISTINCT <unk>) FROM TRANSACTIONS"
    },
    {
        "db_id": "music_2",
        "question": "查找所有名字包含“这个”的歌曲。",
        "query": "SELECT title FROM songs WHERE title LIKE '这个'",
        "mask_query": "SELECT title FROM songs WHERE title LIKE '这个'"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议上的每一篇论文的引用。",
        "query": "SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\";"
    },
    {
        "db_id": "flight_company",
        "question": "经营多个航班的公司的ID和名称是什么？",
        "query": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS t2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >  1"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示每个客户地址历史的客户名称、客户地址城市、起始日期和送达日期。",
        "query": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "mask_query": "SELECT T2.<unk> ,  T3.<unk> ,  T1.<unk> ,  T1.<unk> FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.<unk>  =  T2.<unk> JOIN addresses AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "bike_1",
        "question": "对于每个站点，返回其经度和从该站点开始的路线的平均持续时间。",
        "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  avg(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "college_2",
        "question": "查找在2010年“春季”学期教一门课程的教师总数。",
        "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  '春季' AND YEAR  =  2010",
        "mask_query": "SELECT COUNT (DISTINCT <unk>) FROM <mask> WHERE <unk>  =  '春季' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "question": "教员姓名包含“成庆”的部门叫什么？",
        "query": "SELECT dept_name FROM instructor WHERE name LIKE '成庆'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '成庆'"
    },
    {
        "db_id": "dorm_1",
        "question": "找出那些生活在代号为“武汉”的女性（性别是“女性”）或者年龄在20岁以下的男性（性别是“男”）学生的姓氏。",
        "query": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  '武汉' UNION SELECT lname FROM student WHERE sex  =  '男' AND age  <  20",
        "mask_query": "SELECT lname FROM student WHERE sex  =  'F' AND <unk>  =  '武汉' UNION SELECT lname FROM student WHERE sex  =  '男' AND age  <  20"
    },
    {
        "db_id": "bike_1",
        "question": "哪些地区的最大露点总是低于70，这些地区的不同邮编是多少？",
        "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask> EXCEPT SELECT DISTINCT <unk> FROM <mask> WHERE <unk>  >=  70"
    },
    {
        "db_id": "school_finance",
        "question": "显示预算总额大于100或捐赠总额大于10的学校的名称。",
        "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "mask_query": "SELECT T2.school_name FROM <mask> AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN <mask> AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.<unk>)  >  10"
    },
    {
        "db_id": "college_1",
        "question": "找出每所院系数量少于5的学校不同院系的数量。",
        "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "mask_query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"
    },
    {
        "db_id": "game_injury",
        "question": "显示没有发生事故的体育场的名称、平均出勤率、总出勤率。",
        "query": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id",
        "mask_query": "SELECT <unk> ,  average_attendance ,  total_attendance FROM <mask> EXCEPT SELECT T2.<unk> ,  T2.average_attendance ,  T2.total_attendance FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "university_basketball",
        "question": "列出所有关于篮球比赛的信息。",
        "query": "SELECT * FROM basketball_match",
        "mask_query": "SELECT * FROM <mask>"
    },
    {
        "db_id": "phone_1",
        "question": "列出生产一个以上手机型号的公司的名称。",
        "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  1;"
    },
    {
        "db_id": "game_1",
        "question": "游戏的总数是多少？",
        "query": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "mask_query": "SELECT sum(gamesplayed) FROM Sportsinfo"
    },
    {
        "db_id": "club_1",
        "question": "有会员名“秦” “小明”的俱乐部的名字是什么？",
        "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"秦\" AND t3.lname  =  \"小明\"",
        "mask_query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"秦\" AND t3.lname  =  \"小明\""
    },
    {
        "db_id": "flight_4",
        "question": "对于航线数量最多的前10名航空公司，他们的名字是什么？",
        "query": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 10"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "通过建筑物类型查找所有房屋和订单的类型和细节。",
        "query": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type",
        "mask_query": "SELECT <unk> ,  <unk> FROM premises ORDER BY <unk>"
    },
    {
        "db_id": "music_2",
        "question": "“我们的歌”专辑里有多少歌曲？",
        "query": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"我们的歌\"",
        "mask_query": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"我们的歌\""
    },
    {
        "db_id": "railway",
        "question": "列出铁路的轮子和位置。",
        "query": "SELECT Wheels ,  LOCATION FROM railway",
        "mask_query": "SELECT <unk> ,  LOCATION FROM <mask>"
    },
    {
        "db_id": "workshop_paper",
        "question": "显示提交给一个以上研习会的作者。",
        "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "mask_query": "SELECT T2.<unk> FROM acceptance AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(DISTINCT T1.workshop_id)  >  1"
    },
    {
        "db_id": "pilot_1",
        "question": "计算35岁以下飞行员驾驶的B-52轰炸机数量。",
        "query": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
        "mask_query": "SELECT count(*) FROM pilotskills WHERE <unk>  <  35 AND <unk>  =  'B-52 Bomber'"
    },
    {
        "db_id": "aan_1",
        "question": "2009年哪位作者的论文最多？",
        "query": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T1.<unk>  =  2009 GROUP BY T2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "question": "找出所有箱子的平均值和总值。",
        "query": "SELECT avg(value) ,  sum(value) FROM boxes",
        "mask_query": "SELECT avg(value) ,  sum(value) FROM boxes"
    },
    {
        "db_id": "sakila_1",
        "question": "返回包含“删除场景”作为特色的电影的标题。",
        "query": "SELECT title FROM film WHERE special_features LIKE '删除场景'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE '删除场景'"
    },
    {
        "db_id": "hospital_1",
        "question": "员工数最少的部门的领导的员工id是什么？",
        "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
        "mask_query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
    },
    {
        "db_id": "company_employee",
        "question": "公司销售额最大的公司总部是什么？",
        "query": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "college_3",
        "question": "找出拥有最少会员人数的部门的名称。",
        "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "列出所有项目的ID和详细信息。",
        "query": "SELECT project_id ,  project_details FROM Projects",
        "mask_query": "SELECT project_id ,  project_details FROM <mask>"
    },
    {
        "db_id": "game_injury",
        "question": "列出所有比赛项目的赛季、主队、客场。",
        "query": "SELECT season ,  home_team ,  away_team FROM game",
        "mask_query": "SELECT season ,  home_team ,  away_team FROM <mask>"
    },
    {
        "db_id": "dorm_1",
        "question": "找出住在有“客厅”设施的宿舍的学生的名字和姓氏。",
        "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  '客厅')",
        "mask_query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk> IN (SELECT T3.<unk> FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.<unk>  =  T4.<unk> WHERE T4.<unk>  =  '客厅')"
    },
    {
        "db_id": "body_builder",
        "question": "按身高降序列出人的身高和体重。",
        "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "tracking_orders",
        "question": "查找属于“兰兰”客户的订单日期。",
        "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"兰兰\"",
        "mask_query": "SELECT T2.<unk> FROM customers AS T1 JOIN orders AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"兰兰\""
    },
    {
        "db_id": "geo",
        "question": "“四川”最高的山峰是什么高度？",
        "query": "SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name  =  \"四川\";",
        "mask_query": "SELECT MAX ( DISTINCT <unk> ) FROM <mask> WHERE <unk>  =  \"四川\";"
    },
    {
        "db_id": "yelp",
        "question": "“王岩”提示的总赞数是什么？",
        "query": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"王岩\";",
        "mask_query": "SELECT SUM ( t1.<unk> ) FROM USER AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"王岩\";"
    },
    {
        "db_id": "school_bus",
        "question": "显示组织和每个组织的司机数量。",
        "query": "SELECT party ,  count(*) FROM driver GROUP BY party",
        "mask_query": "SELECT party ,  count(*) FROM <mask> GROUP BY party"
    },
    {
        "db_id": "performance_attendance",
        "question": "参加者人数最多的表演日期是什么？",
        "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "question": "经过治疗的狗的平均年龄是多少？",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> )"
    },
    {
        "db_id": "bike_racing",
        "question": "“碳CC”材质的自行车的平均价格是多少？",
        "query": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE <unk>  =  'Carbon CC'"
    },
    {
        "db_id": "college_3",
        "question": "在“星期一”那一天教授的课程名称是什么？",
        "query": "SELECT CName FROM COURSE WHERE Days  =  \"星期一\"",
        "mask_query": "SELECT <unk> FROM COURSE WHERE <unk>  =  \"星期一\""
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "有三个或更多员工的角色的角色代码是什么？。",
        "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3",
        "mask_query": "SELECT role_code FROM <mask> GROUP BY role_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "course_teach",
        "question": "展示数学课的老师的名字。",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"数学\"",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  =  \"数学\""
    },
    {
        "db_id": "geo",
        "question": "哪些省至少有一条主要河流？",
        "query": "SELECT traverse FROM river WHERE LENGTH  >  750;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LENGTH  >  750;"
    },
    {
        "db_id": "tvshow",
        "question": "最新的动画片的制作代码和频道是什么？",
        "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "mask_query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "列出成绩类型代码、成绩细信息和成绩日期。",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "给出所有订单的订单ID，以及每个订单中的总产品数量。",
        "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "mask_query": "SELECT <unk> ,  sum(<unk>) FROM Order_items GROUP BY <unk>"
    },
    {
        "db_id": "bakery_1",
        "question": "对于每个日期，返回当天访问的不同客户的数量。",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "mask_query": "SELECT date ,  COUNT (DISTINCT <unk>) FROM <mask> GROUP BY date"
    },
    {
        "db_id": "entertainment_awards",
        "question": "显示不同类型的艺术品及每种类型的艺术品对应的数量。",
        "query": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE",
        "mask_query": "SELECT TYPE ,  COUNT(*) FROM <mask> GROUP BY TYPE"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "包含“抑制剂”相互作用的酶的不同名称、位置和产品是什么？",
        "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  '抑制剂'",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.location ,  T1.product FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> WHERE T2.<unk>  =  '抑制剂'"
    },
    {
        "db_id": "tv_shows",
        "question": "按ERP的升序列出无线电发射机。",
        "query": "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "planet_1",
        "question": "谁邮寄的包裹最多？列出客户的名字和该客户发送的数量。",
        "query": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
        "mask_query": "SELECT T2.<unk> ,  count(*) FROM PACKAGE AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "给我每个博物馆的详细时间和开放时间。",
        "query": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "loan_1",
        "question": "总贷款金额最大的客户名字是什么？",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.<unk> ORDER BY sum(T2.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "“广东”省在哪里",
        "query": "SELECT country_name FROM state WHERE state_name  =  \"广东\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"广东\";"
    },
    {
        "db_id": "coffee_shop",
        "question": "住在“金华”的会员和住在“湖州”的会员都持有的卡都有哪些？",
        "query": "SELECT membership_card FROM member WHERE address  =  '金华' INTERSECT SELECT membership_card FROM member WHERE address  =  '湖州'",
        "mask_query": "SELECT membership_card FROM <mask> WHERE address  =  '金华' INTERSECT SELECT membership_card FROM <mask> WHERE address  =  '湖州'"
    },
    {
        "db_id": "bbc_channels",
        "question": "有多少频道的互联网链接中有“bbc”这个词？",
        "query": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\"",
        "mask_query": "SELECT count(*) FROM <mask> WHERE internet LIKE \"%bbc%\""
    },
    {
        "db_id": "swimming",
        "question": "找出“澳大利亚”游泳运动员去过的体育场馆的名字。",
        "query": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  '澳大利亚'",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.swimmer_id JOIN <mask> AS t3 ON t2.event_id  =  t3.id JOIN <mask> AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  '澳大利亚'"
    },
    {
        "db_id": "store_1",
        "question": "最年轻的雇员的名字和姓是什么？",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "mask_query": "SELECT <unk> , <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "找到“硕士生”和“本科生”都有注册的那个学期。",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  '硕士' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  '本科'",
        "mask_query": "SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  '硕士' INTERSECT SELECT DISTINCT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  '本科'"
    },
    {
        "db_id": "flight_company",
        "question": "有多少航班的速度大于200？",
        "query": "SELECT count(*) FROM flight WHERE velocity  >  200",
        "mask_query": "SELECT count(*) FROM <mask> WHERE velocity  >  200"
    },
    {
        "db_id": "phone_1",
        "question": "按照他们推出年度顺序列出所有型号名称。",
        "query": "SELECT model_name FROM chip_model ORDER BY launch_year",
        "mask_query": "SELECT model_name FROM <mask> ORDER BY launch_year"
    },
    {
        "db_id": "car_racing",
        "question": "计算20岁以下驾驶员的平均圈数。",
        "query": "SELECT avg(Laps) FROM driver WHERE age  <  20",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE age  <  20"
    },
    {
        "db_id": "csu_1",
        "question": "“上海”省有多少个校园？",
        "query": "SELECT count(*) FROM campuses WHERE county  =  \"上海\"",
        "mask_query": "SELECT count(*) FROM campuses WHERE county  =  \"上海\""
    },
    {
        "db_id": "art_1",
        "question": "1900年以前绘画作品数量最多的艺术家的ID是什么？",
        "query": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  1900 GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_1",
        "question": "显示每个学生的名字和姓氏。",
        "query": "SELECT DISTINCT firstname ,  lastname FROM list",
        "mask_query": "SELECT DISTINCT firstname ,  lastname FROM <mask>"
    },
    {
        "db_id": "station_weather",
        "question": "查找平均高温最高的车站的id和所属的地方当局。",
        "query": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
        "mask_query": "SELECT t2.<unk> ,  t2.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t1.<unk> ORDER BY avg(<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "最小省的省会人口是多少？",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "academic",
        "question": "返回2005年后发表在“PVLDB”上由“李政道”和“杨振宁”撰写的论文。",
        "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"李政道\" AND t1.name  =  \"杨振宁\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;",
        "mask_query": "SELECT t6.<unk> FROM <mask> AS t6 JOIN <mask> AS t4 ON t6.<unk>  =  t4.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t6.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t6.<unk> JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<unk>  =  \"杨振宁\" AND t4.<unk>  =  \"PVLDB\" AND t6.<unk>  >  2005;"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "金额小于3000的交易的销售细节和日期是什么？",
        "query": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  3000"
    },
    {
        "db_id": "driving_school",
        "question": "找出住在“青岛”的工作人员的名字和姓氏。",
        "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"青岛\";",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"青岛\";"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "不同的产品名称是什么？每个产品的平均价格是多少？",
        "query": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM PRODUCTS GROUP BY <unk>"
    },
    {
        "db_id": "voter_1",
        "question": "按参赛者的姓名降序排列，列出参赛选手的编号和姓名。",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM contestants ORDER BY <unk> DESC"
    },
    {
        "db_id": "assets_maintenance",
        "question": "记录过故障日志但没有联系任何来访工程师的工作人员的姓名和id是什么？",
        "query": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> EXCEPT SELECT T3.<unk> ,  T3.<unk> FROM <mask> AS T3 JOIN <mask> AS T4 ON T3.<unk>  =  T4.<unk>"
    },
    {
        "db_id": "scholar",
        "question": "列出每一年“语义分析”的论文",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"语义分析\" GROUP BY t3.year ORDER BY t3.year DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.<unk> FROM paperkeyphrase AS t2 JOIN <mask> AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN <mask> AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"语义分析\" GROUP BY t3.<unk> ORDER BY t3.<unk> DESC;"
    },
    {
        "db_id": "storm_record",
        "question": "不影响两个或多个区域的风暴名称是什么？",
        "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "mask_query": "SELECT name FROM <mask> EXCEPT SELECT T1.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "government_shift",
        "question": "查找使用过最不常用的服务的客户的姓名。",
        "query": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.service_id  =  (SELECT service_id FROM services GROUP BY service_id ORDER BY count(*) DESC LIMIT 1)",
        "mask_query": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.service_id  =  (SELECT service_id FROM services GROUP BY service_id ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "art_1",
        "question": "不同材料类型的绘画平均高度是多少？",
        "query": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
        "mask_query": "SELECT avg(<unk>) ,  <unk> FROM paintings GROUP BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "列出超过4.5颗星的所有餐厅",
        "query": "SELECT name FROM business WHERE rating  >  4.5;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  4.5;"
    },
    {
        "db_id": "county_public_safety",
        "question": "省内警察最多的城市叫什么名字？",
        "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
        "mask_query": "SELECT name FROM <mask> WHERE county_ID  =  (SELECT county_ID FROM <mask> ORDER BY <unk> DESC LIMIT 1)"
    },
    {
        "db_id": "hospital_1",
        "question": "找出最近接受治疗的病人。",
        "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "mask_query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
    },
    {
        "db_id": "train_station",
        "question": "显示火车的数量",
        "query": "SELECT count(*) FROM train",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "roller_coaster",
        "question": "有多少国家没有长度超过3000的过山车？",
        "query": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "mask_query": "SELECT count(*) FROM <mask> WHERE country_id NOT IN ( SELECT country_id FROM <mask> WHERE LENGTH  >  3000 )"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "收到两份成绩单的学生的地址的起始时间和结束时间是什么？",
        "query": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  =  2 )"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "最多人数注册的课程名称是什么？",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2",
        "question": "所有在选拔赛中得到“确定”的选手的名字是什么？他们的大学叫什么名字？",
        "query": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  '确定'",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM player AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '确定'"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示最大交易量。",
        "query": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
        "mask_query": "SELECT max(<unk>) FROM TRANSACTIONS"
    },
    {
        "db_id": "conference",
        "question": "在2003年或2004年期间参加会议的工作人员的姓名是什么？",
        "query": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004"
    },
    {
        "db_id": "train_station",
        "question": "用至少两列火车显示车站名称。",
        "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T2.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "music_2",
        "question": "找到乐队的数量。",
        "query": "SELECT count(*) FROM Band",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "coffee_shop",
        "question": "哪个商店的开心时间最多？列出它的ID和快乐时间的数量。",
        "query": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT shop_id ,  count(*) FROM <mask> GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "battle_death",
        "question": "显示在“英吉利海峡”中没有船只损失的战斗的名称、结果和保加利亚指挥官。",
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  '英吉利海峡'",
        "mask_query": "SELECT <unk> ,  RESULT ,  <unk> FROM <mask> EXCEPT SELECT T1.<unk> ,  T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '英吉利海峡'"
    },
    {
        "db_id": "geo",
        "question": "计算海拔比“宁夏”低的省。",
        "query": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"宁夏\" );",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  <  ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"宁夏\" );"
    },
    {
        "db_id": "journal_committee",
        "question": "最年轻的编辑的名字是什么？",
        "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "question": "平均评级最低的电影的片名和平均评级是多少？",
        "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY avg(T1.<unk>) LIMIT 1"
    },
    {
        "db_id": "flight_4",
        "question": "以“意大利”机场为目的地的路线有多少？",
        "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  \"意大利\"",
        "mask_query": "SELECT count(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"意大利\""
    },
    {
        "db_id": "academic",
        "question": "返回包含关键词“用户研究”且作者是“李政道”的论文号码。",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"李政道\" AND t1.keyword  =  \"用户研究\";",
        "mask_query": "SELECT COUNT ( DISTINCT t5.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t3.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<mask>  =  \"用户研究\";"
    },
    {
        "db_id": "academic",
        "question": "返回那些在“PVLDB” 2010中有论文的作者。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"PVLDB\" AND t4.<unk>  =  2010;"
    },
    {
        "db_id": "geo",
        "question": "说出我们所有的湖泊",
        "query": "SELECT lake_name FROM lake;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "warehouse_1",
        "question": "所有箱子的编码以及它们所在仓库的位置是什么？",
        "query": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
        "mask_query": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "game_injury",
        "question": "每个体育场举办的最大、最小和平均主场比赛是什么？",
        "query": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium",
        "mask_query": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM <mask>"
    },
    {
        "db_id": "inn_1",
        "question": "找到不同装修风格且价格超过120的房间数量。",
        "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",
        "mask_query": "SELECT <unk> , count(*) FROM <mask> WHERE <unk>  >  120 GROUP BY <unk>;"
    },
    {
        "db_id": "manufactory_1",
        "question": "选择每个制造商产品的平均价格，显示制造商的名称。",
        "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "mask_query": "SELECT avg(T1.<unk>) ,  T2.name FROM products AS T1 JOIN <mask> AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出没有发言人的地区的数目。",
        "query": "SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)",
        "mask_query": "SELECT count(*) FROM <mask> WHERE district_id NOT IN (SELECT district_id FROM <mask>)"
    },
    {
        "db_id": "driving_school",
        "question": "在大部分时间里，车辆使用的ID和详细信息是什么？",
        "query": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "swimming",
        "question": "有多少活动？",
        "query": "SELECT count(*) FROM event",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "program_share",
        "question": "给出一个按频道评级降序排序的所有频道名称的列表。",
        "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "mask_query": "SELECT name FROM <mask> ORDER BY rating_in_percent DESC"
    },
    {
        "db_id": "imdb",
        "question": "找出“日本”演员在“姜文”电影中扮演的演员数量",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"日本\" AND t3.name  =  \"姜文\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk>  ) FROM CAST AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t5.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t5.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<unk>  =  \"日本\" AND t3.<unk>  =  \"姜文\";"
    },
    {
        "db_id": "soccer_2",
        "question": "找一些有大学生参加试行的省，他们的决定是肯定的。",
        "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  '确定'",
        "mask_query": "SELECT DISTINCT T1.<unk> FROM college AS T1 JOIN tryout AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '确定'"
    },
    {
        "db_id": "flight_4",
        "question": "哪些国家拥有最多数量的起始状态是“Y”的航空公司？",
        "query": "SELECT country FROM airlines WHERE active  =  \"Y\" GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"Y\" GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "什么是所有角色代码？",
        "query": "SELECT role_code FROM ROLES;",
        "mask_query": "SELECT <unk> FROM ROLES;"
    },
    {
        "db_id": "riding_club",
        "question": "按升序排列运动员的名字。",
        "query": "SELECT Player_name FROM player ORDER BY Votes ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "哪一个运输代理运送了最多的文件？列出运输代理名称和文件数量。",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "mask_query": "SELECT <mask>.<unk> , count(<mask>.<unk>) FROM <mask> JOIN <mask> ON <mask>.<unk> = <mask>.<unk> GROUP BY <mask>.<unk> ORDER BY count(<mask>.<unk>) DESC LIMIT 1;"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示不同投资者的交易数量。",
        "query": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM TRANSACTIONS GROUP BY <unk>"
    },
    {
        "db_id": "geo",
        "question": "哪个省拥有全国最高的山峰",
        "query": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "manufactory_1",
        "question": "选择店里所有产品的名称。",
        "query": "SELECT Name FROM Products",
        "mask_query": "SELECT <unk> FROM <mask>"
    },
    {
        "db_id": "game_1",
        "question": "显示是女性和踢“足球”的学生ID。",
        "query": "SELECT StuID FROM Student WHERE sex  =  \"F\" INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"足球\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE sex  =  \"F\" INTERSECT SELECT <unk> FROM Sportsinfo WHERE sportname  =  \"足球\""
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "那些从未接受过评估的员工的名字是什么？",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "mask_query": "SELECT name FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "art_1",
        "question": "1900年至1950年间创作的绘画和雕塑都叫什么名字？",
        "query": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
        "mask_query": "SELECT <unk> FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT <unk> FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950"
    },
    {
        "db_id": "voter_2",
        "question": "在“08/30/2015”不同的主席投票有哪些？",
        "query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
        "mask_query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE <unk>  =  \"08/30/2015\""
    },
    {
        "db_id": "car_racing",
        "question": "统计分数低于150的司机人数。",
        "query": "SELECT count(*) FROM driver WHERE Points  <  150",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  <  150"
    },
    {
        "db_id": "perpetrator",
        "question": "犯罪者有几个不同的位置？",
        "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
        "mask_query": "SELECT count(DISTINCT LOCATION) FROM <mask>"
    },
    {
        "db_id": "club_leader",
        "question": "显示总排名在100以上的俱乐部领导的姓名。",
        "query": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T2.<unk>  <  100"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "包含“图数据库项目”的细节的所有在项目文件的文件名称和文件日期是什么？",
        "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  \"图数据库项目\"",
        "mask_query": "SELECT document_name ,  document_date FROM <mask> AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  \"图数据库项目\""
    },
    {
        "db_id": "bike_racing",
        "question": "比“4",
        "query": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'",
        "mask_query": "SELECT DISTINCT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> WHERE T1.<unk>  <  '4:21.558'"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示每个产品的产品名称和总订单数量。",
        "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
        "mask_query": "SELECT T1.<unk> ,  sum(T2.<unk>) FROM products AS T1 JOIN order_items AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "concert_singer",
        "question": "所有体育场的平均容量和最大容量是多少？",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "mask_query": "SELECT avg(capacity) ,  max(capacity) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”发表的论文。",
        "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "company_employee",
        "question": "公司的最大市值和最低市值是多少？",
        "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "mountain_photos",
        "question": "在“峨眉山”山脉的平均突出度是多少？",
        "query": "SELECT avg(prominence) FROM mountain WHERE country  =  '峨眉山'",
        "mask_query": "SELECT avg(prominence) FROM <mask> WHERE country  =  '峨眉山'"
    },
    {
        "db_id": "swimming",
        "question": "在“俄罗斯”这个国家有多少个体育场？",
        "query": "SELECT count(*) FROM stadium WHERE country != '俄罗斯'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE country != '俄罗斯'"
    },
    {
        "db_id": "scholar",
        "question": "“李东”在2016年度ACL“语义分析”的论文",
        "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"李东\" AND t3.keyphrasename  =  \"语义分析\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";",
        "mask_query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN <mask> AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN <mask> AS t2 ON t2.paperid  =  t5.paperid JOIN <mask> AS t6 ON t6.venueid  =  t2.venueid JOIN <mask> AS t4 ON t4.paperid  =  t2.paperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"李东\" AND t3.keyphrasename  =  \"语义分析\" AND t2.<unk>  =  2016 AND t6.venuename  =  \"acl\";"
    },
    {
        "db_id": "battle_death",
        "question": "导致总共超过10人死亡的战斗的ID和名称是什么？",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk> GROUP BY T1.<unk> HAVING sum(T3.<unk>)  >  10"
    },
    {
        "db_id": "ship_mission",
        "question": "显示其国籍为“美国”或“英国”的船舶的名称。",
        "query": "SELECT Name FROM ship WHERE Nationality  =  \"美国\" OR Nationality  =  \"英国\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"美国\" OR <unk>  =  \"英国\""
    },
    {
        "db_id": "csu_1",
        "question": "2002年授予学位最多的那所大学有多少名教员？",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
        "mask_query": "SELECT T2.<mask> FROM campuses AS T1 JOIN <mask> AS T2 ON T1.id  =  t2.campus JOIN <mask> AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.<mask> DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回与“李政道”相关的关键词。",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"李政道\";",
        "mask_query": "SELECT t1.<mask> FROM <mask> AS t5 JOIN <mask> AS t1 ON t5.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "advertising_agencies",
        "question": "显示详细信息是“mac”的客户的代理的详细信息。",
        "query": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  'Mac'"
    },
    {
        "db_id": "yelp",
        "question": "找出关于收到超过9个赞的“便宜坊”的所有提示",
        "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"便宜坊\" AND t2.likes  >  9;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"便宜坊\" AND t2.<unk>  >  9;"
    },
    {
        "db_id": "swimming",
        "question": "找到拥有最多球场的国家。",
        "query": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT country FROM <mask> GROUP BY country ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”中被引用最多的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" ORDER BY t2.<unk> DESC LIMIT 1;"
    },
    {
        "db_id": "scientist_1",
        "question": "按照项目名称的字母顺序而后按科学家姓名排序，所有科学家的姓名，他们的项目名称，以及科学家在每个项目上工作的时间是什么？",
        "query": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T2.<unk> = T3.<unk> ORDER BY T3.<unk> ,  T1.<unk>"
    },
    {
        "db_id": "architecture",
        "question": "建造至少3座桥梁的建筑师的ID和名字是什么？",
        "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  3"
    },
    {
        "db_id": "scholar",
        "question": "“拉丝·布蒂克”出版了很多论文吗？",
        "query": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"拉丝·布蒂克\";",
        "mask_query": "SELECT COUNT ( t3.paperid ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"拉丝·布蒂克\";"
    },
    {
        "db_id": "art_1",
        "question": "找到ID是222的艺术家的绘画和雕塑作品的名称。",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "mask_query": "SELECT T2.<unk> FROM artists AS T1 JOIN paintings AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  222 UNION SELECT T4.<unk> FROM artists AS T3 JOIN sculptures AS T4 ON T3.<unk>  =  T4.<unk> WHERE T3.<unk>  =  222"
    },
    {
        "db_id": "car_road_race",
        "question": "列出驾驶员最常用的发动机类型。",
        "query": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示“中国之行”文档的作者姓名和详细信息。",
        "query": "SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  \"Travel to China\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  =  \"Travel to China\""
    },
    {
        "db_id": "scholar",
        "question": "“米蕾拉·拉帕塔”在2016写过论文吗？",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"米蕾拉·拉帕塔\" AND t3.year  =  2016 GROUP BY t2.authorid;",
        "mask_query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid JOIN <mask> AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"米蕾拉·拉帕塔\" AND t3.<unk>  =  2016 GROUP BY t2.authorid;"
    },
    {
        "db_id": "bike_racing",
        "question": "2015年后购买的自行车有哪些不同的标识和产品名称？",
        "query": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  >  2015"
    },
    {
        "db_id": "tracking_orders",
        "question": "最近装运是哪个订单？把订单ID给我。",
        "query": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)",
        "mask_query": "SELECT <unk> FROM shipments WHERE <unk>  =  (SELECT max(<unk>) FROM shipments)"
    },
    {
        "db_id": "academic",
        "question": "返回位于“中国北方”的“数据库”领域中的机构数量。",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"数据库\" AND t2.continent  =  \"中国北方\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t4 JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> JOIN DOMAIN AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"数据库\" AND t2.<unk>  =  \"中国北方\";"
    },
    {
        "db_id": "election",
        "question": "哪个人成为州长的次数最多？",
        "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "question": "选择仓库代码以及每个仓库中的箱子数量。",
        "query": "SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse",
        "mask_query": "SELECT <unk> ,  count(*) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "显示所有流程的ID和每个流程中的文档数。",
        "query": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM Documents_processes GROUP BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "把在“PVLDB”有超过10篇论文的作者返回。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"PVLDB\" GROUP BY t1.<unk> HAVING COUNT ( DISTINCT t4.<unk> )  >  10;"
    },
    {
        "db_id": "music_4",
        "question": "“金曲”类别和“已获奖”类别音乐节相对应的仪式日期是什么？",
        "query": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"金曲奖\" AND RESULT  =  \"已获奖\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"金曲奖\" AND RESULT  =  \"已获奖\""
    },
    {
        "db_id": "railway",
        "question": "显示与超过一辆列车关联的铁路的ID和位置。",
        "query": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "找出最常用的支付方式。",
        "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM customers GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "所有参与者的ID、类型代码和详细信息是什么？",
        "query": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM  <mask>"
    },
    {
        "db_id": "bike_1",
        "question": "从码头数最高的车站出发的旅行ID是什么？",
        "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "railway",
        "question": "显示与做多数量列车相关的铁路的ID和建设者。",
        "query": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "architecture",
        "question": "哪一个工厂名称包含中文单词“江”？",
        "query": "SELECT name FROM mill WHERE name LIKE \"%江%\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> LIKE \"%江%\""
    },
    {
        "db_id": "news_report",
        "question": "显示记者的姓名和他们报道的事件数量。",
        "query": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name",
        "mask_query": "SELECT T3.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> GROUP BY T3.<unk>"
    },
    {
        "db_id": "flight_1",
        "question": "工资高于平均水平的所有员工的姓名是什么？",
        "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
        "mask_query": "SELECT <unk> FROM Employee WHERE <unk>  >  (SELECT avg(<unk>) FROM Employee)"
    },
    {
        "db_id": "wine_1",
        "question": "请告诉我葡萄产地是“张掖”产的葡萄酒的平均价格。",
        "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"张掖\"",
        "mask_query": "SELECT AVG(T2.<unk>) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"张掖\""
    },
    {
        "db_id": "election_representative",
        "question": "代表姓名和他们参加的选举日期是什么？",
        "query": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
        "mask_query": "SELECT T2.<unk> ,  T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>"
    },
    {
        "db_id": "academic",
        "question": "把引用“李政道”论文的作者数量返回。",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t7 JOIN <mask> AS t5 ON t7.<unk>  =  t5.<unk> JOIN <mask> AS t6 ON t6.<unk>  =  t5.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t7.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t6.<unk> JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "geo",
        "question": "什么河流流经中国最低点所在的省",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "最常见的行为事件类型的代码和描述是什么？",
        "query": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "出问题最多的产品有多少问题？列出问题的数量和产品名称。",
        "query": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(*) ,  T1.<unk> FROM product AS T1 JOIN problems AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回在2010年之前文章“使数据库可用”的引用数量。",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"使数据库可用\" AND t2.year  <  2010;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t1.<unk> WHERE t3.<unk>  =  \"使数据库可用\" AND t2.<unk>  <  2010;"
    },
    {
        "db_id": "railway",
        "question": "按级别顺序递减显示经理的工作年限。",
        "query": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY LEVEL DESC"
    },
    {
        "db_id": "hospital_1",
        "question": "又最多预约的护士的名字的是什么？",
        "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "question": "有多少工作人员参加了会议？",
        "query": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Staff_in_meetings"
    },
    {
        "db_id": "sports_competition",
        "question": "比赛类型不是“锦标赛”的不同年份是什么？",
        "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"锦标赛\"",
        "mask_query": "SELECT DISTINCT YEAR FROM <mask> WHERE <unk> != \"锦标赛\""
    },
    {
        "db_id": "scientist_1",
        "question": "找出每个科学家正在从事的项目数量和科学家的名字。",
        "query": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "mask_query": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name"
    },
    {
        "db_id": "election_representative",
        "question": "“上海”州或“江西”代表的有效期是多少？",
        "query": "SELECT Lifespan FROM representative WHERE State  =  \"上海\" OR State  =  \"江西\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"上海\" OR <unk>  =  \"江西\""
    },
    {
        "db_id": "academic",
        "question": "返回与“李政道”合作的作者。",
        "query": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "CMI交叉引用有多少种不同的源代码？",
        "query": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM CMI_cross_references"
    },
    {
        "db_id": "hr_1",
        "question": "返回名字以字母“明”结尾的员工的全名和薪水。",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '明'",
        "mask_query": "SELECT first_name ,  last_name ,  salary FROM <mask> WHERE first_name LIKE '明'"
    },
    {
        "db_id": "hr_1",
        "question": "给出每个部门的名称和部门中员工的人数。",
        "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
        "mask_query": "SELECT T2.department_name ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name"
    },
    {
        "db_id": "customer_deliveries",
        "question": "发现没有任何雇员在他们的记录中的状态。",
        "query": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "mask_query": "SELECT <unk> FROM addresses WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "musical",
        "question": "列出被提名超过两部音乐剧的被提名者。",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "dog_kennels",
        "question": "列出最稀有品种的狗的名字和它们的治疗日期。",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "mask_query": "SELECT T1.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  ( SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "document_management",
        "question": "具有最不常用结构的文档的平均访问计数是多少？",
        "query": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT avg(<unk>) FROM documents GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "culture_company",
        "question": "统计不同导游的人数。",
        "query": "SELECT COUNT (DISTINCT director) FROM movie",
        "mask_query": "SELECT COUNT (DISTINCT director) FROM <mask>"
    },
    {
        "db_id": "imdb",
        "question": "“冯小刚”导演了哪些电影？",
        "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"冯小刚\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"冯小刚\";"
    },
    {
        "db_id": "phone_1",
        "question": "找到超过3部手机使用的认证级别。",
        "query": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING count(*)  >  3"
    },
    {
        "db_id": "college_2",
        "question": "查找“统计学”系提供的课程名称。",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  '统计学'",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.id  =  T3.id WHERE T1.<unk>  =  '统计学'"
    },
    {
        "db_id": "swimming",
        "question": "找到至少有2条记录的游泳运动员的名字。",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "academic",
        "question": "返回每一年在“PVLDB”发表的论文数量。",
        "query": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> )  ,  t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" GROUP BY t2.<unk>;"
    },
    {
        "db_id": "college_1",
        "question": "历史系教授的姓氏和办公室在哪里？",
        "query": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  '旧'",
        "mask_query": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  '旧'"
    },
    {
        "db_id": "geo",
        "question": "最小的城市在哪里",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> );"
    },
    {
        "db_id": "district_spokesman",
        "question": "地区排名前三的地区的总人口是多少？",
        "query": "SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3",
        "mask_query": "SELECT sum(population) FROM <mask> ORDER BY area_km DESC LIMIT 3"
    },
    {
        "db_id": "protein_institute",
        "question": "展示在1880年后建立的至少有两个机构的建筑物的名称和高度。",
        "query": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.name ,  T1.height_feet FROM <mask> AS T1 JOIN institution AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.founded  >  1880 GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "流程结果代码为工作的详细说明是什么？",
        "query": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\"",
        "mask_query": "SELECT <unk> FROM Process_outcomes WHERE <unk>  =  \"working\""
    },
    {
        "db_id": "scholar",
        "question": "“SigCOMM”引用量最多的论文是什么？",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"SigCOMM\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "mask_query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM <mask> AS t1 JOIN <mask> AS t3 ON t1.paperid  =  t3.citedpaperid JOIN <mask> AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"SigCOMM\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;"
    },
    {
        "db_id": "game_injury",
        "question": "2007赛季后有多少场比赛？",
        "query": "SELECT count(*) FROM game WHERE season  >  2007",
        "mask_query": "SELECT count(*) FROM <mask> WHERE season  >  2007"
    },
    {
        "db_id": "book_review",
        "question": "有多少本书？",
        "query": "SELECT count(*) FROM book",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "epinions_1",
        "question": "查找所有评论的平均和最大评级。",
        "query": "SELECT avg(rating) ,  max(rating) FROM review",
        "mask_query": "SELECT avg(<unk>) ,  max(<unk>) FROM <mask>"
    },
    {
        "db_id": "ship_1",
        "question": "计算每个等级的船长的数量。",
        "query": "SELECT count(*) ,  rank FROM captain GROUP BY rank",
        "mask_query": "SELECT count(*) ,  rank FROM <mask> GROUP BY rank"
    },
    {
        "db_id": "geo",
        "question": "最大面积的省的最低点是什么？",
        "query": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> WHERE t1.<unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "wedding",
        "question": "显示所有年龄小于平均值的人的姓名和国家。",
        "query": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)",
        "mask_query": "SELECT name ,  country FROM <mask> WHERE age  <  (SELECT avg(age) FROM <mask>)"
    },
    {
        "db_id": "decoration_competition",
        "question": "显示不同的国家和每个国家成员的数量。",
        "query": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "riding_club",
        "question": "运动员的性别和职业是什么？",
        "query": "SELECT Gender ,  Occupation FROM player",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask>"
    },
    {
        "db_id": "allergy_1",
        "question": "显示所有学生的最低、平均和最大年龄。",
        "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "mask_query": "SELECT min(age) ,  avg(age) ,  max(age) FROM <mask>"
    },
    {
        "db_id": "debate",
        "question": "以观众数量的升序排列，列出辩论的场馆。",
        "query": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "academic",
        "question": "返回“VLDB”会议的主页。",
        "query": "SELECT homepage FROM conference WHERE name  =  \"VLDB\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"VLDB\";"
    },
    {
        "db_id": "academic",
        "question": "把在“VLDB”会议上2000年以前发表的论文的数量返回。",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" AND t2.<unk>  <  2000;"
    },
    {
        "db_id": "e_government",
        "question": "那些从未使用过的服务的名称是什么？",
        "query": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "mask_query": "SELECT <unk> FROM services EXCEPT SELECT t1.<unk> FROM services AS t1 JOIN party_services AS t2 ON t1.<unk>  =  t2.<unk>"
    },
    {
        "db_id": "academic",
        "question": "把包含关键词“自然语言”的论文的全部引用返回。",
        "query": "SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"自然语言\";",
        "mask_query": "SELECT SUM ( t3.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"自然语言\";"
    },
    {
        "db_id": "twitter_1",
        "question": "查找所有用户的追随者的最大数量和总数。",
        "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "mask_query": "SELECT max(<unk>) ,  sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示不同交易类型的平均交易量。",
        "query": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "mask_query": "SELECT <unk> ,  avg(<unk>) FROM TRANSACTIONS GROUP BY <unk>"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "显示所有产品的最小，最大，平均价格。",
        "query": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products",
        "mask_query": "SELECT min(<unk>) ,  max(<unk>) ,  avg(<unk>) FROM products"
    },
    {
        "db_id": "wine_1",
        "question": "2009年由“仙粉黛”葡萄酿造的葡萄酒的平均价格和情况是多少？",
        "query": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"仙粉黛\"",
        "mask_query": "SELECT AVG(<unk>) ,  AVG(<unk>) FROM WINE WHERE YEAR  =  2009 AND <unk>  =  \"仙粉黛\""
    },
    {
        "db_id": "news_report",
        "question": "显示记者的姓名和他们报道的事件的日期。",
        "query": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "planet_1",
        "question": "实习生的平均工资是多少？",
        "query": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE POSITION  =  \"Intern\";"
    },
    {
        "db_id": "products_for_hire",
        "question": "每个客户预订了多少次？列出客户ID、名字和数量。",
        "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "mask_query": "SELECT T1.<unk> ,  T1.<unk> ,  count(*) FROM <mask> AS T1 JOIN bookings AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk>"
    },
    {
        "db_id": "university_rank",
        "question": "大学的最高、平均和最低入学人数是多少？",
        "query": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
        "mask_query": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University"
    },
    {
        "db_id": "student_1",
        "question": "找到学生总数。",
        "query": "SELECT count(*) FROM list",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "vehicle_rent",
        "question": "显示拥有最大会员积分的客户的姓名和年龄。",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "哪种不同的源代码包含子字符串'en'？",
        "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE 'en'",
        "mask_query": "SELECT DISTINCT <unk> FROM cmi_cross_references WHERE <unk> LIKE 'en'"
    },
    {
        "db_id": "customer_complaints",
        "question": "哪些产品被最少的客户投诉？",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "mask_query": "SELECT DISTINCT t1.<unk> FROM products AS t1 JOIN complaints AS t2 ON t1.<unk>  =  t2.<unk> JOIN customers AS t3 GROUP BY t3.<unk> ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "显示所有不同的产品类别以及每个类别中的邮件的数量。",
        "query": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",
        "mask_query": "SELECT <unk> ,  count(*) FROM mailshot_campaigns GROUP BY <unk>"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "在行为监视详细信息中查找最常见的结果。这个结果的数量和细节是什么？",
        "query": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT count(DISTINCT <unk>) ,  <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "debate",
        "question": "显示出参加辩论的人的姓名和他们在正面辩论的次数。",
        "query": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "movie_1",
        "question": "2000年之前拍了多少电影？",
        "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
        "mask_query": "SELECT count(*) FROM <mask> WHERE YEAR  <  2000"
    },
    {
        "db_id": "customer_complaints",
        "question": "对“巧克力”的描述是什么？",
        "query": "SELECT product_description FROM products WHERE product_name  =  \"巧克力\"",
        "mask_query": "SELECT <unk> FROM products WHERE <unk>  =  \"巧克力\""
    },
    {
        "db_id": "student_assessment",
        "question": "所有候选人的名字和姓氏是什么？",
        "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM candidates AS T1 JOIN people AS T2 ON T1.<unk> = T2.<unk>"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "找出姓氏为“贺”的学生的行为事件的开始和结束日期。",
        "query": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"贺\"",
        "mask_query": "SELECT T1.<unk> ,  <unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  \"贺\""
    },
    {
        "db_id": "student_1",
        "question": "5年级使用哪些教室？",
        "query": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "mask_query": "SELECT DISTINCT classroom FROM <mask> WHERE grade  =  5"
    },
    {
        "db_id": "boat_1",
        "question": "找出年龄在20到30岁之间的水手预定的船的名称。",
        "query": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
        "mask_query": "SELECT T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T3.<unk>  =  T2.<unk> WHERE T1.<unk> BETWEEN 20 AND 30"
    },
    {
        "db_id": "game_injury",
        "question": "哪个赛季，哪个体育场有球员受伤类型为“脚部受伤”或“膝盖受伤”？",
        "query": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  '脚部受伤' OR T3.injury  =  '膝盖受伤'",
        "mask_query": "SELECT T1.season ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.injury  =  '脚部受伤' OR T3.injury  =  '膝盖受伤'"
    },
    {
        "db_id": "manufactory_1",
        "question": "找出总部在“东京”或“北京”的制造商的数量。",
        "query": "SELECT count(*) FROM manufacturers WHERE headquarter  =  '日本' OR headquarter  =  '北京'",
        "mask_query": "SELECT count(*) FROM manufacturers WHERE headquarter  =  '日本' OR headquarter  =  '北京'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "计算学生贷款的平均数额。",
        "query": "SELECT avg(amount_of_loan) FROM Student_Loans",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "manufactory_1",
        "question": "由“强东”创立的公司的总部在哪里？",
        "query": "SELECT headquarter FROM manufacturers WHERE founder  =  '强东'",
        "mask_query": "SELECT headquarter FROM manufacturers WHERE founder  =  '强东'"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "显示最频繁发生的交易类型的描述。",
        "query": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN TRANSACTIONS AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "election_representative",
        "question": "在选举中超过10000票的代表的名字是什么？",
        "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE <unk>  >  10000"
    },
    {
        "db_id": "tracking_orders",
        "question": "哪一个订单处理最多的项目？返回订单ID。",
        "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM orders AS T1 JOIN order_items AS T2 ON T1.<unk> = T2.<unk> GROUP BY T1.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "所有省的最高点有多高？",
        "query": "SELECT highest_elevation FROM highlow;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "yelp",
        "question": "关于“星巴克”提示的总赞数是什么？",
        "query": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"星巴克\";",
        "mask_query": "SELECT SUM ( t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"星巴克\";"
    },
    {
        "db_id": "college_2",
        "question": "统计提供课程的院系的数量。",
        "query": "SELECT count(DISTINCT dept_name) FROM course",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "institution_sports",
        "question": "按容量递减的顺序返回机构体育场馆。",
        "query": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "roller_coaster",
        "question": "显示不同状态和每一个状态过山车的数量。",
        "query": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "network_2",
        "question": "他们有多少种工作？",
        "query": "SELECT count(DISTINCT job) FROM Person",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "book_2",
        "question": "显示有不止一个出版物的出版商。",
        "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”和“杨振宁”合著的论文。",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"李政道\" AND t1.name  =  \"杨振宁\";",
        "mask_query": "SELECT t5.<unk> FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<unk>  =  \"杨振宁\";"
    },
    {
        "db_id": "customers_and_orders",
        "question": "最不常见的产品类型的代码是什么？",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "geo",
        "question": "最大城市的主要城市是什么？",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150000 AND <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "ID为3的员工有多少个不同的角色？",
        "query": "SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM Staff_in_processes WHERE <unk>  =  3"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "征收拖欠的市政税有多少？",
        "query": "SELECT count(*) FROM rent_arrears",
        "mask_query": "SELECT count(*) FROM rent_arrears"
    },
    {
        "db_id": "dog_kennels",
        "question": "返回居住在名称包含子字符串“北”的州的所有者的姓氏、姓氏和电子邮件。",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE \"%北%\"",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> WHERE <unk> LIKE \"%北%\""
    },
    {
        "db_id": "cre_Theme_park",
        "question": "找出酒店的总数。",
        "query": "SELECT count(*) FROM HOTELS",
        "mask_query": "SELECT count(*) FROM HOTELS"
    },
    {
        "db_id": "driving_school",
        "question": "那里有多少顾客？",
        "query": "SELECT count(*) FROM Customers;",
        "mask_query": "SELECT count(*) FROM <mask>;"
    },
    {
        "db_id": "protein_institute",
        "question": "在我们的记录中没有蛋白质的相关机构有多少？",
        "query": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
        "mask_query": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM <mask>)"
    },
    {
        "db_id": "hr_1",
        "question": "显示有两次或更多次超过300天才完成的作业的ID。",
        "query": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "mask_query": "SELECT job_id FROM <mask> WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2"
    },
    {
        "db_id": "epinions_1",
        "question": "找到评论的数量。",
        "query": "SELECT count(*) FROM review",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "art_1",
        "question": "1900年以前制作雕塑的每一位艺术家的名字和姓氏是什么？",
        "query": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM artists AS T1 JOIN sculptures AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  1900"
    },
    {
        "db_id": "store_product",
        "question": "同时有“大型商场”和“便利店”的地区叫什么名字？",
        "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"大型商场\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"便利店\"",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id JOIN <mask> AS t3 ON t2.district_id  =  t3.district_id WHERE t1.<unk>  =  \"大型商场\" INTERSECT SELECT t3.<unk> FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.store_id  =  t2.store_id JOIN <mask> AS t3 ON t2.district_id  =  t3.district_id WHERE t1.<unk>  =  \"便利店\""
    },
    {
        "db_id": "store_1",
        "question": "列出电影播放列表中所有曲目的名称。",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"电影\";",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> JOIN <mask> AS T3 ON T3.<unk> = T2.<unk> WHERE T3.<unk> = \"电影\";"
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”中有最多论文的作者。",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "mask_query": "SELECT t1.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"PVLDB\" GROUP BY t1.<unk> ORDER BY COUNT ( DISTINCT t4.<unk> ) DESC LIMIT 1;"
    },
    {
        "db_id": "dorm_1",
        "question": "找出容量大于300或小于100的宿舍的名称和性别类型。",
        "query": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "mask_query": "SELECT <unk> ,  <unk> FROM dorm WHERE <unk>  >  300 OR <unk>  <  100"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "question": "找到助学贷款最小的学生的简历信息。",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> ASC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "question": "请问“历史”系导师的姓名和薪水？",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  '历史'",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.i_id  =  T2.id JOIN <mask> AS T3 ON T1.s_id  =  T3.id WHERE T3.<unk>  =  '历史'"
    },
    {
        "db_id": "assets_maintenance",
        "question": "按处理日期升序列出所有资产的制作、型号、细节。",
        "query": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "pilot_record",
        "question": "列出没有任何记录的飞行员的名字。",
        "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "station_weather",
        "question": "找出从“宿迁”到“徐州”的火车的数量和时间。",
        "query": "SELECT train_number ,  TIME FROM train WHERE origin  =  '宿迁' AND destination  =  '徐州'",
        "mask_query": "SELECT <unk> ,  TIME FROM <mask> WHERE <unk>  =  '宿迁' AND <unk>  =  '徐州'"
    },
    {
        "db_id": "riding_club",
        "question": "显示至少有两个运动员的住址。",
        "query": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "ID为2的文件有多少份草稿？",
        "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk> = 2;"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”集中工作的领域。",
        "query": "SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"李政道\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN DOMAIN AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\";"
    },
    {
        "db_id": "soccer_1",
        "question": "列出所有身高至少为180厘米和总分高于85的球员ID。",
        "query": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >=  180 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  >  85"
    },
    {
        "db_id": "network_2",
        "question": "人们的故乡来自于多少个不同的城市？",
        "query": "SELECT count(DISTINCT city) FROM Person",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "有多少ACL 2012的论文引用超过7次？",
        "query": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;",
        "mask_query": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM <mask> AS t1 JOIN <mask> AS t3 ON t1.paperid  =  t3.citedpaperid JOIN <mask> AS t2 ON t2.venueid  =  t1.venueid WHERE t1.<unk>  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;"
    },
    {
        "db_id": "music_4",
        "question": "返回所有艺术家的平均年龄。",
        "query": "SELECT avg(Age) FROM artist",
        "mask_query": "SELECT avg(<unk>) FROM <mask>"
    },
    {
        "db_id": "scholar",
        "question": "“丹·马库姆比”的“基因识别”相关的论文有多少引用？",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"丹·马库姆比\" AND t3.keyphrasename  =  \"基因识别\";",
        "mask_query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN <mask> AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t2.paperid JOIN <mask> AS t5 ON t4.paperid  =  t5.citedpaperid JOIN <mask> AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"丹·马库姆比\" AND t3.keyphrasename  =  \"基因识别\";"
    },
    {
        "db_id": "train_station",
        "question": "显示每列火车的列车名称和车站名称。",
        "query": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",
        "mask_query": "SELECT T2.name ,  T3.name FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.station_id  =  T2.station_id JOIN <mask> AS T3 ON T3.train_id  =  T1.train_id"
    },
    {
        "db_id": "program_share",
        "question": "查找最近启动的节目的名称。",
        "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "mask_query": "SELECT name FROM <mask> ORDER BY launch DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "question": "工资最高的员工的ID和姓名是什么？",
        "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  <unk> FROM Employee ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "wedding",
        "question": "2016年有多少教堂举行婚礼？",
        "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016",
        "mask_query": "SELECT COUNT (DISTINCT church_id) FROM <mask> WHERE YEAR  =  2016"
    },
    {
        "db_id": "yelp",
        "question": "找出评分超过3.5的“餐厅”",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  >  3.5 AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "sing_contest",
        "question": "英语歌曲《巴尔干女孩》得到的音质得分是多少？",
        "query": "SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  ' The Balkan Girls ' AND T2.<unk>  =  'English'"
    },
    {
        "db_id": "candidate_poll",
        "question": "返回候选人最多的民意调查。",
        "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT poll_source FROM <mask> GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "district_spokesman",
        "question": "给我所有地区最大和平均的面积。",
        "query": "SELECT max(area_km) ,  avg(area_km) FROM district",
        "mask_query": "SELECT max(area_km) ,  avg(area_km) FROM <mask>"
    },
    {
        "db_id": "headphone_store",
        "question": "哪些耳机从来不使用塑料结构？",
        "query": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
        "mask_query": "SELECT earpads FROM <mask> EXCEPT SELECT earpads FROM <mask> WHERE construction  =  'Plastic'"
    },
    {
        "db_id": "wine_1",
        "question": "找出不在“烟台”生产的葡萄酒的评价价格。",
        "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"烟台\")",
        "mask_query": "SELECT avg(price) FROM <mask> WHERE <unk> NOT IN (SELECT T1.<unk> FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"烟台\")"
    },
    {
        "db_id": "academic",
        "question": "返回2000年后“北京理工大学”在“PVLDB”上发表的论文数量。",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"北京理工大学\" AND t5.year  >  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t5.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t3 ON t5.<unk>  =  t3.<unk> WHERE t3.<unk>  =  \"PVLDB\" AND t2.<unk>  =  \"北京理工大学\" AND t5.<unk>  >  2000;"
    },
    {
        "db_id": "geo",
        "question": "与“湖南”省接壤的哪个省有最低地点",
        "query": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"湖南\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"湖南\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"湖南\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"湖南\" );"
    },
    {
        "db_id": "protein_institute",
        "question": "列出高度至少200英尺以及楼层至少20层的建筑物的名称。",
        "query": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20",
        "mask_query": "SELECT name FROM <mask> WHERE height_feet  >=  200 AND floors  >=  20"
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "有多少产品的价格高于平均水平？",
        "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
        "mask_query": "SELECT count(*) FROM products WHERE <unk>  >  (SELECT avg(<unk>) FROM products)"
    },
    {
        "db_id": "student_1",
        "question": "返回每个“四年级”教室的学生总数。",
        "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "mask_query": "SELECT classroom ,  count(*) FROM <mask> WHERE grade  =  \"4\" GROUP BY classroom"
    },
    {
        "db_id": "academic",
        "question": "返回在“VLDB”会议发表过的且引用超过200个的论文。",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200;",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"VLDB\" AND t2.<unk>  >  200;"
    },
    {
        "db_id": "twitter_1",
        "question": "按跟随者数量的降序进行排序，列出每个用户的名称和追随者数目。",
        "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "poker_player",
        "question": "不玩扑克的人的名字是什么？",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "game_injury",
        "question": "列出球员“郑智” 和球员“于大宝”都受伤的体育场名称。",
        "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  '郑智' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  '于大宝'",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.player  =  '郑智' INTERSECT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> WHERE T3.player  =  '于大宝'"
    },
    {
        "db_id": "vehicle_driver",
        "question": "数一数参加过纳斯卡比赛的车手人数。",
        "query": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
        "mask_query": "SELECT count(*) FROM <mask> WHERE <unk>  =  'NASCAR'"
    },
    {
        "db_id": "scholar",
        "question": "“塞缪尔·马登”在“PVLDB”以外的会议发表了多少论文？",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"塞缪尔·马登\" AND t4.venuename != \"PVLDB\";",
        "mask_query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM <mask> AS t4 JOIN <mask> AS t3 ON t4.venueid  =  t3.venueid JOIN <mask> AS t2 ON t2.paperid  =  t3.paperid JOIN <mask> AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"塞缪尔·马登\" AND t4.venuename != \"PVLDB\";"
    },
    {
        "db_id": "sing_contest",
        "question": "至少演唱过两首歌曲的参与者的id和姓名是什么？",
        "query": "SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "mask_query": "SELECT T1.<unk> ,  T1.Name FROM <mask> AS T1 JOIN <mask> AS T2 ON T2.<unk>  =  T1.<unk> GROUP BY T1.<unk> HAVING count(*)  >=  2"
    },
    {
        "db_id": "tvshow",
        "question": "“一生的爱”这一集的每周排名是多少？",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"大宅门\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk> = \"大宅门\";"
    },
    {
        "db_id": "products_for_hire",
        "question": "不同的支付类型有哪些？",
        "query": "SELECT DISTINCT payment_type_code FROM payments",
        "mask_query": "SELECT DISTINCT <unk> FROM payments"
    },
    {
        "db_id": "geo",
        "question": "每一最低点是海平面的省的最高点是什么？",
        "query": "SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0;",
        "mask_query": "SELECT <unk>  ,  <unk> FROM <mask> WHERE <unk>  =  0;"
    },
    {
        "db_id": "academic",
        "question": "返回关键字的个数。",
        "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
        "mask_query": "SELECT COUNT ( DISTINCT <mask> ) FROM <mask>;"
    },
    {
        "db_id": "scholar",
        "question": "自2006年以来，关于“提取液对癌症患者的影响”发表了哪些文章？",
        "query": "SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"%提取液对癌症患者的影响%\" AND YEAR  >  2006;",
        "mask_query": "SELECT DISTINCT paperid  ,  <unk> FROM <mask> WHERE <unk> LIKE \"%提取液对癌症患者的影响%\" AND YEAR  >  2006;"
    },
    {
        "db_id": "geo",
        "question": "中国最小的省的主要城市是什么？",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150000 AND <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "geo",
        "question": "中国最小的省中的最小的城市是什么？",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MIN ( <unk> ) FROM <mask> ) );"
    },
    {
        "db_id": "apartment_rentals",
        "question": "“张力”管理的建筑物是什么？给我缩写。",
        "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"张力\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>\t =  \"张力\""
    },
    {
        "db_id": "voter_1",
        "question": "区域代码的最大值和最小值是多少？",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM area_code_state"
    },
    {
        "db_id": "train_station",
        "question": "显示不在“广州”的所有火车站的名称和乘客总数。",
        "query": "SELECT name ,  total_passengers FROM station WHERE LOCATION != \"广州\"",
        "mask_query": "SELECT name ,  total_passengers FROM <mask> WHERE LOCATION != \"广州\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "ID为100的工作人员的详细信息是什么？",
        "query": "SELECT staff_details FROM Staff WHERE staff_id  =  100",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  100"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "与份额数小于50的交易相关的批次的批次细节是什么？",
        "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50",
        "mask_query": "SELECT T1.<unk> FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.<unk>  =  T2.<unk> JOIN TRANSACTIONS AS T3 ON T2.<unk>  =  T3.<unk> WHERE T3.<unk>  <  50"
    },
    {
        "db_id": "icfp_1",
        "question": "统计机构数量。",
        "query": "SELECT count(*) FROM inst",
        "mask_query": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "customer_deliveries",
        "question": "列出由“信用卡”卡支付的客户的姓名和电子邮件。",
        "query": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  '信用卡'",
        "mask_query": "SELECT <unk> ,  <unk> FROM customers WHERE <unk>  =  '信用卡'"
    },
    {
        "db_id": "company_1",
        "question": "按出生日期的上升顺序列出所有员工的名字、姓氏和地址。",
        "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate",
        "mask_query": "SELECT fname ,  lname ,  address FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "yelp",
        "question": "找出在“云南”的“星巴克”“餐厅”的评论数量",
        "query": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"星巴克\" AND t1.state  =  \"云南\" AND t2.category_name  =  \"餐厅\";",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"星巴克\" AND t1.<unk>  =  \"云南\" AND t2.<unk>  =  \"餐厅\";"
    },
    {
        "db_id": "train_station",
        "question": "显示乘客总数前三名的火车站的名称和主要服务。",
        "query": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "mask_query": "SELECT name ,  main_services FROM <mask> ORDER BY total_passengers DESC LIMIT 3"
    },
    {
        "db_id": "bbc_channels",
        "question": "查找被最多的导演指导过的频道的名称和Internet站点。",
        "query": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.name ,  t1.internet FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "包含“韩文”一词的段落的详细内容是什么？",
        "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  '韩文'",
        "mask_query": "SELECT <unk> FROM <mask> WHERE paragraph_text  =  '韩文'"
    },
    {
        "db_id": "geo",
        "question": "“湖北”有多少条主要河流",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  \"湖北\";",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE LENGTH  >  750 AND <unk>  =  \"湖北\";"
    },
    {
        "db_id": "manufacturer",
        "question": "查找每个制造商生产的产品类型以及公司名称。",
        "query": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",
        "mask_query": "SELECT count(*) ,  t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id"
    },
    {
        "db_id": "cinema",
        "question": "展示所有在2010年和2011年开业的电影院。",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
        "mask_query": "SELECT LOCATION FROM <mask> WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM <mask> WHERE openning_year  =  2011"
    },
    {
        "db_id": "swimming",
        "question": "找到那些从来没有举办过活动的体育场馆的名字。",
        "query": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE id NOT IN (SELECT stadium_id FROM <mask>)"
    },
    {
        "db_id": "academic",
        "question": "把“北京理工大学”在“VLDB”会议上发表的论文数量返回。",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"北京理工大学\";",
        "mask_query": "SELECT COUNT ( DISTINCT t5.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t1.<unk> JOIN <mask> AS t5 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t2 ON t5.<unk>  =  t2.<unk> WHERE t2.<unk>  =  \"VLDB\" AND t3.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "chinook_1",
        "question": "查找在“长沙”市居住的雇员的出生日期。",
        "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"长沙\"",
        "mask_query": "SELECT <unk> FROM EMPLOYEE WHERE <unk>  =  \"长沙\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "question": "ID为4的文档的作者是谁？",
        "query": "SELECT author_name FROM Documents WHERE document_id  =  4",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  4"
    },
    {
        "db_id": "debate",
        "question": "列出超过150观众人数的辩论日期",
        "query": "SELECT Date FROM debate WHERE Num_of_Audience  >  150",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  150"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "所有销售和购买的细节是什么？",
        "query": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases",
        "mask_query": "SELECT <unk> FROM sales UNION SELECT <unk> FROM purchases"
    },
    {
        "db_id": "geo",
        "question": "中国的哪些省有“昆明”这个城市？",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"springfield\";"
    },
    {
        "db_id": "ship_1",
        "question": "有多少不同船长等级？",
        "query": "SELECT count(DISTINCT rank) FROM captain",
        "mask_query": "SELECT count(DISTINCT rank) FROM <mask>"
    },
    {
        "db_id": "club_leader",
        "question": "请出示会员最常见的国籍。",
        "query": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "department_management",
        "question": "哪个负责人的名字有“强”这个子串？列出ID和姓名。",
        "query": "SELECT head_id ,  name FROM head WHERE name LIKE '强'",
        "mask_query": "SELECT head_id ,  <unk> FROM <mask> WHERE <unk> LIKE '强'"
    },
    {
        "db_id": "solvency_ii",
        "question": "按照事件的数量按降序排序显示产品的名称和它们对应的事件数量。",
        "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
        "mask_query": "SELECT T1.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T1.<unk> ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "sing_contest",
        "question": "演出的最高和最低音质分是多少？",
        "query": "SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "tv_shows",
        "question": "显示无线电的发射器及其关联的城市频道的数目。",
        "query": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter",
        "mask_query": "SELECT T2.<unk> ,  COUNT(*) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk>"
    },
    {
        "db_id": "yelp",
        "question": "列出名字是“米雪”的所有用户ID",
        "query": "SELECT user_id FROM USER WHERE name  =  \"米雪\";",
        "mask_query": "SELECT <unk> FROM USER WHERE <unk>  =  \"米雪\";"
    },
    {
        "db_id": "tv_shows",
        "question": "按无线电的ERP降序显示无线电的发射器及其相关频道的电台名称。",
        "query": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T3.<unk> DESC"
    },
    {
        "db_id": "club_leader",
        "question": "列出国籍不是“英格兰”的会员的名字。",
        "query": "SELECT Name ,  Nationality FROM member WHERE Nationality != \"England\"",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> != \"England\""
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪些工程师从未参与过维护资产？列出工程师的名字和姓氏。",
        "query": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "journal_committee",
        "question": "列出不在任何期刊委员会上的编辑的名字。",
        "query": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "mask_query": "SELECT <unk> FROM <mask> WHERE editor_id NOT IN (SELECT editor_id FROM <mask>)"
    },
    {
        "db_id": "body_builder",
        "question": "至少两个人共有的出生地是什么？",
        "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "local_govt_mdm",
        "question": "交叉参考码的“税收”的cmi的详细信息是什么？",
        "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  '税收'",
        "mask_query": "SELECT T1.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  =  '税收'"
    },
    {
        "db_id": "manufacturer",
        "question": "查找生产最贵家具的公司的id和商店的数量。",
        "query": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
        "mask_query": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "network_2",
        "question": "朋友的平均年龄最大的人是哪位？",
        "query": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "mask_query": "SELECT T2.<unk> ,  avg(T1.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> GROUP BY T2.<unk> ORDER BY avg(T1.<unk>) DESC LIMIT 1"
    },
    {
        "db_id": "e_learning",
        "question": "按照个人姓名的字母顺序排列关于课程作者和导师的信息。",
        "query": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "mask_query": "SELECT * FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "book_2",
        "question": "显示出版商是“文学”或“机械”的出版物价格。",
        "query": "SELECT Price FROM publication WHERE Publisher  =  \"文学\" OR Publisher  =  \"机械\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"文学\" OR <unk>  =  \"机械\""
    },
    {
        "db_id": "company_employee",
        "question": "按照员工工作的年限的降序显示公司和员工的姓名。",
        "query": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "mask_query": "SELECT T3.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> ORDER BY T1.<unk>"
    },
    {
        "db_id": "book_2",
        "question": "列出出版物价格最高的出版商。",
        "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC LIMIT 1"
    },
    {
        "db_id": "academic",
        "question": "返回在“PVLDB”上的论文数。",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\";"
    },
    {
        "db_id": "academic",
        "question": "返回“李政道”在2000年以后在“PVLDB”上发表的论文。",
        "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"李政道\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t4 JOIN <mask> AS t2 ON t4.<unk>  =  t2.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t4.<unk> JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"李政道\" AND t2.<unk>  =  \"PVLDB\" AND t4.<unk>  >  2000;"
    },
    {
        "db_id": "bbc_channels",
        "question": "按开始年份的顺序列出所有项目名称。最开始列出最近的项目。",
        "query": "SELECT title FROM program ORDER BY start_year DESC",
        "mask_query": "SELECT title FROM <mask> ORDER BY start_year DESC"
    },
    {
        "db_id": "yelp",
        "question": "找出所有有“南京大牌档”的城市。",
        "query": "SELECT city FROM business WHERE name  =  \"南京大牌档\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"南京大牌档\";"
    },
    {
        "db_id": "car_1",
        "question": "有多少车比最大马力的汽车有更大的加速度？",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "mask_query": "SELECT COUNT(*) FROM CARS_DATA WHERE <unk>  >  ( SELECT <unk> FROM CARS_DATA ORDER BY <unk> DESC LIMIT 1 );"
    },
    {
        "db_id": "voter_2",
        "question": "所有有主席选票的“女性”性别学生的名字和姓氏是什么？",
        "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "mask_query": "SELECT DISTINCT T1.<unk> ,  T1.<unk> FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.<unk>  =  T2.President_VOTE WHERE T1.sex  =  \"F\""
    },
    {
        "db_id": "election_representative",
        "question": "按投票下降顺序，代表的名字是什么？",
        "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY votes DESC"
    },
    {
        "db_id": "car_1",
        "question": "找出重量低于平均重量的汽车的型号。",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "mask_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.<unk>  =  T2.<unk> WHERE T2.<unk>  <  (SELECT avg(<unk>) FROM CARS_DATA)"
    },
    {
        "db_id": "college_2",
        "question": "找出每个系的学生总数和教师总数。",
        "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "mask_query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T1.<unk>  =  T3.<unk> GROUP BY T3.<unk>"
    },
    {
        "db_id": "geo",
        "question": "什么省包含“大靖河”穿越的最高点？",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"大靖河\" ) );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"大靖河\" ) );"
    },
    {
        "db_id": "riding_club",
        "question": "请显示最常见的运动员职业。",
        "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出不代表任何地区发言的发言人的姓名。",
        "query": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
        "mask_query": "SELECT name FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "voter_1",
        "question": "返回名字中包含子字符串“勇”的参赛者的名字。",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%勇%\"",
        "mask_query": "SELECT <unk> FROM contestants WHERE <unk> LIKE \"%勇%\""
    },
    {
        "db_id": "book_2",
        "question": "显示价格高于10000000和价格低于50000000的出版物的出版商。",
        "query": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  10000000 INTERSECT SELECT <unk> FROM <mask> WHERE <unk>  <  5000000"
    },
    {
        "db_id": "geo",
        "question": "所有省的面积是多少？",
        "query": "SELECT area FROM state;",
        "mask_query": "SELECT <unk> FROM <mask>;"
    },
    {
        "db_id": "railway",
        "question": "那些国籍不是“澳大利亚”经理的最高水平是什么？",
        "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"澳大利亚\"",
        "mask_query": "SELECT max(LEVEL) FROM <mask> WHERE <unk> != \"澳大利亚\""
    },
    {
        "db_id": "geo",
        "question": "有多少省与省会是“杭州”的省份划界？",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"杭州\" );",
        "mask_query": "SELECT COUNT ( <unk> ) FROM <mask> WHERE <unk>  =  ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"杭州\" );"
    },
    {
        "db_id": "railway",
        "question": "显示年龄在50岁以上或46岁以下的管理人员所在的国家。",
        "query": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  >  50 OR <unk>  <  46"
    },
    {
        "db_id": "performance_attendance",
        "question": "显示在“工人体育场”或“虹口体育场”演出的出席率。",
        "query": "SELECT Attendance FROM performance WHERE LOCATION  =  \"工人体育场\" OR LOCATION  =  \"虹口体育场\"",
        "mask_query": "SELECT <unk> FROM <mask> WHERE LOCATION  =  \"工人体育场\" OR LOCATION  =  \"虹口体育场\""
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "角色代码为“ED”的描述是什么？",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "mask_query": "SELECT <unk> FROM ROLES WHERE <unk> = \"ED\";"
    },
    {
        "db_id": "academic",
        "question": "把论文“使数据库可用”的关键词数目返回。",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"使数据库可用\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<mask> ) FROM <mask> AS t3 JOIN <mask> AS t1 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t2.<unk>  =  \"使数据库可用\";"
    },
    {
        "db_id": "protein_institute",
        "question": "根据楼层数显示所有建筑物的名称、街道地址和楼层数。",
        "query": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors",
        "mask_query": "SELECT name ,  street_address ,  floors FROM <mask> ORDER BY floors"
    },
    {
        "db_id": "phone_1",
        "question": "查找从未被任何手机使用的芯片模型的平均ram大小。",
        "query": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
        "mask_query": "SELECT avg(<unk>) FROM <mask> WHERE model_name NOT IN (SELECT <mask> FROM <mask>)"
    },
    {
        "db_id": "products_for_hire",
        "question": "预订的产品的最大、最小和平均预订数量是多少？",
        "query": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked",
        "mask_query": "SELECT max(<unk>) ,  min(<unk>) ,  avg(<unk>) FROM products_booked"
    },
    {
        "db_id": "roller_coaster",
        "question": "显示具有最高过山车的国家的名称和人口。",
        "query": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
        "mask_query": "SELECT T1.<unk> ,  T1.population FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> ORDER BY T2.<unk> DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "没有音乐会的体育场的名称。",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "mask_query": "SELECT name FROM <mask> WHERE stadium_id NOT IN (SELECT stadium_id FROM <mask>)"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "显示文档类型代码是“简历”或“通知”的文档数量。",
        "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"简历\" OR document_type_code  =  \"通知\"",
        "mask_query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"简历\" OR document_type_code  =  \"通知\""
    },
    {
        "db_id": "swimming",
        "question": "有多少个城市有在2006年前开放的体育场？",
        "query": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006",
        "mask_query": "SELECT count(DISTINCT city) FROM <mask> WHERE opening_year  <  2006"
    },
    {
        "db_id": "district_spokesman",
        "question": "找出发言人最多的地区的名字。",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1",
        "mask_query": "SELECT t1.name FROM <mask> AS t1 JOIN <mask> AS t2 ON t1.<unk>  =  t2.<unk> GROUP BY t2.<unk> ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "swimming",
        "question": "哪个国家有最多3个体育场馆在名单上？",
        "query": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3",
        "mask_query": "SELECT country FROM <mask> GROUP BY country HAVING count(*)  <=  3"
    },
    {
        "db_id": "headphone_store",
        "question": "哪些商店没有耳机存货？告诉我商店的名字。",
        "query": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
        "mask_query": "SELECT name FROM <mask> WHERE store_id NOT IN (SELECT store_id FROM <mask>)"
    },
    {
        "db_id": "academic",
        "question": "返回“数据库”领域中关键字的个数。",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"数据库\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<mask> ) FROM DOMAIN AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t1 ON t1.<unk>  =  t2.<unk> WHERE t3.<unk>  =  \"数据库\";"
    },
    {
        "db_id": "district_spokesman",
        "question": "返回人口大于4000或面积大于3000的地区的ID和名称。",
        "query": "SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000",
        "mask_query": "SELECT district_id ,  name FROM <mask> WHERE area_km  >  3000 OR population  >  4000"
    },
    {
        "db_id": "advertising_agencies",
        "question": "每张发票有多少付款？",
        "query": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
        "mask_query": "SELECT <unk> ,  count(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "manufacturer",
        "question": "找到市场份额前2的家具的总市场价格。",
        "query": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2",
        "mask_query": "SELECT sum(market_rate) FROM <mask> ORDER BY market_rate DESC LIMIT 2"
    },
    {
        "db_id": "soccer_2",
        "question": "一些球员在“中场”位置，但没有“守门员”位置的学校名称是什么？",
        "query": "SELECT cName FROM  tryout WHERE pPos  =  '中场' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  '守门员'",
        "mask_query": "SELECT <unk> FROM  tryout WHERE <unk>  =  '中场' EXCEPT SELECT <unk> FROM  tryout WHERE <unk>  =  '守门员'"
    },
    {
        "db_id": "manufacturer",
        "question": "查找我们的记录里没有公司正在生产的家具的市场份额和名称。",
        "query": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
        "mask_query": "SELECT <unk> ,  name FROM <mask> WHERE <unk> NOT IN (SELECT <unk> FROM <mask>)"
    },
    {
        "db_id": "perpetrator",
        "question": "以受伤人数的升序列出犯罪者伤害的人数。",
        "query": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> ASC"
    },
    {
        "db_id": "scholar",
        "question": "2012年“中和抗体”研究的主要研究者是谁？",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"中和抗体\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "mask_query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN <mask> AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN <mask> AS t4 ON t4.paperid  =  t1.paperid JOIN <mask> AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"中和抗体\" AND t4.<unk>  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
    },
    {
        "db_id": "yelp",
        "question": "“武汉”有多少家“埃及”“餐馆”？",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"武汉\" AND t2.category_name  =  \"餐厅\" AND t3.category_name  =  \"埃及\";",
        "mask_query": "SELECT COUNT ( DISTINCT t1.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"武汉\" AND t2.<unk>  =  \"餐厅\" AND t3.<unk>  =  \"埃及\";"
    },
    {
        "db_id": "soccer_2",
        "question": "那些比“河北”省至少一所大学大的大学叫什么名字？",
        "query": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  '河北')",
        "mask_query": "SELECT DISTINCT <unk> FROM college WHERE <unk>  >  (SELECT min(<unk>) FROM college WHERE <unk>  =  '河北')"
    },
    {
        "db_id": "imdb",
        "question": "“金庸”创作的电视连续剧是什么？",
        "query": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"金庸\";",
        "mask_query": "SELECT t2.<unk> FROM <mask> AS t1 JOIN <mask> AS t3 ON t1.<unk>  =  t3.<unk> JOIN <mask> AS t2 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"金庸\";"
    },
    {
        "db_id": "bbc_channels",
        "question": "找出年龄在30到60岁之间的导演的姓名。",
        "query": "SELECT name FROM director WHERE age BETWEEN 30 AND 60",
        "mask_query": "SELECT name FROM <mask> WHERE age BETWEEN 30 AND 60"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "授予多少个不同的学位？",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "mask_query": "SELECT count(DISTINCT <unk>) FROM <mask>"
    },
    {
        "db_id": "soccer_3",
        "question": "每个制造商有多少个俱乐部使用？",
        "query": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
        "mask_query": "SELECT <unk> ,  COUNT(*) FROM <mask> GROUP BY <unk>"
    },
    {
        "db_id": "academic",
        "question": "返回把所有包含“自然语言”这个关键词的论文。",
        "query": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"自然语言\";",
        "mask_query": "SELECT t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t2.<unk> WHERE t1.<mask>  =  \"自然语言\";"
    },
    {
        "db_id": "school_finance",
        "question": "入学人数高于平均水平的学校的吉祥物是什么？",
        "query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)",
        "mask_query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"
    },
    {
        "db_id": "twitter_1",
        "question": "找到被“马丽”和“苏晴”跟随的用户的ID。",
        "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"马丽\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"苏晴\"",
        "mask_query": "SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"马丽\" INTERSECT SELECT T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"苏晴\""
    },
    {
        "db_id": "soccer_2",
        "question": "平均、最大和最小训练时间是多少？",
        "query": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",
        "mask_query": "SELECT avg(<unk>) ,  max(<unk>) ,  min(<unk>) FROM <mask>"
    },
    {
        "db_id": "swimming",
        "question": "游泳运动员来自多少个不同的国家？",
        "query": "SELECT count(DISTINCT nationality) FROM swimmer",
        "mask_query": "SELECT count(DISTINCT nationality) FROM <mask>"
    },
    {
        "db_id": "riding_club",
        "question": "有多少运动员？",
        "query": "SELECT count(*) FROM player",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "customer_deliveries",
        "question": "列出所有客户的姓名、电话号码和电子邮件，按照成为客户的日期进行排序。",
        "query": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer",
        "mask_query": "SELECT <unk> ,  <unk> ,  <unk> FROM <mask> ORDER BY <unk>"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "住址在“陕西”的学生的名字和姓是什么？",
        "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"陕西\"",
        "mask_query": "SELECT T2.<unk> ,  T2.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  \"陕西\""
    },
    {
        "db_id": "school_finance",
        "question": "显示所有捐赠者的姓名。",
        "query": "SELECT DISTINCT donator_name FROM endowment",
        "mask_query": "SELECT DISTINCT <unk> FROM <mask>"
    },
    {
        "db_id": "baseball_1",
        "question": "哪三个国家拥有最少数量的运动员？",
        "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
        "mask_query": "SELECT <unk> FROM <mask> GROUP BY <unk> ORDER BY count(*) ASC LIMIT 3;"
    },
    {
        "db_id": "book_review",
        "question": "按页数降序列出书名。",
        "query": "SELECT Title FROM book ORDER BY Pages DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY <unk> DESC"
    },
    {
        "db_id": "game_injury",
        "question": "按主队名称降序排列，列出比赛日期。",
        "query": "SELECT Date FROM game ORDER BY home_team DESC",
        "mask_query": "SELECT <unk> FROM <mask> ORDER BY home_team DESC"
    },
    {
        "db_id": "book_review",
        "question": "没有评级的书的类型和书名是什么？",
        "query": "SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;",
        "mask_query": "SELECT TYPE ,  title FROM <mask> EXCEPT SELECT T1.type ,  T1.title FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk>;"
    },
    {
        "db_id": "imdb",
        "question": "找出1984出生的演员",
        "query": "SELECT name FROM actor WHERE birth_year  =  1984;",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  1984;"
    },
    {
        "db_id": "store_1",
        "question": "“周” “浩歌”花了多少钱？",
        "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"周\" AND T1.last_name = \"浩歌\";",
        "mask_query": "SELECT sum(T2.<unk>) FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk> = T2.<unk> WHERE T1.<unk> = \"周\" AND T1.<unk> = \"浩歌\";"
    },
    {
        "db_id": "station_weather",
        "question": "按时间从早到晚的顺序显示所有列车号码和名称。",
        "query": "SELECT train_number ,  name FROM train ORDER BY TIME",
        "mask_query": "SELECT <unk> ,  <unk> FROM <mask> ORDER BY TIME"
    },
    {
        "db_id": "district_spokesman",
        "question": "哪个发言人的分数比平均分低？",
        "query": "SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)",
        "mask_query": "SELECT name FROM <mask> WHERE points  <  (SELECT avg(points) FROM <mask>)"
    },
    {
        "db_id": "geo",
        "question": "与“四川”临近的最大的省人口是多少？",
        "query": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"四川\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"四川\" );",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  ( SELECT MAX ( <unk> ) FROM <mask> WHERE <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" ) ) AND <unk> IN ( SELECT <unk> FROM <mask> WHERE <unk>  =  \"四川\" );"
    },
    {
        "db_id": "tracking_share_transactions",
        "question": "至少有100份额或超过100份额的交易日期是什么？",
        "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100",
        "mask_query": "SELECT <unk> FROM TRANSACTIONS WHERE <unk>  >=  100 OR <unk>  >=  100"
    },
    {
        "db_id": "yelp",
        "question": "列出所有审查“餐馆”业务的用户。",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"餐馆\";",
        "mask_query": "SELECT t4.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN USER AS t4 ON t4.<unk>  =  t3.<unk> WHERE t2.<unk>  =  \"餐馆\";"
    },
    {
        "db_id": "assets_maintenance",
        "question": "哪些员工联系过哪些工程师？列出员工姓名和工程师的名字和姓氏。",
        "query": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
        "mask_query": "SELECT T1.<unk> ,  T3.<unk> ,  T3.<unk> FROM <mask> AS T1 JOIN <mask> AS T2 ON T1.<unk>  =  T2.<unk> JOIN <mask> AS T3 ON T2.<unk>  =  T3.<unk>"
    },
    {
        "db_id": "news_report",
        "question": "那儿有多少记者？",
        "query": "SELECT count(*) FROM journalist",
        "mask_query": "SELECT count(*) FROM <mask>"
    },
    {
        "db_id": "coffee_shop",
        "question": "按照开业时间排列显示商店地址。",
        "query": "SELECT address FROM shop ORDER BY open_year",
        "mask_query": "SELECT address FROM <mask> ORDER BY open_year"
    },
    {
        "db_id": "entertainment_awards",
        "question": "2007年度的艺术节名称是什么？",
        "query": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007",
        "mask_query": "SELECT <unk> FROM <mask> WHERE YEAR  =  2007"
    },
    {
        "db_id": "academic",
        "question": "返回每年“李政道”投稿的论文数。",
        "query": "SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"李政道\" GROUP BY t3.year;",
        "mask_query": "SELECT COUNT ( DISTINCT t3.<unk> )  ,  t3.<unk> FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t2.<unk>  =  t3.<unk> WHERE t1.<unk>  =  \"李政道\" GROUP BY t3.<unk>;"
    },
    {
        "db_id": "academic",
        "question": "返回2000年前在“PVLDB”上发表的论文的数量。",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;",
        "mask_query": "SELECT COUNT ( DISTINCT t2.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> WHERE t1.<unk>  =  \"PVLDB\" AND t2.<unk>  <  2000;"
    },
    {
        "db_id": "geo",
        "question": "给我位于“浙江”的湖泊",
        "query": "SELECT lake_name FROM lake WHERE state_name  =  \"浙江\";",
        "mask_query": "SELECT <unk> FROM <mask> WHERE <unk>  =  \"浙江\";"
    },
    {
        "db_id": "entertainment_awards",
        "question": "参观这些艺术节的观众总数是多少？",
        "query": "SELECT sum(Num_of_Audience) FROM festival_detail",
        "mask_query": "SELECT sum(<unk>) FROM <mask>"
    },
    {
        "db_id": "academic",
        "question": "返回机构是“北京理工大学”的发表论文数。",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"北京理工大学\";",
        "mask_query": "SELECT COUNT ( DISTINCT t4.<unk> ) FROM <mask> AS t2 JOIN <mask> AS t1 ON t2.<unk>  =  t1.<unk> JOIN <mask> AS t3 ON t3.<unk>  =  t1.<unk> JOIN <mask> AS t4 ON t3.<unk>  =  t4.<unk> WHERE t2.<unk>  =  \"北京理工大学\";"
    },
    {
        "db_id": "products_for_hire",
        "question": "可用性等于1的产品名称是什么？",
        "query": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1",
        "mask_query": "SELECT T2.<unk> FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.<unk>  =  T2.<unk> WHERE T1.<unk>  =  1"
    },
    {
        "db_id": "academic",
        "question": "把由“李政道”和“杨振宁”写的论文数量返回。",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"李政道\" AND t1.name  =  \"杨振宁\";",
        "mask_query": "SELECT COUNT ( DISTINCT t5.<unk> ) FROM <mask> AS t3 JOIN <mask> AS t2 ON t3.<unk>  =  t2.<unk> JOIN <mask> AS t5 ON t3.<unk>  =  t5.<unk> JOIN <mask> AS t4 ON t4.<unk>  =  t5.<unk> JOIN <mask> AS t1 ON t4.<unk>  =  t1.<unk> WHERE t2.<unk>  =  \"李政道\" AND t1.<unk>  =  \"杨振宁\";"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "显示邮件快照的结果代码以及每个结果代码中的邮件快照数量。",
        "query": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code",
        "mask_query": "SELECT <unk> ,  count(*) FROM mailshot_customers GROUP BY <unk>"
    }
]